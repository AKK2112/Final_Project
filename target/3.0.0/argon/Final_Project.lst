
d:/Labs/Final_Project/target/3.0.0/argon/Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004ea0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d8ec0  000d8ec0  00008ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000d8ec8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  2003e4f0  000d8ecc  0001e4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000298  2003e558  2003e558  0002e558  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000d8f34  000d8f34  00028f34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000d8f5c  000d8f5c  00028f5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001de200  00000000  00000000  00028f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001c460  00000000  00000000  00207160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003cfd1  00000000  00000000  002235c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003278  00000000  00000000  00260591  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 0000a328  00000000  00000000  00263809  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003ff6f  00000000  00000000  0026db31  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00049052  00000000  00000000  002adaa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0012e97c  00000000  00000000  002f6af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00009160  00000000  00000000  00425470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 f97d 	bl	d8330 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 f985 	bl	d834c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e4f0 	.word	0x2003e4f0
   d404c:	000d8ecc 	.word	0x000d8ecc
   d4050:	2003e558 	.word	0x2003e558
   d4054:	2003e558 	.word	0x2003e558
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fb4f 	bl	d6704 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d8e90 	.word	0x000d8e90
   d4080:	000d8eb4 	.word	0x000d8eb4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bcaa 	b.w	d49dc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fdc9 	bl	d4c20 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 baf9 	b.w	d6688 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bf43 	b.w	d5f20 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bf41 	b.w	d5f20 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bf47 	b.w	d5f30 <free>

000d40a2 <_ZdaPv>:
   d40a2:	f001 bf45 	b.w	d5f30 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 fe82 	bl	d5db8 <panic_>
  while (1);
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d5ad9 	.word	0x000d5ad9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40cc:	4770      	bx	lr

000d40ce <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40ce:	b510      	push	{r4, lr}
  }
   d40d0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40d2:	4604      	mov	r4, r0
  }
   d40d4:	f003 f9ef 	bl	d74b6 <_ZdlPvj>
   d40d8:	4620      	mov	r0, r4
   d40da:	bd10      	pop	{r4, pc}

000d40dc <_ZN10BlynkParam3addEPKc.part.0.constprop.0>:
    memcpy(buff+len, b, l);
    len += l;
}

inline
void BlynkParam::add(const char* str)
   d40dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40de:	4604      	mov	r4, r0
{
    if (str == NULL) {
        buff[len++] = '\0';
        return;
    }
    add(str, strlen(str)+1);
   d40e0:	4608      	mov	r0, r1
   d40e2:	9101      	str	r1, [sp, #4]
   d40e4:	f004 f968 	bl	d83b8 <strlen>
    if (len + l > buff_size)
   d40e8:	6863      	ldr	r3, [r4, #4]
   d40ea:	68a2      	ldr	r2, [r4, #8]
    add(str, strlen(str)+1);
   d40ec:	1c45      	adds	r5, r0, #1
    if (len + l > buff_size)
   d40ee:	18e8      	adds	r0, r5, r3
   d40f0:	4290      	cmp	r0, r2
   d40f2:	d808      	bhi.n	d4106 <_ZN10BlynkParam3addEPKc.part.0.constprop.0+0x2a>
    memcpy(buff+len, b, l);
   d40f4:	6820      	ldr	r0, [r4, #0]
   d40f6:	9901      	ldr	r1, [sp, #4]
   d40f8:	462a      	mov	r2, r5
   d40fa:	4418      	add	r0, r3
   d40fc:	f004 f918 	bl	d8330 <memcpy>
    len += l;
   d4100:	6860      	ldr	r0, [r4, #4]
   d4102:	4428      	add	r0, r5
   d4104:	6060      	str	r0, [r4, #4]
}
   d4106:	b003      	add	sp, #12
   d4108:	bd30      	pop	{r4, r5, pc}
	...

000d410c <_ZN22BlynkTransportParticleD1Ev>:
#define BlynkParticle_h

#include "BlynkApiParticle.h"
#include "Blynk/BlynkProtocol.h"

class BlynkTransportParticle
   d410c:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d410e:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4110:	4b0a      	ldr	r3, [pc, #40]	; (d413c <_ZN22BlynkTransportParticleD1Ev+0x30>)
   d4112:	6003      	str	r3, [r0, #0]
   d4114:	4605      	mov	r5, r0
   d4116:	b17c      	cbz	r4, d4138 <_ZN22BlynkTransportParticleD1Ev+0x2c>
      if (--_M_use_count == 0)
   d4118:	6863      	ldr	r3, [r4, #4]
   d411a:	3b01      	subs	r3, #1
   d411c:	6063      	str	r3, [r4, #4]
   d411e:	b95b      	cbnz	r3, d4138 <_ZN22BlynkTransportParticleD1Ev+0x2c>
          _M_dispose();
   d4120:	6823      	ldr	r3, [r4, #0]
   d4122:	4620      	mov	r0, r4
   d4124:	689b      	ldr	r3, [r3, #8]
   d4126:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4128:	68a3      	ldr	r3, [r4, #8]
   d412a:	3b01      	subs	r3, #1
   d412c:	60a3      	str	r3, [r4, #8]
   d412e:	b91b      	cbnz	r3, d4138 <_ZN22BlynkTransportParticleD1Ev+0x2c>
            _M_destroy();
   d4130:	6823      	ldr	r3, [r4, #0]
   d4132:	4620      	mov	r0, r4
   d4134:	68db      	ldr	r3, [r3, #12]
   d4136:	4798      	blx	r3
   d4138:	4628      	mov	r0, r5
   d413a:	bd38      	pop	{r3, r4, r5, pc}
   d413c:	000d8bdc 	.word	0x000d8bdc

000d4140 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4140:	b40e      	push	{r1, r2, r3}
   d4142:	b503      	push	{r0, r1, lr}
   d4144:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4146:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4148:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d414c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d414e:	f002 f9f2 	bl	d6536 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4152:	b002      	add	sp, #8
   d4154:	f85d eb04 	ldr.w	lr, [sp], #4
   d4158:	b003      	add	sp, #12
   d415a:	4770      	bx	lr

000d415c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d415c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d415e:	4604      	mov	r4, r0
   d4160:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4162:	7922      	ldrb	r2, [r4, #4]
   d4164:	68a3      	ldr	r3, [r4, #8]
   d4166:	b132      	cbz	r2, d4176 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4168:	b9a3      	cbnz	r3, d4194 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d416a:	490b      	ldr	r1, [pc, #44]	; (d4198 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d416c:	b002      	add	sp, #8
   d416e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4172:	f002 b9a5 	b.w	d64c0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4176:	4a09      	ldr	r2, [pc, #36]	; (d419c <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4178:	7b26      	ldrb	r6, [r4, #12]
   d417a:	4d09      	ldr	r5, [pc, #36]	; (d41a0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d417c:	4909      	ldr	r1, [pc, #36]	; (d41a4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d417e:	7b64      	ldrb	r4, [r4, #13]
   d4180:	2e01      	cmp	r6, #1
   d4182:	bf18      	it	ne
   d4184:	4629      	movne	r1, r5
   d4186:	e9cd 1400 	strd	r1, r4, [sp]
   d418a:	4907      	ldr	r1, [pc, #28]	; (d41a8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d418c:	f7ff ffd8 	bl	d4140 <_ZN5Print6printfEPKcz>
  }
   d4190:	b002      	add	sp, #8
   d4192:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4194:	4a05      	ldr	r2, [pc, #20]	; (d41ac <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4196:	e7ef      	b.n	d4178 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4198:	000d851d 	.word	0x000d851d
   d419c:	000d8514 	.word	0x000d8514
   d41a0:	000d8519 	.word	0x000d8519
   d41a4:	000d8515 	.word	0x000d8515
   d41a8:	000d8533 	.word	0x000d8533
   d41ac:	000d850c 	.word	0x000d850c

000d41b0 <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41b0:	b40e      	push	{r1, r2, r3}
   d41b2:	b503      	push	{r0, r1, lr}
   d41b4:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   d41b6:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d41b8:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d41bc:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   d41be:	f002 f9ba 	bl	d6536 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d41c2:	b002      	add	sp, #8
   d41c4:	f85d eb04 	ldr.w	lr, [sp], #4
   d41c8:	b003      	add	sp, #12
   d41ca:	4770      	bx	lr

000d41cc <_Z8callbackPcPhj>:
MQTT client("lab.thewcl.com", 1883, callback);//which connection it should connect to


// recieve message
void callback(char* topic, byte* payload, unsigned int length) 
{
   d41cc:	b598      	push	{r3, r4, r7, lr}
  char p[length + 1];
   d41ce:	f102 0308 	add.w	r3, r2, #8
   d41d2:	f023 0307 	bic.w	r3, r3, #7
{
   d41d6:	af00      	add	r7, sp, #0
  char p[length + 1];
   d41d8:	ebad 0d03 	sub.w	sp, sp, r3
{
   d41dc:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   d41de:	4668      	mov	r0, sp
   d41e0:	f004 f8a6 	bl	d8330 <memcpy>
  p[length] = NULL;
   d41e4:	2300      	movs	r3, #0
   d41e6:	f80d 3004 	strb.w	r3, [sp, r4]
  Serial.printlnf("%s",p);
   d41ea:	f002 fbb3 	bl	d6954 <_Z16_fetch_usbserialv>
   d41ee:	4903      	ldr	r1, [pc, #12]	; (d41fc <_Z8callbackPcPhj+0x30>)
   d41f0:	466a      	mov	r2, sp
   d41f2:	f7ff ffdd 	bl	d41b0 <_ZN5Print8printlnfEPKcz>
  
  
}
   d41f6:	46bd      	mov	sp, r7
   d41f8:	bd98      	pop	{r3, r4, r7, pc}
   d41fa:	bf00      	nop
   d41fc:	000d8550 	.word	0x000d8550

000d4200 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   d4200:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4202:	f001 fc71 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4206:	4b03      	ldr	r3, [pc, #12]	; (d4214 <_ZN10CloudClass7processEv+0x14>)
   d4208:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   d420a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   d420e:	f001 be6f 	b.w	d5ef0 <spark_process>
   d4212:	bf00      	nop
   d4214:	2003e7d4 	.word	0x2003e7d4

000d4218 <_ZNK10BlynkParam8iterator5asIntEv>:
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4218:	6803      	ldr	r3, [r0, #0]
   d421a:	b12b      	cbz	r3, d4228 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   d421c:	6842      	ldr	r2, [r0, #4]
   d421e:	4293      	cmp	r3, r2
   d4220:	d202      	bcs.n	d4228 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   d4222:	4618      	mov	r0, r3
   d4224:	f004 b86e 	b.w	d8304 <atoi>
   d4228:	2000      	movs	r0, #0
   d422a:	4770      	bx	lr

000d422c <_ZN10BlynkParam8iteratorppEv>:
        iterator& operator ++() {
   d422c:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d422e:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   d4230:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d4232:	b145      	cbz	r5, d4246 <_ZN10BlynkParam8iteratorppEv+0x1a>
   d4234:	6843      	ldr	r3, [r0, #4]
   d4236:	429d      	cmp	r5, r3
   d4238:	d205      	bcs.n	d4246 <_ZN10BlynkParam8iteratorppEv+0x1a>
                ptr += strlen(ptr) + 1;
   d423a:	4628      	mov	r0, r5
   d423c:	f004 f8bc 	bl	d83b8 <strlen>
   d4240:	3001      	adds	r0, #1
   d4242:	4405      	add	r5, r0
   d4244:	6025      	str	r5, [r4, #0]
        }
   d4246:	4620      	mov	r0, r4
   d4248:	bd38      	pop	{r3, r4, r5, pc}
	...

000d424c <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   d424c:	b538      	push	{r3, r4, r5, lr}
   d424e:	4604      	mov	r4, r0
   d4250:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   d4252:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d4256:	6825      	ldr	r5, [r4, #0]
   d4258:	4a04      	ldr	r2, [pc, #16]	; (d426c <_ZN10BlynkParam3addEi+0x20>)
   d425a:	1a09      	subs	r1, r1, r0
   d425c:	4428      	add	r0, r5
   d425e:	f001 fe77 	bl	d5f50 <snprintf>
   d4262:	6863      	ldr	r3, [r4, #4]
   d4264:	3001      	adds	r0, #1
   d4266:	4403      	add	r3, r0
   d4268:	6063      	str	r3, [r4, #4]
    }
   d426a:	bd38      	pop	{r3, r4, r5, pc}
   d426c:	000d8553 	.word	0x000d8553

000d4270 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   d4270:	b538      	push	{r3, r4, r5, lr}
   d4272:	4604      	mov	r4, r0
   d4274:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   d4276:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   d427a:	6825      	ldr	r5, [r4, #0]
   d427c:	4a04      	ldr	r2, [pc, #16]	; (d4290 <_ZN10BlynkParam3addEl+0x20>)
   d427e:	1a09      	subs	r1, r1, r0
   d4280:	4428      	add	r0, r5
   d4282:	f001 fe65 	bl	d5f50 <snprintf>
   d4286:	6863      	ldr	r3, [r4, #4]
   d4288:	3001      	adds	r0, #1
   d428a:	4403      	add	r3, r0
   d428c:	6063      	str	r3, [r4, #4]
    }
   d428e:	bd38      	pop	{r3, r4, r5, pc}
   d4290:	000d8556 	.word	0x000d8556

000d4294 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   d4294:	b508      	push	{r3, lr}
        state = CONNECTING;
   d4296:	2300      	movs	r3, #0
   d4298:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   d429a:	6800      	ldr	r0, [r0, #0]
   d429c:	f002 fe44 	bl	d6f28 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   d42a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   d42a4:	f001 ba6a 	b.w	d577c <BlynkNoOpCbk>

000d42a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d42a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   d42ac:	188f      	adds	r7, r1, r2
   d42ae:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   d42b0:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d42b2:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   d42b6:	4606      	mov	r6, r0
   d42b8:	4689      	mov	r9, r1
   d42ba:	4690      	mov	r8, r2
    if (it >= param.end())
   d42bc:	f080 80c2 	bcs.w	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   d42c0:	a805      	add	r0, sp, #20
   d42c2:	880d      	ldrh	r5, [r1, #0]
   d42c4:	f7ff ffb2 	bl	d422c <_ZN10BlynkParam8iteratorppEv>
   d42c8:	6803      	ldr	r3, [r0, #0]
   d42ca:	429f      	cmp	r7, r3
   d42cc:	f240 80ba 	bls.w	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d42d0:	9805      	ldr	r0, [sp, #20]
   d42d2:	7803      	ldrb	r3, [r0, #0]
   d42d4:	2b41      	cmp	r3, #65	; 0x41
   d42d6:	d149      	bne.n	d436c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   d42d8:	3001      	adds	r0, #1
   d42da:	f004 f813 	bl	d8304 <atoi>
   d42de:	2805      	cmp	r0, #5
   d42e0:	dd37      	ble.n	d4352 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   d42e2:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   d42e4:	f247 2376 	movw	r3, #29302	; 0x7276
   d42e8:	429d      	cmp	r5, r3
   d42ea:	f000 80d3 	beq.w	d4494 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   d42ee:	d841      	bhi.n	d4374 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   d42f0:	f247 2361 	movw	r3, #29281	; 0x7261
   d42f4:	429d      	cmp	r5, r3
   d42f6:	f000 80a8 	beq.w	d444a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   d42fa:	f247 2364 	movw	r3, #29284	; 0x7264
   d42fe:	429d      	cmp	r5, r3
   d4300:	d06b      	beq.n	d43da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   d4302:	f646 5370 	movw	r3, #28016	; 0x6d70
   d4306:	429d      	cmp	r5, r3
   d4308:	d141      	bne.n	d438e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   d430a:	4d78      	ldr	r5, [pc, #480]	; (d44ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d430c:	4e78      	ldr	r6, [pc, #480]	; (d44f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   d430e:	f8df 81f4 	ldr.w	r8, [pc, #500]	; d4504 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        while (it < param.end()) {
   d4312:	9805      	ldr	r0, [sp, #20]
   d4314:	4287      	cmp	r7, r0
   d4316:	f240 8095 	bls.w	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d431a:	7803      	ldrb	r3, [r0, #0]
   d431c:	2b41      	cmp	r3, #65	; 0x41
   d431e:	d14b      	bne.n	d43b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   d4320:	3001      	adds	r0, #1
   d4322:	f003 ffef 	bl	d8304 <atoi>
   d4326:	2805      	cmp	r0, #5
   d4328:	dd39      	ble.n	d439e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   d432a:	24ff      	movs	r4, #255	; 0xff
            ++it;
   d432c:	a805      	add	r0, sp, #20
   d432e:	f7ff ff7d 	bl	d422c <_ZN10BlynkParam8iteratorppEv>
            if (!strcmp(it.asStr(), "in")) {
   d4332:	f8dd 9014 	ldr.w	r9, [sp, #20]
   d4336:	4629      	mov	r1, r5
   d4338:	4648      	mov	r0, r9
   d433a:	f004 f833 	bl	d83a4 <strcmp>
   d433e:	4601      	mov	r1, r0
   d4340:	2800      	cmp	r0, #0
   d4342:	d13d      	bne.n	d43c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   d4344:	4620      	mov	r0, r4
   d4346:	f002 fff7 	bl	d7338 <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   d434a:	a805      	add	r0, sp, #20
   d434c:	f7ff ff6e 	bl	d422c <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   d4350:	e7df      	b.n	d4312 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   d4352:	9805      	ldr	r0, [sp, #20]
   d4354:	3001      	adds	r0, #1
   d4356:	f003 ffd5 	bl	d8304 <atoi>
   d435a:	2800      	cmp	r0, #0
   d435c:	dbc1      	blt.n	d42e2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   d435e:	9805      	ldr	r0, [sp, #20]
   d4360:	3001      	adds	r0, #1
   d4362:	f003 ffcf 	bl	d8304 <atoi>
   d4366:	300e      	adds	r0, #14
   d4368:	b2c4      	uxtb	r4, r0
   d436a:	e7bb      	b.n	d42e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   d436c:	a805      	add	r0, sp, #20
   d436e:	f7ff ff53 	bl	d4218 <_ZNK10BlynkParam8iterator5asIntEv>
   d4372:	e7f9      	b.n	d4368 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   d4374:	f247 7364 	movw	r3, #30564	; 0x7764
   d4378:	429d      	cmp	r5, r3
   d437a:	d04f      	beq.n	d441c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   d437c:	f247 7376 	movw	r3, #30582	; 0x7776
   d4380:	429d      	cmp	r5, r3
   d4382:	f000 8097 	beq.w	d44b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   d4386:	f247 7361 	movw	r3, #30561	; 0x7761
   d438a:	429d      	cmp	r5, r3
   d438c:	d06f      	beq.n	d446e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d438e:	2300      	movs	r3, #0
   d4390:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4394:	2202      	movs	r2, #2
   d4396:	9200      	str	r2, [sp, #0]
   d4398:	8b72      	ldrh	r2, [r6, #26]
   d439a:	4619      	mov	r1, r3
   d439c:	e03a      	b.n	d4414 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   d439e:	9805      	ldr	r0, [sp, #20]
   d43a0:	3001      	adds	r0, #1
   d43a2:	f003 ffaf 	bl	d8304 <atoi>
   d43a6:	2800      	cmp	r0, #0
   d43a8:	dbbf      	blt.n	d432a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   d43aa:	9805      	ldr	r0, [sp, #20]
   d43ac:	3001      	adds	r0, #1
   d43ae:	f003 ffa9 	bl	d8304 <atoi>
   d43b2:	300e      	adds	r0, #14
   d43b4:	b2c4      	uxtb	r4, r0
   d43b6:	e7b9      	b.n	d432c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   d43b8:	a805      	add	r0, sp, #20
   d43ba:	f7ff ff2d 	bl	d4218 <_ZNK10BlynkParam8iterator5asIntEv>
   d43be:	e7f9      	b.n	d43b4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   d43c0:	4631      	mov	r1, r6
   d43c2:	4648      	mov	r0, r9
   d43c4:	f003 ffee 	bl	d83a4 <strcmp>
   d43c8:	b128      	cbz	r0, d43d6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   d43ca:	4641      	mov	r1, r8
   d43cc:	4648      	mov	r0, r9
   d43ce:	f003 ffe9 	bl	d83a4 <strcmp>
   d43d2:	2800      	cmp	r0, #0
   d43d4:	d1b9      	bne.n	d434a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   d43d6:	2101      	movs	r1, #1
   d43d8:	e7b4      	b.n	d4344 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   d43da:	ab0a      	add	r3, sp, #40	; 0x28
   d43dc:	4945      	ldr	r1, [pc, #276]	; (d44f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   d43de:	9307      	str	r3, [sp, #28]
   d43e0:	a807      	add	r0, sp, #28
   d43e2:	2310      	movs	r3, #16
   d43e4:	2500      	movs	r5, #0
   d43e6:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d43ea:	f7ff fe77 	bl	d40dc <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d43ee:	a807      	add	r0, sp, #28
   d43f0:	4621      	mov	r1, r4
   d43f2:	f7ff ff2b 	bl	d424c <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   d43f6:	4620      	mov	r0, r4
   d43f8:	f002 ffc8 	bl	d738c <digitalRead>
        rsp.add(analogRead(pin));
   d43fc:	4601      	mov	r1, r0
   d43fe:	a807      	add	r0, sp, #28
   d4400:	f7ff ff36 	bl	d4270 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   d4404:	9b08      	ldr	r3, [sp, #32]
   d4406:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d440a:	3b01      	subs	r3, #1
   d440c:	9300      	str	r3, [sp, #0]
   d440e:	9b07      	ldr	r3, [sp, #28]
   d4410:	462a      	mov	r2, r5
   d4412:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   d4414:	4630      	mov	r0, r6
   d4416:	f000 fb19 	bl	d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   d441a:	e013      	b.n	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   d441c:	a805      	add	r0, sp, #20
   d441e:	f7ff ff05 	bl	d422c <_ZN10BlynkParam8iteratorppEv>
   d4422:	6803      	ldr	r3, [r0, #0]
   d4424:	429f      	cmp	r7, r3
   d4426:	d90d      	bls.n	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   d4428:	b2a4      	uxth	r4, r4
   d442a:	2101      	movs	r1, #1
   d442c:	4620      	mov	r0, r4
   d442e:	f002 ff83 	bl	d7338 <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   d4432:	a805      	add	r0, sp, #20
   d4434:	f7ff fef0 	bl	d4218 <_ZNK10BlynkParam8iterator5asIntEv>
   d4438:	1e01      	subs	r1, r0, #0
   d443a:	bf18      	it	ne
   d443c:	2101      	movne	r1, #1
   d443e:	4620      	mov	r0, r4
   d4440:	f002 ff8b 	bl	d735a <digitalWrite>
    }
}
   d4444:	b00f      	add	sp, #60	; 0x3c
   d4446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        : buff((char*)addr), len(length), buff_size(buffsize)
   d444a:	ab0a      	add	r3, sp, #40	; 0x28
   d444c:	9307      	str	r3, [sp, #28]
   d444e:	a807      	add	r0, sp, #28
   d4450:	2310      	movs	r3, #16
   d4452:	4929      	ldr	r1, [pc, #164]	; (d44f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   d4454:	2500      	movs	r5, #0
   d4456:	e9cd 5308 	strd	r5, r3, [sp, #32]
    if (str == NULL) {
   d445a:	f7ff fe3f 	bl	d40dc <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        rsp.add(pin);
   d445e:	a807      	add	r0, sp, #28
   d4460:	4621      	mov	r1, r4
   d4462:	f7ff fef3 	bl	d424c <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   d4466:	4620      	mov	r0, r4
   d4468:	f002 ffa3 	bl	d73b2 <analogRead>
   d446c:	e7c6      	b.n	d43fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   d446e:	a805      	add	r0, sp, #20
   d4470:	f7ff fedc 	bl	d422c <_ZN10BlynkParam8iteratorppEv>
   d4474:	6803      	ldr	r3, [r0, #0]
   d4476:	429f      	cmp	r7, r3
   d4478:	d9e4      	bls.n	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   d447a:	b2a4      	uxth	r4, r4
   d447c:	2101      	movs	r1, #1
   d447e:	4620      	mov	r0, r4
   d4480:	f002 ff5a 	bl	d7338 <pinMode>
        analogWrite(pin, it.asInt());
   d4484:	a805      	add	r0, sp, #20
   d4486:	f7ff fec7 	bl	d4218 <_ZNK10BlynkParam8iterator5asIntEv>
   d448a:	4601      	mov	r1, r0
   d448c:	4620      	mov	r0, r4
   d448e:	f002 ffa7 	bl	d73e0 <_Z11analogWritetm>
    } break;
   d4492:	e7d7      	b.n	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   d4494:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   d4496:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   d449a:	f001 f971 	bl	d5780 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   d449e:	4603      	mov	r3, r0
            handler(req);
   d44a0:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   d44a2:	b123      	cbz	r3, d44ae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   d44a4:	4a15      	ldr	r2, [pc, #84]	; (d44fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   d44a6:	4293      	cmp	r3, r2
   d44a8:	d001      	beq.n	d44ae <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   d44aa:	4798      	blx	r3
   d44ac:	e7ca      	b.n	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   d44ae:	f001 f963 	bl	d5778 <BlynkWidgetRead>
        }
    }
   d44b2:	e7c7      	b.n	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   d44b4:	a805      	add	r0, sp, #20
   d44b6:	f7ff feb9 	bl	d422c <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)it.asStr();
   d44ba:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   d44bc:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   d44c0:	eba3 0109 	sub.w	r1, r3, r9
   d44c4:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   d44c8:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   d44ca:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   d44ce:	910c      	str	r1, [sp, #48]	; 0x30
   d44d0:	f001 f960 	bl	d5794 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   d44d4:	4603      	mov	r3, r0
            handler(req, param);
   d44d6:	a90a      	add	r1, sp, #40	; 0x28
   d44d8:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   d44da:	b123      	cbz	r3, d44e6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   d44dc:	4a08      	ldr	r2, [pc, #32]	; (d4500 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   d44de:	4293      	cmp	r3, r2
   d44e0:	d001      	beq.n	d44e6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   d44e2:	4798      	blx	r3
   d44e4:	e7ae      	b.n	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   d44e6:	f001 f948 	bl	d577a <BlynkWidgetWrite>
    } break;
   d44ea:	e7ab      	b.n	d4444 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   d44ec:	000d855a 	.word	0x000d855a
   d44f0:	000d855d 	.word	0x000d855d
   d44f4:	000d8565 	.word	0x000d8565
   d44f8:	000d8568 	.word	0x000d8568
   d44fc:	000d5779 	.word	0x000d5779
   d4500:	000d577b 	.word	0x000d577b
   d4504:	000d8561 	.word	0x000d8561

000d4508 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   d4508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d450c:	b08c      	sub	sp, #48	; 0x30
   d450e:	af04      	add	r7, sp, #16
   d4510:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   d4512:	2205      	movs	r2, #5
   d4514:	6800      	ldr	r0, [r0, #0]
   d4516:	1d39      	adds	r1, r7, #4
   d4518:	f002 f853 	bl	d65c2 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   d451c:	b3b8      	cbz	r0, d458e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   d451e:	2805      	cmp	r0, #5
   d4520:	d004      	beq.n	d452c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   d4522:	2000      	movs	r0, #0
}
   d4524:	3720      	adds	r7, #32
   d4526:	46bd      	mov	sp, r7
   d4528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   d452c:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d4530:	0a13      	lsrs	r3, r2, #8
   d4532:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr.length = ntohs(hdr.length);
   d4536:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    hdr.msg_id = ntohs(hdr.msg_id);
   d453a:	f8a7 3005 	strh.w	r3, [r7, #5]
   d453e:	b299      	uxth	r1, r3
    hdr.length = ntohs(hdr.length);
   d4540:	0a13      	lsrs	r3, r2, #8
   d4542:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4546:	fa1f f883 	uxth.w	r8, r3
   d454a:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   d454e:	2900      	cmp	r1, #0
   d4550:	d0e7      	beq.n	d4522 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   d4552:	793b      	ldrb	r3, [r7, #4]
   d4554:	bb23      	cbnz	r3, d45a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x98>
        lastActivityIn = BlynkMillis();
   d4556:	f001 f90d 	bl	d5774 <_Z11BlynkMillisv>
   d455a:	4602      	mov	r2, r0
   d455c:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   d455e:	7f60      	ldrb	r0, [r4, #29]
   d4560:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d4564:	b9c0      	cbnz	r0, d4598 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
   d4566:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   d456a:	2901      	cmp	r1, #1
   d456c:	d114      	bne.n	d4598 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
            switch (hdr.length) {
   d456e:	2b09      	cmp	r3, #9
   d4570:	d00f      	beq.n	d4592 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8a>
   d4572:	2bc8      	cmp	r3, #200	; 0xc8
   d4574:	d001      	beq.n	d457a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x72>
   d4576:	2b04      	cmp	r3, #4
   d4578:	d1d4      	bne.n	d4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   d457a:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   d457c:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   d457e:	4620      	mov	r0, r4
                state = CONNECTED;
   d4580:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   d4582:	f000 fb11 	bl	d4ba8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   d4586:	f7ff fe3b 	bl	d4200 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   d458a:	f001 f8f7 	bl	d577c <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   d458e:	2001      	movs	r0, #1
   d4590:	e7c8      	b.n	d4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   d4592:	2303      	movs	r3, #3
   d4594:	7763      	strb	r3, [r4, #29]
                break;
   d4596:	e7c5      	b.n	d4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   d4598:	1f58      	subs	r0, r3, #5
   d459a:	bf18      	it	ne
   d459c:	2001      	movne	r0, #1
   d459e:	e7c1      	b.n	d4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   d45a0:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d45a4:	d903      	bls.n	d45ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa6>
        internalReconnect();
   d45a6:	4620      	mov	r0, r4
   d45a8:	f7ff fe74 	bl	d4294 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d45ac:	e7ef      	b.n	d458e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   d45ae:	f108 0308 	add.w	r3, r8, #8
   d45b2:	f023 0307 	bic.w	r3, r3, #7
   d45b6:	466e      	mov	r6, sp
   d45b8:	ebad 0d03 	sub.w	sp, sp, r3
   d45bc:	ad04      	add	r5, sp, #16
   d45be:	6820      	ldr	r0, [r4, #0]
   d45c0:	4642      	mov	r2, r8
   d45c2:	4629      	mov	r1, r5
   d45c4:	f001 fffd 	bl	d65c2 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   d45c8:	4580      	cmp	r8, r0
   d45ca:	f04f 0000 	mov.w	r0, #0
   d45ce:	d17f      	bne.n	d46d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
    inputBuffer[hdr.length] = '\0';
   d45d0:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   d45d4:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   d45d6:	f001 f8cd 	bl	d5774 <_Z11BlynkMillisv>
    switch (hdr.type)
   d45da:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   d45dc:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   d45de:	2b14      	cmp	r3, #20
   d45e0:	f000 80a6 	beq.w	d4730 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d45e4:	d848      	bhi.n	d4678 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x170>
   d45e6:	2b0f      	cmp	r3, #15
   d45e8:	f000 80a2 	beq.w	d4730 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x228>
   d45ec:	d807      	bhi.n	d45fe <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf6>
   d45ee:	2b02      	cmp	r3, #2
   d45f0:	d048      	beq.n	d4684 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x17c>
   d45f2:	2b06      	cmp	r3, #6
   d45f4:	d051      	beq.n	d469a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
        internalReconnect();
   d45f6:	4620      	mov	r0, r4
   d45f8:	f7ff fe4c 	bl	d4294 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   d45fc:	e058      	b.n	d46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
    switch (hdr.type)
   d45fe:	2b11      	cmp	r3, #17
   d4600:	d1f9      	bne.n	d45f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        BlynkReq req = { 0 };
   d4602:	2300      	movs	r3, #0
   d4604:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   d4606:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d460a:	442b      	add	r3, r5
        if (it >= param.end())
   d460c:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d460e:	e9c7 5303 	strd	r5, r3, [r7, #12]
   d4612:	d24d      	bcs.n	d46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
        ++it;
   d4614:	f107 000c 	add.w	r0, r7, #12
   d4618:	f8d5 8000 	ldr.w	r8, [r5]
   d461c:	f7ff fe06 	bl	d422c <_ZN10BlynkParam8iteratorppEv>
        char* start = (char*)(it).asStr();
   d4620:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   d4622:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   d4626:	1b5d      	subs	r5, r3, r5
   d4628:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   d462a:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   d462e:	687b      	ldr	r3, [r7, #4]
   d4630:	61fd      	str	r5, [r7, #28]
   d4632:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d4636:	8363      	strh	r3, [r4, #26]
   d4638:	4b64      	ldr	r3, [pc, #400]	; (d47cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   d463a:	4598      	cmp	r8, r3
   d463c:	f000 80bf 	beq.w	d47be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b6>
   d4640:	f200 808c 	bhi.w	d475c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x254>
   d4644:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   d4648:	f46f 7200 	mvn.w	r2, #512	; 0x200
   d464c:	4413      	add	r3, r2
   d464e:	4598      	cmp	r8, r3
   d4650:	f000 809d 	beq.w	d478e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x286>
   d4654:	d879      	bhi.n	d474a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x242>
   d4656:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   d465a:	3b06      	subs	r3, #6
   d465c:	4598      	cmp	r8, r3
   d465e:	f000 809c 	beq.w	d479a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x292>
   d4662:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d4666:	3303      	adds	r3, #3
   d4668:	4598      	cmp	r8, r3
   d466a:	d16b      	bne.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   d466c:	f107 0114 	add.w	r1, r7, #20
   d4670:	4638      	mov	r0, r7
   d4672:	f001 f882 	bl	d577a <BlynkWidgetWrite>
   d4676:	e065      	b.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
    switch (hdr.type)
   d4678:	2b29      	cmp	r3, #41	; 0x29
   d467a:	d01b      	beq.n	d46b4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1ac>
   d467c:	2b37      	cmp	r3, #55	; 0x37
   d467e:	d017      	beq.n	d46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4680:	2b1d      	cmp	r3, #29
   d4682:	d1b8      	bne.n	d45f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
        if (state == CONNECTING) {
   d4684:	7f63      	ldrb	r3, [r4, #29]
   d4686:	b943      	cbnz	r3, d469a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x192>
            state = CONNECTED;
   d4688:	2301      	movs	r3, #1
   d468a:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   d468c:	4620      	mov	r0, r4
   d468e:	f000 fa8b 	bl	d4ba8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   d4692:	f7ff fdb5 	bl	d4200 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   d4696:	f001 f871 	bl	d577c <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   d469a:	2300      	movs	r3, #0
   d469c:	21c8      	movs	r1, #200	; 0xc8
   d469e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   d46a2:	9100      	str	r1, [sp, #0]
   d46a4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d46a8:	4619      	mov	r1, r3
   d46aa:	4620      	mov	r0, r4
   d46ac:	f000 f9ce 	bl	d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   d46b0:	2001      	movs	r0, #1
   d46b2:	e00d      	b.n	d46d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
        if (!redir_serv) {
   d46b4:	68a3      	ldr	r3, [r4, #8]
   d46b6:	b91b      	cbnz	r3, d46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b8>
             redir_serv = (char*)malloc(64);
   d46b8:	2040      	movs	r0, #64	; 0x40
   d46ba:	f001 fc31 	bl	d5f20 <malloc>
   d46be:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   d46c0:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   d46c4:	44a8      	add	r8, r5
        if (it >= param.end())
   d46c6:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   d46c8:	e9c7 5805 	strd	r5, r8, [r7, #20]
   d46cc:	d302      	bcc.n	d46d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1cc>
            return false;
   d46ce:	2000      	movs	r0, #0
   d46d0:	46b5      	mov	sp, r6
   d46d2:	e727      	b.n	d4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   d46d4:	4629      	mov	r1, r5
   d46d6:	2240      	movs	r2, #64	; 0x40
   d46d8:	68a0      	ldr	r0, [r4, #8]
   d46da:	f003 fe75 	bl	d83c8 <strncpy>
        redir_serv[63] = '\0';
   d46de:	68a3      	ldr	r3, [r4, #8]
   d46e0:	2500      	movs	r5, #0
   d46e2:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   d46e6:	f107 0014 	add.w	r0, r7, #20
   d46ea:	f7ff fd9f 	bl	d422c <_ZN10BlynkParam8iteratorppEv>
   d46ee:	6803      	ldr	r3, [r0, #0]
   d46f0:	4543      	cmp	r3, r8
   d46f2:	d21b      	bcs.n	d472c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   d46f4:	6978      	ldr	r0, [r7, #20]
   d46f6:	b120      	cbz	r0, d4702 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
   d46f8:	69bb      	ldr	r3, [r7, #24]
   d46fa:	4298      	cmp	r0, r3
   d46fc:	d214      	bcs.n	d4728 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   d46fe:	f003 fe05 	bl	d830c <atol>
            redir_port = it.asLong();
   d4702:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   d4704:	6820      	ldr	r0, [r4, #0]
   d4706:	f002 fc0f 	bl	d6f28 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   d470a:	6823      	ldr	r3, [r4, #0]
   d470c:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   d470e:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   d4710:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   d4712:	2300      	movs	r3, #0
   d4714:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d4716:	f001 f82d 	bl	d5774 <_Z11BlynkMillisv>
   d471a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d471e:	3808      	subs	r0, #8
   d4720:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d4724:	6160      	str	r0, [r4, #20]
   d4726:	e7c3      	b.n	d46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d4728:	4628      	mov	r0, r5
   d472a:	e7ea      	b.n	d4702 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fa>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   d472c:	2550      	movs	r5, #80	; 0x50
   d472e:	e7e9      	b.n	d4704 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1fc>
        msgIdOutOverride = hdr.msg_id;
   d4730:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   d4732:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   d4736:	f3c3 230f 	ubfx	r3, r3, #8, #16
   d473a:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   d473c:	4629      	mov	r1, r5
   d473e:	4620      	mov	r0, r4
   d4740:	f7ff fdb2 	bl	d42a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   d4744:	2300      	movs	r3, #0
   d4746:	8363      	strh	r3, [r4, #26]
   d4748:	e7b2      	b.n	d46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   d474a:	4b21      	ldr	r3, [pc, #132]	; (d47d0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   d474c:	4598      	cmp	r8, r3
   d474e:	d1f9      	bne.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   d4750:	f107 0114 	add.w	r1, r7, #20
   d4754:	4638      	mov	r0, r7
   d4756:	f001 f810 	bl	d577a <BlynkWidgetWrite>
   d475a:	e7f3      	b.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d475c:	4b1d      	ldr	r3, [pc, #116]	; (d47d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2cc>)
   d475e:	4598      	cmp	r8, r3
   d4760:	d021      	beq.n	d47a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29e>
   d4762:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   d4766:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   d476a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   d476e:	4598      	cmp	r8, r3
   d4770:	d01f      	beq.n	d47b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2aa>
   d4772:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   d4776:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   d477a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   d477e:	4598      	cmp	r8, r3
   d4780:	d1e0      	bne.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   d4782:	f107 0114 	add.w	r1, r7, #20
   d4786:	4638      	mov	r0, r7
   d4788:	f000 fff7 	bl	d577a <BlynkWidgetWrite>
   d478c:	e7da      	b.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   d478e:	f107 0114 	add.w	r1, r7, #20
   d4792:	4638      	mov	r0, r7
   d4794:	f000 fff1 	bl	d577a <BlynkWidgetWrite>
   d4798:	e7d4      	b.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   d479a:	f107 0114 	add.w	r1, r7, #20
   d479e:	4638      	mov	r0, r7
   d47a0:	f000 ffeb 	bl	d577a <BlynkWidgetWrite>
   d47a4:	e7ce      	b.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   d47a6:	f107 0114 	add.w	r1, r7, #20
   d47aa:	4638      	mov	r0, r7
   d47ac:	f000 ffe5 	bl	d577a <BlynkWidgetWrite>
   d47b0:	e7c8      	b.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   d47b2:	f107 0114 	add.w	r1, r7, #20
   d47b6:	4638      	mov	r0, r7
   d47b8:	f000 ffdf 	bl	d577a <BlynkWidgetWrite>
   d47bc:	e7c2      	b.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   d47be:	f107 0114 	add.w	r1, r7, #20
   d47c2:	4638      	mov	r0, r7
   d47c4:	f000 ffd9 	bl	d577a <BlynkWidgetWrite>
   d47c8:	e7bc      	b.n	d4744 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23c>
   d47ca:	bf00      	nop
   d47cc:	00736676 	.word	0x00736676
   d47d0:	00676264 	.word	0x00676264
   d47d4:	6e6f6361 	.word	0x6e6f6361

000d47d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>:
bool BlynkProtocol<Transp>::run(bool avail)
   d47d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d47dc:	4604      	mov	r4, r0
   d47de:	b08c      	sub	sp, #48	; 0x30
   d47e0:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   d47e2:	f7ff fd0d 	bl	d4200 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   d47e6:	7f63      	ldrb	r3, [r4, #29]
   d47e8:	2b02      	cmp	r3, #2
   d47ea:	f000 80a8 	beq.w	d493e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x166>
  return ~crc;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   d47ee:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   d47f0:	8b62      	ldrh	r2, [r4, #26]
   d47f2:	3301      	adds	r3, #1
   d47f4:	b2db      	uxtb	r3, r3
   d47f6:	7723      	strb	r3, [r4, #28]
   d47f8:	b10a      	cbz	r2, d47fe <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x26>
    return true;
   d47fa:	2501      	movs	r5, #1
   d47fc:	e016      	b.n	d482c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
    if (msgIdOutOverride || nesting > 2) {
   d47fe:	2b02      	cmp	r3, #2
   d4800:	d8fb      	bhi.n	d47fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   d4802:	6820      	ldr	r0, [r4, #0]
   d4804:	f002 f9af 	bl	d6b66 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   d4808:	b1b8      	cbz	r0, d483a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
        while (avail || conn.available() > 0) {
   d480a:	b925      	cbnz	r5, d4816 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x3e>
    int available() { return client.available(); }
   d480c:	6820      	ldr	r0, [r4, #0]
   d480e:	f002 fb31 	bl	d6e74 <_ZN9TCPClient9availableEv>
   d4812:	2800      	cmp	r0, #0
   d4814:	dd11      	ble.n	d483a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x62>
            if (!processInput()) {
   d4816:	4620      	mov	r0, r4
   d4818:	f7ff fe76 	bl	d4508 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   d481c:	4605      	mov	r5, r0
   d481e:	2800      	cmp	r0, #0
   d4820:	d1f4      	bne.n	d480c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x34>
    void disconnect() { client.stop(); }
   d4822:	6820      	ldr	r0, [r4, #0]
   d4824:	f002 fb80 	bl	d6f28 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   d4828:	f000 ffa8 	bl	d577c <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   d482c:	7f23      	ldrb	r3, [r4, #28]
   d482e:	3b01      	subs	r3, #1
   d4830:	7723      	strb	r3, [r4, #28]
}
   d4832:	4628      	mov	r0, r5
   d4834:	b00c      	add	sp, #48	; 0x30
   d4836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   d483a:	f000 ff9b 	bl	d5774 <_Z11BlynkMillisv>
   d483e:	4606      	mov	r6, r0
    bool connected() { return client.connected(); }
   d4840:	6820      	ldr	r0, [r4, #0]
   d4842:	f002 f990 	bl	d6b66 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   d4846:	7f67      	ldrb	r7, [r4, #29]
   d4848:	2f01      	cmp	r7, #1
   d484a:	4605      	mov	r5, r0
   d484c:	d129      	bne.n	d48a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xca>
        if (!tconn) {
   d484e:	b920      	cbnz	r0, d485a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x82>
            lastHeartbeat = t;
   d4850:	6166      	str	r6, [r4, #20]
            internalReconnect();
   d4852:	4620      	mov	r0, r4
   d4854:	f7ff fd1e 	bl	d4294 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d4858:	e7e8      	b.n	d482c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   d485a:	68e3      	ldr	r3, [r4, #12]
   d485c:	f24f 6218 	movw	r2, #63000	; 0xf618
   d4860:	1af3      	subs	r3, r6, r3
   d4862:	4293      	cmp	r3, r2
   d4864:	d904      	bls.n	d4870 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x98>
            internalReconnect();
   d4866:	4620      	mov	r0, r4
   d4868:	f7ff fd14 	bl	d4294 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   d486c:	2500      	movs	r5, #0
   d486e:	e7dd      	b.n	d482c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d4870:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   d4874:	4293      	cmp	r3, r2
   d4876:	d803      	bhi.n	d4880 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xa8>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4878:	6923      	ldr	r3, [r4, #16]
   d487a:	1af3      	subs	r3, r6, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   d487c:	4293      	cmp	r3, r2
   d487e:	d9bc      	bls.n	d47fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4880:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4882:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   d4886:	1af3      	subs	r3, r6, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   d4888:	4293      	cmp	r3, r2
   d488a:	d9b6      	bls.n	d47fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
            sendCmd(BLYNK_CMD_PING);
   d488c:	2300      	movs	r3, #0
   d488e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   d4892:	9300      	str	r3, [sp, #0]
   d4894:	461a      	mov	r2, r3
   d4896:	2106      	movs	r1, #6
   d4898:	4620      	mov	r0, r4
   d489a:	f000 f8d7 	bl	d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastHeartbeat = t;
   d489e:	6166      	str	r6, [r4, #20]
   d48a0:	e7ab      	b.n	d47fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    } else if (state == CONNECTING) {
   d48a2:	2f00      	cmp	r7, #0
   d48a4:	d1a9      	bne.n	d47fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d48a6:	6962      	ldr	r2, [r4, #20]
   d48a8:	1ab2      	subs	r2, r6, r2
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   d48aa:	b140      	cbz	r0, d48be <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0xe6>
   d48ac:	f241 7370 	movw	r3, #6000	; 0x1770
   d48b0:	429a      	cmp	r2, r3
   d48b2:	d9a2      	bls.n	d47fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
    void disconnect() { client.stop(); }
   d48b4:	6820      	ldr	r0, [r4, #0]
   d48b6:	f002 fb37 	bl	d6f28 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d48ba:	7767      	strb	r7, [r4, #29]
   d48bc:	e7d6      	b.n	d486c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x94>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   d48be:	f241 3388 	movw	r3, #5000	; 0x1388
   d48c2:	429a      	cmp	r2, r3
   d48c4:	d999      	bls.n	d47fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x22>
   d48c6:	6820      	ldr	r0, [r4, #0]
   d48c8:	f002 fb2e 	bl	d6f28 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   d48cc:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   d48d0:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   d48d4:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   d48d8:	f1be 0f00 	cmp.w	lr, #0
   d48dc:	d00b      	beq.n	d48f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x11e>
            return (1 == client.connect(domain, port));
   d48de:	462b      	mov	r3, r5
   d48e0:	4642      	mov	r2, r8
   d48e2:	4671      	mov	r1, lr
   d48e4:	4660      	mov	r0, ip
   d48e6:	f002 fb7d 	bl	d6fe4 <_ZN9TCPClient7connectEPKctm>
            return (1 == client.connect(addr, port));
   d48ea:	1e43      	subs	r3, r0, #1
   d48ec:	425d      	negs	r5, r3
   d48ee:	415d      	adcs	r5, r3
   d48f0:	b98d      	cbnz	r5, d4916 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x13e>
                lastLogin = t;
   d48f2:	6166      	str	r6, [r4, #20]
                return false;
   d48f4:	e79a      	b.n	d482c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d48f6:	4b13      	ldr	r3, [pc, #76]	; (d4944 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x16c>)
   d48f8:	9306      	str	r3, [sp, #24]
   d48fa:	f10c 0720 	add.w	r7, ip, #32
   d48fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4900:	ad07      	add	r5, sp, #28
   d4902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4904:	683b      	ldr	r3, [r7, #0]
   d4906:	702b      	strb	r3, [r5, #0]
   d4908:	4642      	mov	r2, r8
   d490a:	4673      	mov	r3, lr
   d490c:	a906      	add	r1, sp, #24
   d490e:	4660      	mov	r0, ip
   d4910:	f002 fa35 	bl	d6d7e <_ZN9TCPClient7connectE9IPAddresstm>
   d4914:	e7e9      	b.n	d48ea <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x112>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4916:	6863      	ldr	r3, [r4, #4]
   d4918:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   d491a:	2601      	movs	r6, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d491c:	4618      	mov	r0, r3
            msgIdOut = 1;
   d491e:	8326      	strh	r6, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   d4920:	f003 fd4a 	bl	d83b8 <strlen>
   d4924:	2200      	movs	r2, #0
   d4926:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d492a:	9b05      	ldr	r3, [sp, #20]
   d492c:	9000      	str	r0, [sp, #0]
   d492e:	4632      	mov	r2, r6
   d4930:	211d      	movs	r1, #29
   d4932:	4620      	mov	r0, r4
   d4934:	f000 f88a 	bl	d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   d4938:	6923      	ldr	r3, [r4, #16]
   d493a:	6163      	str	r3, [r4, #20]
            return true;
   d493c:	e776      	b.n	d482c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x54>
        return false;
   d493e:	2500      	movs	r5, #0
   d4940:	e777      	b.n	d4832 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb+0x5a>
   d4942:	bf00      	nop
   d4944:	000d8b0c 	.word	0x000d8b0c

000d4948 <_ZN13BlynkParticle5beginEPKc9IPAddresst>:
        BlynkDelay(3000); // Give the board time to settle
        config(auth, domain, port);
        while(this->connect() != true) {}
    }

    void begin( const char* auth,
   d4948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d494c:	4615      	mov	r5, r2
   d494e:	b08c      	sub	sp, #48	; 0x30
   d4950:	4604      	mov	r4, r0
   d4952:	3504      	adds	r5, #4
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   d4954:	f640 30b8 	movw	r0, #3000	; 0xbb8
    void begin( const char* auth,
   d4958:	460f      	mov	r7, r1
   d495a:	4698      	mov	r8, r3
        BlynkDelay(3000); // Give the board time to settle
   d495c:	f000 ff08 	bl	d5770 <_Z10BlynkDelaym>
   d4960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4962:	ae01      	add	r6, sp, #4
   d4964:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4966:	682b      	ldr	r3, [r5, #0]
   d4968:	7033      	strb	r3, [r6, #0]
        this->authkey = auth;
   d496a:	6067      	str	r7, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   d496c:	f000 ff02 	bl	d5774 <_Z11BlynkMillisv>
   d4970:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   d4974:	3808      	subs	r0, #8
   d4976:	af01      	add	r7, sp, #4
   d4978:	e9c4 0003 	strd	r0, r0, [r4, #12]
   d497c:	6160      	str	r0, [r4, #20]
   d497e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   d4980:	ae07      	add	r6, sp, #28
   d4982:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d4984:	683b      	ldr	r3, [r7, #0]
   d4986:	7033      	strb	r3, [r6, #0]
   d4988:	af07      	add	r7, sp, #28
   d498a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   d498c:	6825      	ldr	r5, [r4, #0]
        domain = NULL;
   d498e:	f04f 0c00 	mov.w	ip, #0
   d4992:	f8c5 c034 	str.w	ip, [r5, #52]	; 0x34
        port = p;
   d4996:	f8a5 8038 	strh.w	r8, [r5, #56]	; 0x38
   d499a:	3520      	adds	r5, #32
   d499c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d499e:	6833      	ldr	r3, [r6, #0]
   d49a0:	702b      	strb	r3, [r5, #0]
        state = CONNECTING;
   d49a2:	4666      	mov	r6, ip
        while ((state != CONNECTED) &&
   d49a4:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   d49a8:	6820      	ldr	r0, [r4, #0]
   d49aa:	f002 fabd 	bl	d6f28 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   d49ae:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   d49b0:	f000 fee0 	bl	d5774 <_Z11BlynkMillisv>
   d49b4:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   d49b6:	7f63      	ldrb	r3, [r4, #29]
   d49b8:	2b01      	cmp	r3, #1
   d49ba:	d00c      	beq.n	d49d6 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x8e>
               (BlynkMillis() - started < timeout))
   d49bc:	f000 feda 	bl	d5774 <_Z11BlynkMillisv>
   d49c0:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   d49c2:	42b8      	cmp	r0, r7
   d49c4:	d804      	bhi.n	d49d0 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x88>
            run();
   d49c6:	2100      	movs	r1, #0
   d49c8:	4620      	mov	r0, r4
   d49ca:	f7ff ff05 	bl	d47d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
        while ((state != CONNECTED) &&
   d49ce:	e7f2      	b.n	d49b6 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x6e>
        config(auth, addr, port);
        while(this->connect() != true) {}
   d49d0:	7f63      	ldrb	r3, [r4, #29]
   d49d2:	2b01      	cmp	r3, #1
   d49d4:	d1e8      	bne.n	d49a8 <_ZN13BlynkParticle5beginEPKc9IPAddresst+0x60>
    }
   d49d6:	b00c      	add	sp, #48	; 0x30
   d49d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d49dc <setup>:
volatile double temperatureC = 0.0;
volatile double temperatureF = 0.0;
volatile double temperatureK = 0.0;

void setup()
{
   d49dc:	b500      	push	{lr}
   d49de:	b08b      	sub	sp, #44	; 0x2c
  Serial.begin(9600);
   d49e0:	f001 ffb8 	bl	d6954 <_Z16_fetch_usbserialv>
   d49e4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d49e8:	f001 ffa8 	bl	d693c <_ZN9USBSerial5beginEl>
  pinMode(A5, INPUT);
   d49ec:	2100      	movs	r1, #0
   d49ee:	200e      	movs	r0, #14
   d49f0:	f002 fca2 	bl	d7338 <pinMode>
  Blynk.begin("DISy_9aRsQHnyt8mtvZXh09rT-tdy72R", IPAddress(167, 172, 234, 162), 9090);
   d49f4:	23a2      	movs	r3, #162	; 0xa2
   d49f6:	9300      	str	r3, [sp, #0]
   d49f8:	22ac      	movs	r2, #172	; 0xac
   d49fa:	23ea      	movs	r3, #234	; 0xea
   d49fc:	21a7      	movs	r1, #167	; 0xa7
   d49fe:	a804      	add	r0, sp, #16
   d4a00:	f001 ff30 	bl	d6864 <_ZN9IPAddressC1Ehhhh>
   d4a04:	f242 3382 	movw	r3, #9090	; 0x2382
   d4a08:	aa04      	add	r2, sp, #16
   d4a0a:	490c      	ldr	r1, [pc, #48]	; (d4a3c <setup+0x60>)
   d4a0c:	480c      	ldr	r0, [pc, #48]	; (d4a40 <setup+0x64>)
   d4a0e:	f7ff ff9b 	bl	d4948 <_ZN13BlynkParticle5beginEPKc9IPAddresst>
  LIS3DHConfig config;
   d4a12:	a804      	add	r0, sp, #16
   d4a14:	f000 ff28 	bl	d5868 <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
   d4a18:	2150      	movs	r1, #80	; 0x50
   d4a1a:	a804      	add	r0, sp, #16
   d4a1c:	f000 ff31 	bl	d5882 <_ZN12LIS3DHConfig12setAccelModeEh>
	bool setupSuccess = accel.setup(config);
   d4a20:	a904      	add	r1, sp, #16
   d4a22:	4808      	ldr	r0, [pc, #32]	; (d4a44 <setup+0x68>)
   d4a24:	f000 ff9c 	bl	d5960 <_ZN6LIS3DH5setupER12LIS3DHConfig>
   d4a28:	9003      	str	r0, [sp, #12]
	Serial.printlnf("setupSuccess=%d", setupSuccess);
   d4a2a:	f001 ff93 	bl	d6954 <_Z16_fetch_usbserialv>
   d4a2e:	9a03      	ldr	r2, [sp, #12]
   d4a30:	4905      	ldr	r1, [pc, #20]	; (d4a48 <setup+0x6c>)
   d4a32:	f7ff fbbd 	bl	d41b0 <_ZN5Print8printlnfEPKcz>
  //os_thread_create(&thread1, "myThread1", OS_THREAD_PRIORITY_DEFAULT, myThread1, NULL, 1024); //creates the first thread
  //os_thread_create(&thread2, "myThread2", OS_THREAD_PRIORITY_DEFAULT, myThread2, NULL, 1024); //creates the second thread
  //os_thread_create(&thread3, "myThread3", OS_THREAD_PRIORITY_DEFAULT, myThread3, NULL, 1024); //creats the third thread
}
   d4a36:	b00b      	add	sp, #44	; 0x2c
   d4a38:	f85d fb04 	ldr.w	pc, [sp], #4
   d4a3c:	000d856b 	.word	0x000d856b
   d4a40:	2003e568 	.word	0x2003e568
   d4a44:	2003e5c4 	.word	0x2003e5c4
   d4a48:	000d858c 	.word	0x000d858c

000d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   d4a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a50:	b083      	sub	sp, #12
   d4a52:	af00      	add	r7, sp, #0
   d4a54:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   d4a56:	6800      	ldr	r0, [r0, #0]
   d4a58:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   d4a5a:	4688      	mov	r8, r1
   d4a5c:	4616      	mov	r6, r2
   d4a5e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   d4a60:	46eb      	mov	fp, sp
   d4a62:	f002 f880 	bl	d6b66 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   d4a66:	2800      	cmp	r0, #0
   d4a68:	d07f      	beq.n	d4b6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4a6a:	f1b8 0f1d 	cmp.w	r8, #29
   d4a6e:	d804      	bhi.n	d4a7a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   d4a70:	4b4c      	ldr	r3, [pc, #304]	; (d4ba4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   d4a72:	fa23 f308 	lsr.w	r3, r3, r8
   d4a76:	07db      	lsls	r3, r3, #31
   d4a78:	d402      	bmi.n	d4a80 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   d4a7a:	7f63      	ldrb	r3, [r4, #29]
   d4a7c:	2b01      	cmp	r3, #1
   d4a7e:	d174      	bne.n	d4b6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   d4a80:	b946      	cbnz	r6, d4a94 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   d4a82:	8b66      	ldrh	r6, [r4, #26]
   d4a84:	b936      	cbnz	r6, d4a94 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   d4a86:	8b23      	ldrh	r3, [r4, #24]
   d4a88:	3301      	adds	r3, #1
   d4a8a:	b29b      	uxth	r3, r3
   d4a8c:	2b00      	cmp	r3, #0
   d4a8e:	d071      	beq.n	d4b74 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   d4a90:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   d4a92:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   d4a94:	f1a8 030c 	sub.w	r3, r8, #12
   d4a98:	2b08      	cmp	r3, #8
   d4a9a:	d816      	bhi.n	d4aca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   d4a9c:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   d4aa0:	4293      	cmp	r3, r2
   d4aa2:	bf38      	it	cc
   d4aa4:	4613      	movcc	r3, r2
   d4aa6:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   d4aaa:	f000 fe63 	bl	d5774 <_Z11BlynkMillisv>
   d4aae:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   d4ab2:	2800      	cmp	r0, #0
   d4ab4:	db60      	blt.n	d4b78 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   d4ab6:	2100      	movs	r1, #0
   d4ab8:	4620      	mov	r0, r4
   d4aba:	f7ff fe8d 	bl	d47d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
                wait_time = allowed_time - BlynkMillis();
   d4abe:	f000 fe59 	bl	d5774 <_Z11BlynkMillisv>
   d4ac2:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   d4ac6:	2800      	cmp	r0, #0
   d4ac8:	daf5      	bge.n	d4ab6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4aca:	f1b9 0f00 	cmp.w	r9, #0
   d4ace:	d05a      	beq.n	d4b86 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   d4ad0:	1d6b      	adds	r3, r5, #5
                               (data  ? length  : 0) +
   d4ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   d4ad4:	2a00      	cmp	r2, #0
   d4ad6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d4ad8:	bf08      	it	eq
   d4ada:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4adc:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   d4ae0:	f10a 0307 	add.w	r3, sl, #7
   d4ae4:	f023 0307 	bic.w	r3, r3, #7
   d4ae8:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   d4aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   d4aee:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   d4af2:	18ea      	adds	r2, r5, r3
   d4af4:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   d4af8:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   d4afa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   d4afe:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   d4b02:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   d4b06:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   d4b0a:	f1b9 0f00 	cmp.w	r9, #0
   d4b0e:	d03c      	beq.n	d4b8a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   d4b10:	2d00      	cmp	r5, #0
   d4b12:	d03a      	beq.n	d4b8a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   d4b14:	462a      	mov	r2, r5
   d4b16:	4649      	mov	r1, r9
   d4b18:	f10d 0005 	add.w	r0, sp, #5
   d4b1c:	f003 fc08 	bl	d8330 <memcpy>
        pos += length;
   d4b20:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   d4b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   d4b24:	b13b      	cbz	r3, d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   d4b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   d4b28:	b12b      	cbz	r3, d4b36 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   d4b2a:	461a      	mov	r2, r3
   d4b2c:	687b      	ldr	r3, [r7, #4]
   d4b2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   d4b30:	4418      	add	r0, r3
   d4b32:	f003 fbfd 	bl	d8330 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   d4b36:	2500      	movs	r5, #0
    while (wlen < full_length) {
   d4b38:	4555      	cmp	r5, sl
   d4b3a:	d22a      	bcs.n	d4b92 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   d4b3c:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   d4b40:	687b      	ldr	r3, [r7, #4]
   d4b42:	6820      	ldr	r0, [r4, #0]
   d4b44:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   d4b48:	bf28      	it	cs
   d4b4a:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   d4b4e:	1959      	adds	r1, r3, r5
   d4b50:	f001 fff3 	bl	d6b3a <_ZN9TCPClient5writeEPKhj>
   d4b54:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   d4b56:	2000      	movs	r0, #0
   d4b58:	f000 fe0a 	bl	d5770 <_Z10BlynkDelaym>
        if (w == 0) {
   d4b5c:	b9be      	cbnz	r6, d4b8e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   d4b5e:	6820      	ldr	r0, [r4, #0]
   d4b60:	f002 f9e2 	bl	d6f28 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   d4b64:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   d4b66:	f000 fe09 	bl	d577c <BlynkNoOpCbk>
}
   d4b6a:	370c      	adds	r7, #12
   d4b6c:	46dd      	mov	sp, fp
   d4b6e:	46bd      	mov	sp, r7
   d4b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   d4b74:	2301      	movs	r3, #1
   d4b76:	e78b      	b.n	d4a90 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   d4b78:	7f21      	ldrb	r1, [r4, #28]
   d4b7a:	2900      	cmp	r1, #0
   d4b7c:	d1a5      	bne.n	d4aca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   d4b7e:	4620      	mov	r0, r4
   d4b80:	f7ff fe2a 	bl	d47d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>
   d4b84:	e7a1      	b.n	d4aca <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   d4b86:	2305      	movs	r3, #5
   d4b88:	e7a3      	b.n	d4ad2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   d4b8a:	2005      	movs	r0, #5
   d4b8c:	e7c9      	b.n	d4b22 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   d4b8e:	4435      	add	r5, r6
    while (wlen < full_length) {
   d4b90:	e7d2      	b.n	d4b38 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   d4b92:	d003      	beq.n	d4b9c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   d4b94:	4620      	mov	r0, r4
   d4b96:	f7ff fb7d 	bl	d4294 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   d4b9a:	e7e6      	b.n	d4b6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   d4b9c:	f000 fdea 	bl	d5774 <_Z11BlynkMillisv>
   d4ba0:	6120      	str	r0, [r4, #16]
   d4ba2:	e7e2      	b.n	d4b6a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   d4ba4:	20000045 	.word	0x20000045

000d4ba8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   d4ba8:	b500      	push	{lr}
   d4baa:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   d4bac:	ab04      	add	r3, sp, #16
   d4bae:	2200      	movs	r2, #0
   d4bb0:	9301      	str	r3, [sp, #4]
   d4bb2:	2349      	movs	r3, #73	; 0x49
   d4bb4:	9300      	str	r3, [sp, #0]
   d4bb6:	9202      	str	r2, [sp, #8]
   d4bb8:	4b03      	ldr	r3, [pc, #12]	; (d4bc8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   d4bba:	2111      	movs	r1, #17
   d4bbc:	f7ff ff46 	bl	d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   d4bc0:	b015      	add	sp, #84	; 0x54
   d4bc2:	f85d fb04 	ldr.w	pc, [sp], #4
   d4bc6:	bf00      	nop
   d4bc8:	000d85e8 	.word	0x000d85e8

000d4bcc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   d4bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4bce:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
        : buff((char*)addr), len(length), buff_size(buffsize)
   d4bd2:	ab08      	add	r3, sp, #32
   d4bd4:	2400      	movs	r4, #0
   d4bd6:	4605      	mov	r5, r0
   d4bd8:	460f      	mov	r7, r1
   d4bda:	9305      	str	r3, [sp, #20]
   d4bdc:	a805      	add	r0, sp, #20
   d4bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
   d4be2:	490e      	ldr	r1, [pc, #56]	; (d4c1c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_+0x50>)
   d4be4:	4616      	mov	r6, r2
   d4be6:	e9cd 4306 	strd	r4, r3, [sp, #24]
    if (str == NULL) {
   d4bea:	f7ff fa77 	bl	d40dc <_ZN10BlynkParam3addEPKc.part.0.constprop.0>
        cmd.add(pin);
   d4bee:	4639      	mov	r1, r7
   d4bf0:	a805      	add	r0, sp, #20
   d4bf2:	f7ff fb2b 	bl	d424c <_ZN10BlynkParam3addEi>
        add(last);
   d4bf6:	4631      	mov	r1, r6
   d4bf8:	a805      	add	r0, sp, #20
   d4bfa:	f7ff fb27 	bl	d424c <_ZN10BlynkParam3addEi>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   d4bfe:	9b06      	ldr	r3, [sp, #24]
   d4c00:	3b01      	subs	r3, #1
   d4c02:	9300      	str	r3, [sp, #0]
   d4c04:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4c08:	9b05      	ldr	r3, [sp, #20]
   d4c0a:	4622      	mov	r2, r4
   d4c0c:	2114      	movs	r1, #20
   d4c0e:	4628      	mov	r0, r5
   d4c10:	f7ff ff1c 	bl	d4a4c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   d4c14:	f20d 4d24 	addw	sp, sp, #1060	; 0x424
   d4c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c1a:	bf00      	nop
   d4c1c:	000d859c 	.word	0x000d859c

000d4c20 <loop>:



void loop()
{
   d4c20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  Blynk.run();
   d4c22:	2100      	movs	r1, #0
   d4c24:	4840      	ldr	r0, [pc, #256]	; (d4d28 <loop+0x108>)
  

 if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   d4c26:	4c41      	ldr	r4, [pc, #260]	; (d4d2c <loop+0x10c>)
  Blynk.run();
   d4c28:	f7ff fdd6 	bl	d47d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4c2c:	f000 ff5c 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
 if (millis() - lastPrintSample >= PRINT_SAMPLE_PERIOD) {
   d4c30:	6823      	ldr	r3, [r4, #0]
   d4c32:	1ac0      	subs	r0, r0, r3
   d4c34:	2863      	cmp	r0, #99	; 0x63
   d4c36:	d91a      	bls.n	d4c6e <loop+0x4e>
   d4c38:	f000 ff56 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
		lastPrintSample = millis();

		LIS3DHSample sample;
		if (accel.getSample(sample)) {
   d4c3c:	4669      	mov	r1, sp
		lastPrintSample = millis();
   d4c3e:	6020      	str	r0, [r4, #0]
		if (accel.getSample(sample)) {
   d4c40:	483b      	ldr	r0, [pc, #236]	; (d4d30 <loop+0x110>)
   d4c42:	f000 fe57 	bl	d58f4 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   d4c46:	2800      	cmp	r0, #0
   d4c48:	d04e      	beq.n	d4ce8 <loop+0xc8>
      Blynk.virtualWrite(V1, sample.x);
   d4c4a:	f9bd 2000 	ldrsh.w	r2, [sp]
   d4c4e:	4836      	ldr	r0, [pc, #216]	; (d4d28 <loop+0x108>)
   d4c50:	2101      	movs	r1, #1
   d4c52:	f7ff ffbb 	bl	d4bcc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>
      Blynk.virtualWrite(V2, sample.y);
   d4c56:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
   d4c5a:	4833      	ldr	r0, [pc, #204]	; (d4d28 <loop+0x108>)
   d4c5c:	2102      	movs	r1, #2
   d4c5e:	f7ff ffb5 	bl	d4bcc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>
      Blynk.virtualWrite(V3, sample.z);
   d4c62:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
   d4c66:	4830      	ldr	r0, [pc, #192]	; (d4d28 <loop+0x108>)
   d4c68:	2103      	movs	r1, #3
   d4c6a:	f7ff ffaf 	bl	d4bcc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJsEEEviDpT_>
			Serial.println("no sample");
		}
	}
  

 if (client.isConnected()) {
   d4c6e:	4831      	ldr	r0, [pc, #196]	; (d4d34 <loop+0x114>)
   d4c70:	f000 fa33 	bl	d50da <_ZN4MQTT11isConnectedEv>
   d4c74:	2800      	cmp	r0, #0
   d4c76:	d03d      	beq.n	d4cf4 <loop+0xd4>
    
    client.subscribe("paris");//subscribes to the thread so it can recieve messages. 
   d4c78:	492f      	ldr	r1, [pc, #188]	; (d4d38 <loop+0x118>)
   d4c7a:	482e      	ldr	r0, [pc, #184]	; (d4d34 <loop+0x114>)
   d4c7c:	f000 fd4d 	bl	d571a <_ZN4MQTT9subscribeEPKc>
    client.loop();
   d4c80:	482c      	ldr	r0, [pc, #176]	; (d4d34 <loop+0x114>)
   d4c82:	f000 fc02 	bl	d548a <_ZN4MQTT4loopEv>
  } else {
    client.connect(System.deviceID());
  }
  
    uint64_t reading = analogRead(A5);
   d4c86:	200e      	movs	r0, #14
   d4c88:	f002 fb93 	bl	d73b2 <analogRead>
    double voltage = (reading * 3.3) / 4095.0;
   d4c8c:	17c1      	asrs	r1, r0, #31
   d4c8e:	f002 feaf 	bl	d79f0 <__aeabi_ul2d>
   d4c92:	a31f      	add	r3, pc, #124	; (adr r3, d4d10 <loop+0xf0>)
   d4c94:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4c98:	f002 fee0 	bl	d7a5c <__aeabi_dmul>
   d4c9c:	a31e      	add	r3, pc, #120	; (adr r3, d4d18 <loop+0xf8>)
   d4c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ca2:	f003 f805 	bl	d7cb0 <__aeabi_ddiv>
    double temperatureC = (voltage - 0.5) * 100;
   d4ca6:	4b25      	ldr	r3, [pc, #148]	; (d4d3c <loop+0x11c>)
   d4ca8:	2200      	movs	r2, #0
   d4caa:	f002 fd1f 	bl	d76ec <__aeabi_dsub>
   d4cae:	4b24      	ldr	r3, [pc, #144]	; (d4d40 <loop+0x120>)
   d4cb0:	2200      	movs	r2, #0
   d4cb2:	f002 fed3 	bl	d7a5c <__aeabi_dmul>
    double temperatureF = (temperatureC * 9.0 / 5.0) + 32.0;
    double temperatureK = (temperatureC + 273.15);
   d4cb6:	a31a      	add	r3, pc, #104	; (adr r3, d4d20 <loop+0x100>)
   d4cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4cbc:	f002 fd18 	bl	d76f0 <__adddf3>
   d4cc0:	ec41 0b10 	vmov	d0, r0, r1
    String t = (String)temperatureK;
   d4cc4:	2106      	movs	r1, #6
   d4cc6:	4668      	mov	r0, sp
   d4cc8:	f001 fb99 	bl	d63fe <_ZN6StringC1Edi>
    client.publish("tjTemperature", t);
   d4ccc:	9a00      	ldr	r2, [sp, #0]
   d4cce:	491d      	ldr	r1, [pc, #116]	; (d4d44 <loop+0x124>)
   d4cd0:	4818      	ldr	r0, [pc, #96]	; (d4d34 <loop+0x114>)
   d4cd2:	f000 fb7e 	bl	d53d2 <_ZN4MQTT7publishEPKcS1_>
    delay(1000);
   d4cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4cda:	f001 fc9b 	bl	d6614 <delay>
    String t = (String)temperatureK;
   d4cde:	4668      	mov	r0, sp
   d4ce0:	f001 fb1c 	bl	d631c <_ZN6StringD1Ev>
}
   d4ce4:	b004      	add	sp, #16
   d4ce6:	bd10      	pop	{r4, pc}
			Serial.println("no sample");
   d4ce8:	f001 fe34 	bl	d6954 <_Z16_fetch_usbserialv>
   d4cec:	4916      	ldr	r1, [pc, #88]	; (d4d48 <loop+0x128>)
   d4cee:	f001 fbfa 	bl	d64e6 <_ZN5Print7printlnEPKc>
   d4cf2:	e7bc      	b.n	d4c6e <loop+0x4e>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d4cf4:	4668      	mov	r0, sp
   d4cf6:	f001 f903 	bl	d5f00 <spark_deviceID>
    client.connect(System.deviceID());
   d4cfa:	9900      	ldr	r1, [sp, #0]
   d4cfc:	480d      	ldr	r0, [pc, #52]	; (d4d34 <loop+0x114>)
   d4cfe:	f000 fadd 	bl	d52bc <_ZN4MQTT7connectEPKc>
   d4d02:	4668      	mov	r0, sp
   d4d04:	f001 fb0a 	bl	d631c <_ZN6StringD1Ev>
   d4d08:	e7bd      	b.n	d4c86 <loop+0x66>
   d4d0a:	bf00      	nop
   d4d0c:	f3af 8000 	nop.w
   d4d10:	66666666 	.word	0x66666666
   d4d14:	400a6666 	.word	0x400a6666
   d4d18:	00000000 	.word	0x00000000
   d4d1c:	40affe00 	.word	0x40affe00
   d4d20:	66666666 	.word	0x66666666
   d4d24:	40711266 	.word	0x40711266
   d4d28:	2003e568 	.word	0x2003e568
   d4d2c:	2003e64c 	.word	0x2003e64c
   d4d30:	2003e5c4 	.word	0x2003e5c4
   d4d34:	2003e5ec 	.word	0x2003e5ec
   d4d38:	000d85a9 	.word	0x000d85a9
   d4d3c:	3fe00000 	.word	0x3fe00000
   d4d40:	40590000 	.word	0x40590000
   d4d44:	000d85af 	.word	0x000d85af
   d4d48:	000d859f 	.word	0x000d859f

000d4d4c <_GLOBAL__sub_I_Blynk>:
}
   d4d4c:	b530      	push	{r4, r5, lr}
        : domain(NULL), port(0)
   d4d4e:	4d2d      	ldr	r5, [pc, #180]	; (d4e04 <_GLOBAL__sub_I_Blynk+0xb8>)
   d4d50:	b085      	sub	sp, #20
SYSTEM_THREAD(ENABLED);
   d4d52:	2100      	movs	r1, #0
   d4d54:	2001      	movs	r0, #1
   d4d56:	f001 f84f 	bl	d5df8 <system_thread_set_state>
   d4d5a:	4628      	mov	r0, r5
   d4d5c:	2400      	movs	r4, #0
   d4d5e:	f002 f92d 	bl	d6fbc <_ZN9TCPClientC1Ev>
   d4d62:	f105 001c 	add.w	r0, r5, #28
   d4d66:	f001 fd39 	bl	d67dc <_ZN9IPAddressC1Ev>
   d4d6a:	636c      	str	r4, [r5, #52]	; 0x34
   d4d6c:	872c      	strh	r4, [r5, #56]	; 0x38
#ifndef BlynkSimpleParticle_h
#define BlynkSimpleParticle_h

#include "BlynkParticle.h"

static BlynkTransportParticle _blynkTransport;
   d4d6e:	4a26      	ldr	r2, [pc, #152]	; (d4e08 <_GLOBAL__sub_I_Blynk+0xbc>)
   d4d70:	4926      	ldr	r1, [pc, #152]	; (d4e0c <_GLOBAL__sub_I_Blynk+0xc0>)
   d4d72:	4628      	mov	r0, r5
   d4d74:	f002 fb9a 	bl	d74ac <__aeabi_atexit>
        , state(CONNECTING)
   d4d78:	4b25      	ldr	r3, [pc, #148]	; (d4e10 <_GLOBAL__sub_I_Blynk+0xc4>)
MQTT client("lab.thewcl.com", 1883, callback);//which connection it should connect to
   d4d7a:	4926      	ldr	r1, [pc, #152]	; (d4e14 <_GLOBAL__sub_I_Blynk+0xc8>)
   d4d7c:	619c      	str	r4, [r3, #24]
   d4d7e:	e9c3 5400 	strd	r5, r4, [r3]
   d4d82:	e9c3 4402 	strd	r4, r4, [r3, #8]
   d4d86:	e9c3 4404 	strd	r4, r4, [r3, #16]
   d4d8a:	839c      	strh	r4, [r3, #28]
   d4d8c:	f240 725b 	movw	r2, #1883	; 0x75b
   d4d90:	4b21      	ldr	r3, [pc, #132]	; (d4e18 <_GLOBAL__sub_I_Blynk+0xcc>)
   d4d92:	9400      	str	r4, [sp, #0]
   d4d94:	4821      	ldr	r0, [pc, #132]	; (d4e1c <_GLOBAL__sub_I_Blynk+0xd0>)

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   d4d96:	4c22      	ldr	r4, [pc, #136]	; (d4e20 <_GLOBAL__sub_I_Blynk+0xd4>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4d98:	4d22      	ldr	r5, [pc, #136]	; (d4e24 <_GLOBAL__sub_I_Blynk+0xd8>)
   d4d9a:	f000 f895 	bl	d4ec8 <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d4d9e:	4a1a      	ldr	r2, [pc, #104]	; (d4e08 <_GLOBAL__sub_I_Blynk+0xbc>)
   d4da0:	4921      	ldr	r1, [pc, #132]	; (d4e28 <_GLOBAL__sub_I_Blynk+0xdc>)
   d4da2:	481e      	ldr	r0, [pc, #120]	; (d4e1c <_GLOBAL__sub_I_Blynk+0xd0>)
   d4da4:	f002 fb82 	bl	d74ac <__aeabi_atexit>
   d4da8:	2108      	movs	r1, #8
   d4daa:	4620      	mov	r0, r4
   d4dac:	f000 fd74 	bl	d5898 <_ZN6LIS3DHC1Ei>
   d4db0:	4b1e      	ldr	r3, [pc, #120]	; (d4e2c <_GLOBAL__sub_I_Blynk+0xe0>)
   d4db2:	6023      	str	r3, [r4, #0]
   d4db4:	7829      	ldrb	r1, [r5, #0]
   d4db6:	f3bf 8f5b 	dmb	ish
   d4dba:	f011 0101 	ands.w	r1, r1, #1
   d4dbe:	d10b      	bne.n	d4dd8 <_GLOBAL__sub_I_Blynk+0x8c>
   d4dc0:	4628      	mov	r0, r5
   d4dc2:	9103      	str	r1, [sp, #12]
   d4dc4:	f7ff f97a 	bl	d40bc <__cxa_guard_acquire>
   d4dc8:	9903      	ldr	r1, [sp, #12]
   d4dca:	b128      	cbz	r0, d4dd8 <_GLOBAL__sub_I_Blynk+0x8c>
   d4dcc:	4818      	ldr	r0, [pc, #96]	; (d4e30 <_GLOBAL__sub_I_Blynk+0xe4>)
   d4dce:	f001 f923 	bl	d6018 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4dd2:	4628      	mov	r0, r5
   d4dd4:	f7ff f977 	bl	d40c6 <__cxa_guard_release>
   d4dd8:	4b15      	ldr	r3, [pc, #84]	; (d4e30 <_GLOBAL__sub_I_Blynk+0xe4>)
   d4dda:	60e3      	str	r3, [r4, #12]
   d4ddc:	2303      	movs	r3, #3
      dataMode_{dataMode}
   d4dde:	4a15      	ldr	r2, [pc, #84]	; (d4e34 <_GLOBAL__sub_I_Blynk+0xe8>)
   d4de0:	6123      	str	r3, [r4, #16]
   d4de2:	2300      	movs	r3, #0
   d4de4:	7523      	strb	r3, [r4, #20]
   d4de6:	61a2      	str	r2, [r4, #24]
   d4de8:	7723      	strb	r3, [r4, #28]
LIS3DHSPI accel(SPI, D3, WKP);
   d4dea:	4a07      	ldr	r2, [pc, #28]	; (d4e08 <_GLOBAL__sub_I_Blynk+0xbc>)
   d4dec:	4b12      	ldr	r3, [pc, #72]	; (d4e38 <_GLOBAL__sub_I_Blynk+0xec>)
   d4dee:	4913      	ldr	r1, [pc, #76]	; (d4e3c <_GLOBAL__sub_I_Blynk+0xf0>)
   d4df0:	480b      	ldr	r0, [pc, #44]	; (d4e20 <_GLOBAL__sub_I_Blynk+0xd4>)
   d4df2:	6223      	str	r3, [r4, #32]
   d4df4:	2301      	movs	r3, #1
   d4df6:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d4df8:	b005      	add	sp, #20
   d4dfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
LIS3DHSPI accel(SPI, D3, WKP);
   d4dfe:	f002 bb55 	b.w	d74ac <__aeabi_atexit>
   d4e02:	bf00      	nop
   d4e04:	2003e588 	.word	0x2003e588
   d4e08:	2003e558 	.word	0x2003e558
   d4e0c:	000d410d 	.word	0x000d410d
   d4e10:	2003e568 	.word	0x2003e568
   d4e14:	000d85bd 	.word	0x000d85bd
   d4e18:	000d41cd 	.word	0x000d41cd
   d4e1c:	2003e5ec 	.word	0x2003e5ec
   d4e20:	2003e5c4 	.word	0x2003e5c4
   d4e24:	2003e55c 	.word	0x2003e55c
   d4e28:	000d5721 	.word	0x000d5721
   d4e2c:	000d8a7c 	.word	0x000d8a7c
   d4e30:	2003e560 	.word	0x2003e560
   d4e34:	000d85d4 	.word	0x000d85d4
   d4e38:	00989680 	.word	0x00989680
   d4e3c:	000d57a9 	.word	0x000d57a9

000d4e40 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d4e40:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d4e44:	b510      	push	{r4, lr}
   d4e46:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d4e48:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d4e4a:	b113      	cbz	r3, d4e52 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d4e4c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d4e4e:	f000 fe5b 	bl	d5b08 <os_mutex_lock>
#endif
#endif
#endif
        }
   d4e52:	4620      	mov	r0, r4
   d4e54:	bd10      	pop	{r4, pc}

000d4e56 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d4e56:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d4e58:	6803      	ldr	r3, [r0, #0]
   d4e5a:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d4e5e:	4604      	mov	r4, r0
            if (mqtt->thread)
   d4e60:	b112      	cbz	r2, d4e68 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d4e62:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d4e64:	f000 fe58 	bl	d5b18 <os_mutex_unlock>
#endif
#endif
#endif
        }
   d4e68:	4620      	mov	r0, r4
   d4e6a:	bd10      	pop	{r4, pc}

000d4e6c <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d4e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e6e:	461f      	mov	r7, r3
   d4e70:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d4e74:	4604      	mov	r4, r0
   d4e76:	460d      	mov	r5, r1
   d4e78:	4616      	mov	r6, r2
    if (thread) {
   d4e7a:	b12b      	cbz	r3, d4e88 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d4e7c:	2301      	movs	r3, #1
   d4e7e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d4e82:	3058      	adds	r0, #88	; 0x58
   d4e84:	f000 fe38 	bl	d5af8 <os_mutex_create>
    }
    this->callback = callback;
   d4e88:	9b08      	ldr	r3, [sp, #32]
   d4e8a:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d4e8c:	2300      	movs	r3, #0
   d4e8e:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d4e90:	b106      	cbz	r6, d4e94 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d4e92:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d4e94:	b125      	cbz	r5, d4ea0 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d4e96:	4629      	mov	r1, r5
   d4e98:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4e9c:	f001 fa9d 	bl	d63da <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4ea0:	9b06      	ldr	r3, [sp, #24]
   d4ea2:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4ea4:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d4ea6:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d4ea8:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4eac:	2bff      	cmp	r3, #255	; 0xff
   d4eae:	bfb8      	it	lt
   d4eb0:	23ff      	movlt	r3, #255	; 0xff
   d4eb2:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d4eb6:	b108      	cbz	r0, d4ebc <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d4eb8:	f7ff f8f3 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4ebc:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4ec0:	f7ff f8eb 	bl	d409a <_Znaj>
   d4ec4:	61e0      	str	r0, [r4, #28]
}
   d4ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ec8 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4ec8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4ecc:	4604      	mov	r4, r0
            bool thread) {
   d4ece:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d4ed0:	4617      	mov	r7, r2
   d4ed2:	4698      	mov	r8, r3
   d4ed4:	460e      	mov	r6, r1
            bool thread) {
   d4ed6:	f002 f871 	bl	d6fbc <_ZN9TCPClientC1Ev>
   d4eda:	490d      	ldr	r1, [pc, #52]	; (d4f10 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d4edc:	61e5      	str	r5, [r4, #28]
   d4ede:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4ee2:	f001 fa66 	bl	d63b2 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4ee6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d4eea:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4eec:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d4ef0:	22ff      	movs	r2, #255	; 0xff
   d4ef2:	230f      	movs	r3, #15
   d4ef4:	e9cd 3200 	strd	r3, r2, [sp]
   d4ef8:	4620      	mov	r0, r4
            bool thread) {
   d4efa:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d4efe:	463b      	mov	r3, r7
   d4f00:	462a      	mov	r2, r5
   d4f02:	4631      	mov	r1, r6
   d4f04:	f7ff ffb2 	bl	d4e6c <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d4f08:	4620      	mov	r0, r4
   d4f0a:	b004      	add	sp, #16
   d4f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4f10:	000d8514 	.word	0x000d8514

000d4f14 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4f14:	b510      	push	{r4, lr}
   d4f16:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d4f18:	4620      	mov	r0, r4
   d4f1a:	f001 ffab 	bl	d6e74 <_ZN9TCPClient9availableEv>
   d4f1e:	2800      	cmp	r0, #0
   d4f20:	d0fa      	beq.n	d4f18 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d4f22:	4620      	mov	r0, r4
   d4f24:	f001 fedf 	bl	d6ce6 <_ZN9TCPClient4readEv>
}
   d4f28:	b2c0      	uxtb	r0, r0
   d4f2a:	bd10      	pop	{r4, pc}

000d4f2c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4f30:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4f32:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4f34:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d4f36:	f7ff ffed 	bl	d4f14 <_ZN4MQTT8readByteEv>
   d4f3a:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4f3c:	69eb      	ldr	r3, [r5, #28]
   d4f3e:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4f42:	f04f 0901 	mov.w	r9, #1
   d4f46:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4f4a:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d4f4e:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4f50:	4628      	mov	r0, r5
   d4f52:	f7ff ffdf 	bl	d4f14 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4f56:	4626      	mov	r6, r4
   d4f58:	69eb      	ldr	r3, [r5, #28]
   d4f5a:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4f5c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4f60:	fb13 f309 	smulbb	r3, r3, r9
   d4f64:	4498      	add	r8, r3
        buffer[len++] = digit;
   d4f66:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4f68:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d4f6a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4f6c:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d4f70:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d4f74:	d4ec      	bmi.n	d4f50 <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d4f76:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4f78:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d4f7c:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d4f7e:	d124      	bne.n	d4fca <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4f80:	4628      	mov	r0, r5
   d4f82:	69ef      	ldr	r7, [r5, #28]
   d4f84:	f7ff ffc6 	bl	d4f14 <_ZN4MQTT8readByteEv>
   d4f88:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d4f8a:	4628      	mov	r0, r5
   d4f8c:	69ef      	ldr	r7, [r5, #28]
   d4f8e:	1cf4      	adds	r4, r6, #3
   d4f90:	f7ff ffc0 	bl	d4f14 <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d4f94:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d4f96:	b2b6      	uxth	r6, r6
   d4f98:	b2a4      	uxth	r4, r4
   d4f9a:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4f9c:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4f9e:	b2b6      	uxth	r6, r6
   d4fa0:	46b1      	mov	r9, r6
   d4fa2:	4627      	mov	r7, r4
   d4fa4:	45c1      	cmp	r9, r8
   d4fa6:	d212      	bcs.n	d4fce <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d4fa8:	4628      	mov	r0, r5
   d4faa:	f7ff ffb3 	bl	d4f14 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d4fae:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d4fb2:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d4fb4:	bf88      	it	hi
   d4fb6:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d4fb8:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d4fbc:	bf88      	it	hi
   d4fbe:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d4fc0:	3701      	adds	r7, #1
   d4fc2:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d4fc4:	fa1f f989 	uxth.w	r9, r9
   d4fc8:	e7ec      	b.n	d4fa4 <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d4fca:	2600      	movs	r6, #0
   d4fcc:	e7e7      	b.n	d4f9e <_ZN4MQTT10readPacketEPh+0x72>
   d4fce:	eba8 0006 	sub.w	r0, r8, r6
   d4fd2:	45b0      	cmp	r8, r6
   d4fd4:	bf2c      	ite	cs
   d4fd6:	4606      	movcs	r6, r0
   d4fd8:	2600      	movcc	r6, #0
   d4fda:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d4fdc:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d4fe0:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d4fe2:	42a0      	cmp	r0, r4
   d4fe4:	bf2c      	ite	cs
   d4fe6:	4620      	movcs	r0, r4
   d4fe8:	2000      	movcc	r0, #0
   d4fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4fee <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4ff0:	468c      	mov	ip, r1
   d4ff2:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d4ff4:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4ff6:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d4ff8:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d4ffa:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4ffc:	a802      	add	r0, sp, #8
        digit = len % 128;
   d4ffe:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d5002:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d5006:	f103 0401 	add.w	r4, r3, #1
   d500a:	4403      	add	r3, r0
            digit |= 0x80;
   d500c:	bf88      	it	hi
   d500e:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d5012:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d5016:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d501a:	b2e4      	uxtb	r4, r4
   d501c:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d5020:	d810      	bhi.n	d5044 <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d5022:	f1c4 0304 	rsb	r3, r4, #4
   d5026:	18d1      	adds	r1, r2, r3
   d5028:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d502c:	f1c4 0305 	rsb	r3, r4, #5
   d5030:	4413      	add	r3, r2
   d5032:	a801      	add	r0, sp, #4
   d5034:	3205      	adds	r2, #5
   d5036:	4293      	cmp	r3, r2
   d5038:	d006      	beq.n	d5048 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d503a:	f810 5b01 	ldrb.w	r5, [r0], #1
   d503e:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d5042:	e7f8      	b.n	d5036 <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d5044:	4623      	mov	r3, r4
   d5046:	e7d8      	b.n	d4ffa <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d5048:	1c72      	adds	r2, r6, #1
   d504a:	4422      	add	r2, r4
   d504c:	4638      	mov	r0, r7
   d504e:	f001 fd74 	bl	d6b3a <_ZN9TCPClient5writeEPKhj>
   d5052:	4605      	mov	r5, r0
   d5054:	f000 fd48 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d5058:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d505a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d505c:	4432      	add	r2, r6
   d505e:	b2a8      	uxth	r0, r5
}
   d5060:	1a13      	subs	r3, r2, r0
   d5062:	4258      	negs	r0, r3
   d5064:	4158      	adcs	r0, r3
   d5066:	b003      	add	sp, #12
   d5068:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d506a <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d506a:	b513      	push	{r0, r1, r4, lr}
   d506c:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d506e:	4601      	mov	r1, r0
   d5070:	a801      	add	r0, sp, #4
   d5072:	f7ff fee5 	bl	d4e40 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d5076:	69e3      	ldr	r3, [r4, #28]
   d5078:	22e0      	movs	r2, #224	; 0xe0
   d507a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d507c:	69e3      	ldr	r3, [r4, #28]
   d507e:	2200      	movs	r2, #0
   d5080:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d5082:	69e1      	ldr	r1, [r4, #28]
   d5084:	2202      	movs	r2, #2
   d5086:	4620      	mov	r0, r4
   d5088:	f001 fd57 	bl	d6b3a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d508c:	4620      	mov	r0, r4
   d508e:	f001 ff4b 	bl	d6f28 <_ZN9TCPClient4stopEv>
   d5092:	f000 fd29 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d5096:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d509a:	a801      	add	r0, sp, #4
   d509c:	f7ff fedb 	bl	d4e56 <_ZN4MQTT11MutexLockerD1Ev>
}
   d50a0:	b002      	add	sp, #8
   d50a2:	bd10      	pop	{r4, pc}

000d50a4 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d50a4:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d50a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d50a8:	4604      	mov	r4, r0
    pos += 2;
   d50aa:	b298      	uxth	r0, r3
   d50ac:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d50ae:	5ccd      	ldrb	r5, [r1, r3]
   d50b0:	b155      	cbz	r5, d50c8 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d50b2:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d50b6:	4286      	cmp	r6, r0
   d50b8:	f103 0701 	add.w	r7, r3, #1
   d50bc:	d904      	bls.n	d50c8 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d50be:	1c46      	adds	r6, r0, #1
   d50c0:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d50c2:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d50c4:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d50c6:	e7f2      	b.n	d50ae <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d50c8:	b299      	uxth	r1, r3
   d50ca:	1a44      	subs	r4, r0, r1
   d50cc:	4422      	add	r2, r4
   d50ce:	1209      	asrs	r1, r1, #8
   d50d0:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d50d4:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d50d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d50da <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d50da:	b538      	push	{r3, r4, r5, lr}
   d50dc:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d50de:	f001 fd42 	bl	d6b66 <_ZN9TCPClient9connectedEv>
   d50e2:	2800      	cmp	r0, #0
   d50e4:	bf14      	ite	ne
   d50e6:	2501      	movne	r5, #1
   d50e8:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d50ea:	d102      	bne.n	d50f2 <_ZN4MQTT11isConnectedEv+0x18>
   d50ec:	4620      	mov	r0, r4
   d50ee:	f001 ff1b 	bl	d6f28 <_ZN9TCPClient4stopEv>
    return rc;
}
   d50f2:	4628      	mov	r0, r5
   d50f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d50f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d50f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d50fc:	b088      	sub	sp, #32
   d50fe:	4604      	mov	r4, r0
   d5100:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d5104:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d5108:	4689      	mov	r9, r1
   d510a:	4617      	mov	r7, r2
   d510c:	461e      	mov	r6, r3
    if (!isConnected()) {
   d510e:	f7ff ffe4 	bl	d50da <_ZN4MQTT11isConnectedEv>
   d5112:	4605      	mov	r5, r0
   d5114:	2800      	cmp	r0, #0
   d5116:	f040 80cb 	bne.w	d52b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d511a:	4621      	mov	r1, r4
   d511c:	a801      	add	r0, sp, #4
   d511e:	f7ff fe8f 	bl	d4e40 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d5122:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5124:	2900      	cmp	r1, #0
   d5126:	f040 8087 	bne.w	d5238 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d512a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d512e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5130:	462b      	mov	r3, r5
   d5132:	4620      	mov	r0, r4
   d5134:	f001 ff56 	bl	d6fe4 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d5138:	2800      	cmp	r0, #0
   d513a:	d079      	beq.n	d5230 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d513c:	2301      	movs	r3, #1
   d513e:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d5140:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d5144:	69e2      	ldr	r2, [r4, #28]
   d5146:	2b04      	cmp	r3, #4
   d5148:	f040 8081 	bne.w	d524e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d514c:	4b59      	ldr	r3, [pc, #356]	; (d52b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d514e:	6818      	ldr	r0, [r3, #0]
   d5150:	8899      	ldrh	r1, [r3, #4]
   d5152:	799b      	ldrb	r3, [r3, #6]
   d5154:	f8ad 100c 	strh.w	r1, [sp, #12]
   d5158:	f88d 300e 	strb.w	r3, [sp, #14]
   d515c:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d515e:	f8c2 0005 	str.w	r0, [r2, #5]
   d5162:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d5166:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d516a:	f8a2 1009 	strh.w	r1, [r2, #9]
   d516e:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d5170:	230c      	movs	r3, #12
            if (willTopic) {
   d5172:	f1b8 0f00 	cmp.w	r8, #0
   d5176:	d07f      	beq.n	d5278 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5178:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d517c:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d5180:	0140      	lsls	r0, r0, #5
   d5182:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d5186:	f040 0006 	orr.w	r0, r0, #6
   d518a:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d518c:	f1ba 0f00 	cmp.w	sl, #0
   d5190:	d101      	bne.n	d5196 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d5192:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d5196:	b11f      	cbz	r7, d51a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d5198:	2e00      	cmp	r6, #0
   d519a:	d16f      	bne.n	d527c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d519c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d51a0:	69e2      	ldr	r2, [r4, #28]
   d51a2:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d51a4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d51a6:	69e1      	ldr	r1, [r4, #28]
   d51a8:	1c58      	adds	r0, r3, #1
   d51aa:	1212      	asrs	r2, r2, #8
   d51ac:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d51ae:	1c9a      	adds	r2, r3, #2
   d51b0:	69e1      	ldr	r1, [r4, #28]
   d51b2:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d51b4:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d51b6:	3303      	adds	r3, #3
   d51b8:	69e2      	ldr	r2, [r4, #28]
   d51ba:	4649      	mov	r1, r9
   d51bc:	4620      	mov	r0, r4
   d51be:	f7ff ff71 	bl	d50a4 <_ZN4MQTT11writeStringEPKcPht>
   d51c2:	4603      	mov	r3, r0
            if (willTopic) {
   d51c4:	f1b8 0f00 	cmp.w	r8, #0
   d51c8:	d00b      	beq.n	d51e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d51ca:	69e2      	ldr	r2, [r4, #28]
   d51cc:	4641      	mov	r1, r8
   d51ce:	4620      	mov	r0, r4
   d51d0:	f7ff ff68 	bl	d50a4 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d51d4:	69e2      	ldr	r2, [r4, #28]
   d51d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d51d8:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d51da:	4620      	mov	r0, r4
   d51dc:	f7ff ff62 	bl	d50a4 <_ZN4MQTT11writeStringEPKcPht>
   d51e0:	4603      	mov	r3, r0
            if(user != NULL) {
   d51e2:	b167      	cbz	r7, d51fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d51e4:	69e2      	ldr	r2, [r4, #28]
   d51e6:	4639      	mov	r1, r7
   d51e8:	4620      	mov	r0, r4
   d51ea:	f7ff ff5b 	bl	d50a4 <_ZN4MQTT11writeStringEPKcPht>
   d51ee:	4603      	mov	r3, r0
                if(pass != NULL) {
   d51f0:	b12e      	cbz	r6, d51fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d51f2:	69e2      	ldr	r2, [r4, #28]
   d51f4:	4631      	mov	r1, r6
   d51f6:	4620      	mov	r0, r4
   d51f8:	f7ff ff54 	bl	d50a4 <_ZN4MQTT11writeStringEPKcPht>
   d51fc:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d51fe:	3b05      	subs	r3, #5
   d5200:	69e2      	ldr	r2, [r4, #28]
   d5202:	b29b      	uxth	r3, r3
   d5204:	2110      	movs	r1, #16
   d5206:	4620      	mov	r0, r4
   d5208:	f7ff fef1 	bl	d4fee <_ZN4MQTT5writeEhPht>
   d520c:	f000 fc6c 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d5210:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5214:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d5218:	4620      	mov	r0, r4
   d521a:	f001 fe2b 	bl	d6e74 <_ZN9TCPClient9availableEv>
   d521e:	bb80      	cbnz	r0, d5282 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d5220:	f000 fc62 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5224:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5226:	1ac0      	subs	r0, r0, r3
   d5228:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d522a:	4373      	muls	r3, r6
   d522c:	4298      	cmp	r0, r3
   d522e:	d9f3      	bls.n	d5218 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d5230:	4620      	mov	r0, r4
   d5232:	f001 fe79 	bl	d6f28 <_ZN9TCPClient4stopEv>
   d5236:	e034      	b.n	d52a2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d5238:	a802      	add	r0, sp, #8
   d523a:	f001 fb1f 	bl	d687c <_ZN9IPAddressC1EPKh>
   d523e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5242:	462b      	mov	r3, r5
   d5244:	a902      	add	r1, sp, #8
   d5246:	4620      	mov	r0, r4
   d5248:	f001 fd99 	bl	d6d7e <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d524c:	e774      	b.n	d5138 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d524e:	4b1a      	ldr	r3, [pc, #104]	; (d52b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d5250:	6818      	ldr	r0, [r3, #0]
   d5252:	6859      	ldr	r1, [r3, #4]
   d5254:	7a1b      	ldrb	r3, [r3, #8]
   d5256:	f10d 0c08 	add.w	ip, sp, #8
   d525a:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d525e:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5262:	ab02      	add	r3, sp, #8
   d5264:	cb03      	ldmia	r3!, {r0, r1}
   d5266:	f8c2 0005 	str.w	r0, [r2, #5]
   d526a:	f8c2 1009 	str.w	r1, [r2, #9]
   d526e:	f89c 3000 	ldrb.w	r3, [ip]
   d5272:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5274:	230e      	movs	r3, #14
   d5276:	e77c      	b.n	d5172 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d5278:	2002      	movs	r0, #2
   d527a:	e787      	b.n	d518c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d527c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d5280:	e78e      	b.n	d51a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d5282:	a902      	add	r1, sp, #8
   d5284:	4620      	mov	r0, r4
   d5286:	f7ff fe51 	bl	d4f2c <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d528a:	2804      	cmp	r0, #4
   d528c:	d1d0      	bne.n	d5230 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d528e:	69e3      	ldr	r3, [r4, #28]
   d5290:	78de      	ldrb	r6, [r3, #3]
   d5292:	2e00      	cmp	r6, #0
   d5294:	d1cc      	bne.n	d5230 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d5296:	f000 fc27 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d529a:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d529c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d529e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d52a2:	a801      	add	r0, sp, #4
   d52a4:	f7ff fdd7 	bl	d4e56 <_ZN4MQTT11MutexLockerD1Ev>
}
   d52a8:	4628      	mov	r0, r5
   d52aa:	b008      	add	sp, #32
   d52ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d52b0:	2500      	movs	r5, #0
   d52b2:	e7f9      	b.n	d52a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d52b4:	000d8633 	.word	0x000d8633
   d52b8:	000d863a 	.word	0x000d863a

000d52bc <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   d52bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d52be:	2301      	movs	r3, #1
   d52c0:	2204      	movs	r2, #4
   d52c2:	e9cd 3204 	strd	r3, r2, [sp, #16]
   d52c6:	2300      	movs	r3, #0
   d52c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   d52cc:	e9cd 3300 	strd	r3, r3, [sp]
   d52d0:	461a      	mov	r2, r3
   d52d2:	f7ff ff11 	bl	d50f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d52d6:	b007      	add	sp, #28
   d52d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d52dc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d52dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52e0:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d52e4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d52e8:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d52ec:	4604      	mov	r4, r0
   d52ee:	468b      	mov	fp, r1
   d52f0:	4616      	mov	r6, r2
   d52f2:	461f      	mov	r7, r3
    if (isConnected()) {
   d52f4:	f7ff fef1 	bl	d50da <_ZN4MQTT11isConnectedEv>
   d52f8:	4682      	mov	sl, r0
   d52fa:	2800      	cmp	r0, #0
   d52fc:	d051      	beq.n	d53a2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   d52fe:	4621      	mov	r1, r4
   d5300:	a801      	add	r0, sp, #4
   d5302:	f7ff fd9d 	bl	d4e40 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   d5306:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d530a:	69e0      	ldr	r0, [r4, #28]
   d530c:	2100      	movs	r1, #0
   d530e:	f003 f81d 	bl	d834c <memset>
        length = writeString(topic, buffer, length);
   d5312:	2305      	movs	r3, #5
   d5314:	69e2      	ldr	r2, [r4, #28]
   d5316:	4659      	mov	r1, fp
   d5318:	4620      	mov	r0, r4
   d531a:	f7ff fec3 	bl	d50a4 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d531e:	1e6b      	subs	r3, r5, #1
   d5320:	2b01      	cmp	r3, #1
   d5322:	d815      	bhi.n	d5350 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   d5324:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5326:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   d5328:	3101      	adds	r1, #1
   d532a:	b289      	uxth	r1, r1
   d532c:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d532e:	1209      	asrs	r1, r1, #8
   d5330:	5419      	strb	r1, [r3, r0]
   d5332:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d5334:	69e3      	ldr	r3, [r4, #28]
   d5336:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5338:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   d533a:	3002      	adds	r0, #2
   d533c:	5499      	strb	r1, [r3, r2]
   d533e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d5340:	f1b8 0f00 	cmp.w	r8, #0
   d5344:	d004      	beq.n	d5350 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   d5346:	8c23      	ldrh	r3, [r4, #32]
   d5348:	1c5a      	adds	r2, r3, #1
   d534a:	8422      	strh	r2, [r4, #32]
   d534c:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5350:	2100      	movs	r1, #0
   d5352:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d5354:	428f      	cmp	r7, r1
   d5356:	69e2      	ldr	r2, [r4, #28]
   d5358:	b29b      	uxth	r3, r3
   d535a:	d90a      	bls.n	d5372 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   d535c:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d5360:	459c      	cmp	ip, r3
   d5362:	d906      	bls.n	d5372 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   d5364:	f816 c001 	ldrb.w	ip, [r6, r1]
   d5368:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d536c:	3101      	adds	r1, #1
   d536e:	b289      	uxth	r1, r1
   d5370:	e7ef      	b.n	d5352 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   d5372:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d5376:	2900      	cmp	r1, #0
   d5378:	bf0c      	ite	eq
   d537a:	2130      	moveq	r1, #48	; 0x30
   d537c:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d537e:	f1b9 0f00 	cmp.w	r9, #0
   d5382:	d001      	beq.n	d5388 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   d5384:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d5388:	2d02      	cmp	r5, #2
   d538a:	d10e      	bne.n	d53aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   d538c:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d5390:	3b05      	subs	r3, #5
   d5392:	b29b      	uxth	r3, r3
   d5394:	4620      	mov	r0, r4
   d5396:	f7ff fe2a 	bl	d4fee <_ZN4MQTT5writeEhPht>
   d539a:	4682      	mov	sl, r0
        MutexLocker lock(this);
   d539c:	a801      	add	r0, sp, #4
   d539e:	f7ff fd5a 	bl	d4e56 <_ZN4MQTT11MutexLockerD1Ev>
}
   d53a2:	4650      	mov	r0, sl
   d53a4:	b003      	add	sp, #12
   d53a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   d53aa:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d53ac:	bf08      	it	eq
   d53ae:	f041 0102 	orreq.w	r1, r1, #2
   d53b2:	e7ed      	b.n	d5390 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000d53b4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d53b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d53b6:	9c08      	ldr	r4, [sp, #32]
   d53b8:	9403      	str	r4, [sp, #12]
   d53ba:	2400      	movs	r4, #0
   d53bc:	9402      	str	r4, [sp, #8]
   d53be:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d53c2:	9401      	str	r4, [sp, #4]
   d53c4:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d53c8:	9400      	str	r4, [sp, #0]
   d53ca:	f7ff ff87 	bl	d52dc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d53ce:	b004      	add	sp, #16
   d53d0:	bd10      	pop	{r4, pc}

000d53d2 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d53d2:	b530      	push	{r4, r5, lr}
   d53d4:	b087      	sub	sp, #28
   d53d6:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d53d8:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d53da:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d53dc:	9204      	str	r2, [sp, #16]
   d53de:	f002 ffeb 	bl	d83b8 <strlen>
   d53e2:	2500      	movs	r5, #0
   d53e4:	4603      	mov	r3, r0
   d53e6:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d53ea:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d53ee:	9500      	str	r5, [sp, #0]
   d53f0:	4620      	mov	r0, r4
   d53f2:	f7ff ffdf 	bl	d53b4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d53f6:	b007      	add	sp, #28
   d53f8:	bd30      	pop	{r4, r5, pc}

000d53fa <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d53fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d53fc:	4604      	mov	r4, r0
   d53fe:	460e      	mov	r6, r1
    if (isConnected()) {
   d5400:	f7ff fe6b 	bl	d50da <_ZN4MQTT11isConnectedEv>
   d5404:	4605      	mov	r5, r0
   d5406:	b1c8      	cbz	r0, d543c <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d5408:	4621      	mov	r1, r4
   d540a:	a801      	add	r0, sp, #4
   d540c:	f7ff fd18 	bl	d4e40 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d5410:	69e3      	ldr	r3, [r4, #28]
   d5412:	2262      	movs	r2, #98	; 0x62
   d5414:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5416:	69e3      	ldr	r3, [r4, #28]
   d5418:	2202      	movs	r2, #2
   d541a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d541c:	69e3      	ldr	r3, [r4, #28]
   d541e:	1232      	asrs	r2, r6, #8
   d5420:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5422:	69e3      	ldr	r3, [r4, #28]
   d5424:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d5426:	69e1      	ldr	r1, [r4, #28]
   d5428:	2204      	movs	r2, #4
   d542a:	4620      	mov	r0, r4
   d542c:	f001 fb85 	bl	d6b3a <_ZN9TCPClient5writeEPKhj>
   d5430:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d5432:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d5434:	bf18      	it	ne
   d5436:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d5438:	f7ff fd0d 	bl	d4e56 <_ZN4MQTT11MutexLockerD1Ev>
}
   d543c:	4628      	mov	r0, r5
   d543e:	b002      	add	sp, #8
   d5440:	bd70      	pop	{r4, r5, r6, pc}

000d5442 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d5442:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5444:	4604      	mov	r4, r0
   d5446:	460e      	mov	r6, r1
    if (isConnected()) {
   d5448:	f7ff fe47 	bl	d50da <_ZN4MQTT11isConnectedEv>
   d544c:	4605      	mov	r5, r0
   d544e:	b1c8      	cbz	r0, d5484 <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d5450:	4621      	mov	r1, r4
   d5452:	a801      	add	r0, sp, #4
   d5454:	f7ff fcf4 	bl	d4e40 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d5458:	69e3      	ldr	r3, [r4, #28]
   d545a:	2272      	movs	r2, #114	; 0x72
   d545c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d545e:	69e3      	ldr	r3, [r4, #28]
   d5460:	2202      	movs	r2, #2
   d5462:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5464:	69e3      	ldr	r3, [r4, #28]
   d5466:	1232      	asrs	r2, r6, #8
   d5468:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d546a:	69e3      	ldr	r3, [r4, #28]
   d546c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d546e:	69e1      	ldr	r1, [r4, #28]
   d5470:	2204      	movs	r2, #4
   d5472:	4620      	mov	r0, r4
   d5474:	f001 fb61 	bl	d6b3a <_ZN9TCPClient5writeEPKhj>
   d5478:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d547a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d547c:	bf18      	it	ne
   d547e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d5480:	f7ff fce9 	bl	d4e56 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5484:	4628      	mov	r0, r5
   d5486:	b002      	add	sp, #8
   d5488:	bd70      	pop	{r4, r5, r6, pc}

000d548a <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d548a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d548e:	ed2d 8b02 	vpush	{d8}
   d5492:	b087      	sub	sp, #28
   d5494:	af00      	add	r7, sp, #0
   d5496:	4604      	mov	r4, r0
    if (isConnected()) {
   d5498:	f7ff fe1f 	bl	d50da <_ZN4MQTT11isConnectedEv>
   d549c:	4681      	mov	r9, r0
   d549e:	b1f8      	cbz	r0, d54e0 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d54a0:	4621      	mov	r1, r4
   d54a2:	f107 0014 	add.w	r0, r7, #20
   d54a6:	f7ff fccb 	bl	d4e40 <_ZN4MQTT11MutexLockerC1EPS_>
   d54aa:	f000 fb1d 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d54ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d54b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d54b4:	4353      	muls	r3, r2
   d54b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d54b8:	1a82      	subs	r2, r0, r2
   d54ba:	429a      	cmp	r2, r3
   d54bc:	4606      	mov	r6, r0
   d54be:	d803      	bhi.n	d54c8 <_ZN4MQTT4loopEv+0x3e>
   d54c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d54c2:	1a82      	subs	r2, r0, r2
   d54c4:	4293      	cmp	r3, r2
   d54c6:	d221      	bcs.n	d550c <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d54c8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d54cc:	b17b      	cbz	r3, d54ee <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d54ce:	4620      	mov	r0, r4
   d54d0:	f001 fd2a 	bl	d6f28 <_ZN9TCPClient4stopEv>
                return false;
   d54d4:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d54d8:	f107 0014 	add.w	r0, r7, #20
   d54dc:	f7ff fcbb 	bl	d4e56 <_ZN4MQTT11MutexLockerD1Ev>
}
   d54e0:	4648      	mov	r0, r9
   d54e2:	371c      	adds	r7, #28
   d54e4:	46bd      	mov	sp, r7
   d54e6:	ecbd 8b02 	vpop	{d8}
   d54ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d54ee:	69e2      	ldr	r2, [r4, #28]
   d54f0:	21c0      	movs	r1, #192	; 0xc0
   d54f2:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d54f4:	69e2      	ldr	r2, [r4, #28]
   d54f6:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d54f8:	69e1      	ldr	r1, [r4, #28]
   d54fa:	2202      	movs	r2, #2
   d54fc:	4620      	mov	r0, r4
   d54fe:	f001 fb1c 	bl	d6b3a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d5502:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d5506:	2301      	movs	r3, #1
   d5508:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d550c:	4620      	mov	r0, r4
   d550e:	f001 fcb1 	bl	d6e74 <_ZN9TCPClient9availableEv>
   d5512:	2800      	cmp	r0, #0
   d5514:	d0e0      	beq.n	d54d8 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d5516:	f107 0113 	add.w	r1, r7, #19
   d551a:	4620      	mov	r0, r4
   d551c:	f7ff fd06 	bl	d4f2c <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d5520:	4683      	mov	fp, r0
   d5522:	2800      	cmp	r0, #0
   d5524:	d0d8      	beq.n	d54d8 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d5526:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d5528:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d552a:	7819      	ldrb	r1, [r3, #0]
   d552c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d5530:	2a30      	cmp	r2, #48	; 0x30
   d5532:	d17f      	bne.n	d5634 <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d5534:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d5538:	f1ba 0f00 	cmp.w	sl, #0
   d553c:	d0cc      	beq.n	d54d8 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d553e:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d5542:	466a      	mov	r2, sp
   d5544:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5548:	eb03 020c 	add.w	r2, r3, ip
   d554c:	7855      	ldrb	r5, [r2, #1]
   d554e:	7891      	ldrb	r1, [r2, #2]
   d5550:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d5554:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d5556:	f105 0208 	add.w	r2, r5, #8
   d555a:	4669      	mov	r1, sp
   d555c:	08d2      	lsrs	r2, r2, #3
   d555e:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d5562:	4695      	mov	sp, r2
   d5564:	f10c 0203 	add.w	r2, ip, #3
   d5568:	60fa      	str	r2, [r7, #12]
   d556a:	eb03 0e02 	add.w	lr, r3, r2
   d556e:	eb0d 0205 	add.w	r2, sp, r5
   d5572:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d5574:	f8c7 d008 	str.w	sp, [r7, #8]
   d5578:	607a      	str	r2, [r7, #4]
   d557a:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d557e:	428a      	cmp	r2, r1
   d5580:	d006      	beq.n	d5590 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d5582:	460a      	mov	r2, r1
   d5584:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d5588:	f802 8b01 	strb.w	r8, [r2], #1
   d558c:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d558e:	e7f4      	b.n	d557a <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d5590:	2200      	movs	r2, #0
   d5592:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5594:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5598:	68f9      	ldr	r1, [r7, #12]
   d559a:	f008 0806 	and.w	r8, r8, #6
   d559e:	ebab 020c 	sub.w	r2, fp, ip
   d55a2:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d55a4:	f1b8 0f02 	cmp.w	r8, #2
   d55a8:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d55ac:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d55ae:	d125      	bne.n	d55fc <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d55b0:	f813 e001 	ldrb.w	lr, [r3, r1]
   d55b4:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d55b6:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d55b8:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d55bc:	f10c 0105 	add.w	r1, ip, #5
   d55c0:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d55c2:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d55c4:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d55c8:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d55ca:	69e3      	ldr	r3, [r4, #28]
   d55cc:	2240      	movs	r2, #64	; 0x40
   d55ce:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d55d0:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d55d2:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d55d6:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d55da:	69e3      	ldr	r3, [r4, #28]
   d55dc:	ea4f 222b 	mov.w	r2, fp, asr #8
   d55e0:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d55e2:	69e3      	ldr	r3, [r4, #28]
   d55e4:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d55e8:	69e1      	ldr	r1, [r4, #28]
   d55ea:	2204      	movs	r2, #4
   d55ec:	4620      	mov	r0, r4
   d55ee:	f001 faa4 	bl	d6b3a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d55f2:	6266      	str	r6, [r4, #36]	; 0x24
   d55f4:	ee18 3a10 	vmov	r3, s16
   d55f8:	469d      	mov	sp, r3
   d55fa:	e76d      	b.n	d54d8 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d55fc:	f1b8 0f04 	cmp.w	r8, #4
   d5600:	d115      	bne.n	d562e <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5602:	f813 e001 	ldrb.w	lr, [r3, r1]
   d5606:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5608:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d560a:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d560e:	f10c 0105 	add.w	r1, ip, #5
   d5612:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d5614:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5616:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d561a:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d561c:	69e3      	ldr	r3, [r4, #28]
   d561e:	2250      	movs	r2, #80	; 0x50
   d5620:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d5622:	69e3      	ldr	r3, [r4, #28]
   d5624:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5626:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d562a:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d562c:	e7d5      	b.n	d55da <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d562e:	4419      	add	r1, r3
   d5630:	47d0      	blx	sl
   d5632:	e7df      	b.n	d55f4 <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d5634:	2a50      	cmp	r2, #80	; 0x50
   d5636:	d108      	bne.n	d564a <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d5638:	789a      	ldrb	r2, [r3, #2]
   d563a:	78d9      	ldrb	r1, [r3, #3]
   d563c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d5640:	b289      	uxth	r1, r1
   d5642:	4620      	mov	r0, r4
   d5644:	f7ff fed9 	bl	d53fa <_ZN4MQTT14publishReleaseEt>
   d5648:	e746      	b.n	d54d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d564a:	2a40      	cmp	r2, #64	; 0x40
   d564c:	d112      	bne.n	d5674 <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d564e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d5650:	2a00      	cmp	r2, #0
   d5652:	f43f af41 	beq.w	d54d8 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d5656:	f1bb 0f04 	cmp.w	fp, #4
   d565a:	f47f af3d 	bne.w	d54d8 <_ZN4MQTT4loopEv+0x4e>
   d565e:	f011 0f06 	tst.w	r1, #6
   d5662:	f47f af39 	bne.w	d54d8 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d5666:	7899      	ldrb	r1, [r3, #2]
   d5668:	78d8      	ldrb	r0, [r3, #3]
   d566a:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d566e:	b280      	uxth	r0, r0
   d5670:	4790      	blx	r2
   d5672:	e731      	b.n	d54d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d5674:	2a60      	cmp	r2, #96	; 0x60
   d5676:	d108      	bne.n	d568a <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d5678:	789a      	ldrb	r2, [r3, #2]
   d567a:	78d9      	ldrb	r1, [r3, #3]
   d567c:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d5680:	b289      	uxth	r1, r1
   d5682:	4620      	mov	r0, r4
   d5684:	f7ff fedd 	bl	d5442 <_ZN4MQTT15publishCompleteEt>
   d5688:	e726      	b.n	d54d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d568a:	2a70      	cmp	r2, #112	; 0x70
   d568c:	d0df      	beq.n	d564e <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d568e:	2a90      	cmp	r2, #144	; 0x90
   d5690:	f43f af22 	beq.w	d54d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d5694:	2ac0      	cmp	r2, #192	; 0xc0
   d5696:	d10a      	bne.n	d56ae <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d5698:	22d0      	movs	r2, #208	; 0xd0
   d569a:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d569c:	69e3      	ldr	r3, [r4, #28]
   d569e:	2200      	movs	r2, #0
   d56a0:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d56a2:	69e1      	ldr	r1, [r4, #28]
   d56a4:	2202      	movs	r2, #2
   d56a6:	4620      	mov	r0, r4
   d56a8:	f001 fa47 	bl	d6b3a <_ZN9TCPClient5writeEPKhj>
   d56ac:	e714      	b.n	d54d8 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d56ae:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d56b0:	bf04      	itt	eq
   d56b2:	2300      	moveq	r3, #0
   d56b4:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d56b8:	e70e      	b.n	d54d8 <_ZN4MQTT4loopEv+0x4e>

000d56ba <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d56ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d56bc:	4604      	mov	r4, r0
   d56be:	460f      	mov	r7, r1
   d56c0:	4616      	mov	r6, r2
    if (isConnected()) {
   d56c2:	f7ff fd0a 	bl	d50da <_ZN4MQTT11isConnectedEv>
   d56c6:	4605      	mov	r5, r0
   d56c8:	b310      	cbz	r0, d5710 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   d56ca:	4621      	mov	r1, r4
   d56cc:	a801      	add	r0, sp, #4
   d56ce:	f7ff fbb7 	bl	d4e40 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   d56d2:	8c23      	ldrh	r3, [r4, #32]
   d56d4:	3301      	adds	r3, #1
   d56d6:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d56d8:	b1eb      	cbz	r3, d5716 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   d56da:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   d56dc:	8c23      	ldrh	r3, [r4, #32]
   d56de:	69e2      	ldr	r2, [r4, #28]
   d56e0:	121b      	asrs	r3, r3, #8
   d56e2:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d56e4:	69e3      	ldr	r3, [r4, #28]
   d56e6:	8c22      	ldrh	r2, [r4, #32]
   d56e8:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d56ea:	69e2      	ldr	r2, [r4, #28]
   d56ec:	2307      	movs	r3, #7
   d56ee:	4639      	mov	r1, r7
   d56f0:	4620      	mov	r0, r4
   d56f2:	f7ff fcd7 	bl	d50a4 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d56f6:	69e3      	ldr	r3, [r4, #28]
   d56f8:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d56fa:	3804      	subs	r0, #4
   d56fc:	b283      	uxth	r3, r0
   d56fe:	69e2      	ldr	r2, [r4, #28]
   d5700:	2182      	movs	r1, #130	; 0x82
   d5702:	4620      	mov	r0, r4
   d5704:	f7ff fc73 	bl	d4fee <_ZN4MQTT5writeEhPht>
   d5708:	4605      	mov	r5, r0
        MutexLocker lock(this);
   d570a:	a801      	add	r0, sp, #4
   d570c:	f7ff fba3 	bl	d4e56 <_ZN4MQTT11MutexLockerD1Ev>
}
   d5710:	4628      	mov	r0, r5
   d5712:	b003      	add	sp, #12
   d5714:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   d5716:	2301      	movs	r3, #1
   d5718:	e7df      	b.n	d56da <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000d571a <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   d571a:	2200      	movs	r2, #0
   d571c:	f7ff bfcd 	b.w	d56ba <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d5720 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d5720:	b538      	push	{r3, r4, r5, lr}
   d5722:	4605      	mov	r5, r0
    if (isConnected()) {
   d5724:	f7ff fcd9 	bl	d50da <_ZN4MQTT11isConnectedEv>
   d5728:	b110      	cbz	r0, d5730 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d572a:	4628      	mov	r0, r5
   d572c:	f7ff fc9d 	bl	d506a <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d5730:	69e8      	ldr	r0, [r5, #28]
   d5732:	b108      	cbz	r0, d5738 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d5734:	f7fe fcb5 	bl	d40a2 <_ZdaPv>
MQTT::~MQTT() {
   d5738:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d573c:	f000 fdee 	bl	d631c <_ZN6StringD1Ev>
	if (_M_pi != nullptr)
   d5740:	69ac      	ldr	r4, [r5, #24]
   d5742:	4b0a      	ldr	r3, [pc, #40]	; (d576c <_ZN4MQTTD1Ev+0x4c>)
   d5744:	602b      	str	r3, [r5, #0]
   d5746:	b17c      	cbz	r4, d5768 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d5748:	6863      	ldr	r3, [r4, #4]
   d574a:	3b01      	subs	r3, #1
   d574c:	6063      	str	r3, [r4, #4]
   d574e:	b95b      	cbnz	r3, d5768 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d5750:	6823      	ldr	r3, [r4, #0]
   d5752:	4620      	mov	r0, r4
   d5754:	689b      	ldr	r3, [r3, #8]
   d5756:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5758:	68a3      	ldr	r3, [r4, #8]
   d575a:	3b01      	subs	r3, #1
   d575c:	60a3      	str	r3, [r4, #8]
   d575e:	b91b      	cbnz	r3, d5768 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d5760:	6823      	ldr	r3, [r4, #0]
   d5762:	4620      	mov	r0, r4
   d5764:	68db      	ldr	r3, [r3, #12]
   d5766:	4798      	blx	r3
}
   d5768:	4628      	mov	r0, r5
   d576a:	bd38      	pop	{r3, r4, r5, pc}
   d576c:	000d8bdc 	.word	0x000d8bdc

000d5770 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   d5770:	f000 bf50 	b.w	d6614 <delay>

000d5774 <_Z11BlynkMillisv>:
   d5774:	f000 b9b8 	b.w	d5ae8 <HAL_Timer_Get_Milli_Seconds>

000d5778 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   d5778:	4770      	bx	lr

000d577a <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   d577a:	4770      	bx	lr

000d577c <BlynkNoOpCbk>:
{}
   d577c:	4770      	bx	lr
	...

000d5780 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   d5780:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   d5782:	bf5a      	itte	pl
   d5784:	4b02      	ldrpl	r3, [pc, #8]	; (d5790 <GetReadHandler+0x10>)
   d5786:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d578a:	2000      	movmi	r0, #0
#endif
}
   d578c:	4770      	bx	lr
   d578e:	bf00      	nop
   d5790:	000d8644 	.word	0x000d8644

000d5794 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   d5794:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   d5796:	bf5a      	itte	pl
   d5798:	4b02      	ldrpl	r3, [pc, #8]	; (d57a4 <GetWriteHandler+0x10>)
   d579a:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   d579e:	2000      	movmi	r0, #0
#endif
}
   d57a0:	4770      	bx	lr
   d57a2:	bf00      	nop
   d57a4:	000d8844 	.word	0x000d8844

000d57a8 <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   d57a8:	4770      	bx	lr

000d57aa <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   d57aa:	b510      	push	{r4, lr}
}
   d57ac:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   d57ae:	4604      	mov	r4, r0
}
   d57b0:	f001 fe81 	bl	d74b6 <_ZdlPvj>
   d57b4:	4620      	mov	r0, r4
   d57b6:	bd10      	pop	{r4, pc}

000d57b8 <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   d57b8:	b510      	push	{r4, lr}
   d57ba:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   d57bc:	f100 0118 	add.w	r1, r0, #24
   d57c0:	68c0      	ldr	r0, [r0, #12]
   d57c2:	f000 fc5f 	bl	d6084 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   d57c6:	8a20      	ldrh	r0, [r4, #16]
   d57c8:	2100      	movs	r1, #0
}
   d57ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   d57ce:	f001 bdc4 	b.w	d735a <digitalWrite>

000d57d2 <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   d57d2:	b510      	push	{r4, lr}
   d57d4:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   d57d6:	2101      	movs	r1, #1
   d57d8:	8a00      	ldrh	r0, [r0, #16]
   d57da:	f001 fdbe 	bl	d735a <digitalWrite>

	spi.endTransaction();
   d57de:	68e0      	ldr	r0, [r4, #12]
}
   d57e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   d57e4:	f000 bc35 	b.w	d6052 <_ZN8SPIClass14endTransactionEv>

000d57e8 <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d57e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d57ea:	461e      	mov	r6, r3
	beginTransaction();
   d57ec:	6803      	ldr	r3, [r0, #0]
   d57ee:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d57f0:	460f      	mov	r7, r1
   d57f2:	4614      	mov	r4, r2
   d57f4:	4605      	mov	r5, r0
	beginTransaction();
   d57f6:	4798      	blx	r3

	if (numBytes > 1) {
   d57f8:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d57fa:	bf88      	it	hi
   d57fc:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   d5800:	68e8      	ldr	r0, [r5, #12]
   d5802:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   d5806:	f000 fcab 	bl	d6160 <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   d580a:	4426      	add	r6, r4
   d580c:	42b4      	cmp	r4, r6
   d580e:	d006      	beq.n	d581e <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   d5810:	68e8      	ldr	r0, [r5, #12]
   d5812:	2100      	movs	r1, #0
   d5814:	f000 fca4 	bl	d6160 <_ZN8SPIClass8transferEh>
   d5818:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   d581c:	e7f6      	b.n	d580c <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   d581e:	682b      	ldr	r3, [r5, #0]
   d5820:	4628      	mov	r0, r5
   d5822:	699b      	ldr	r3, [r3, #24]
   d5824:	4798      	blx	r3

	return true;
}
   d5826:	2001      	movs	r0, #1
   d5828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d582a <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d582a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d582c:	461e      	mov	r6, r3
	beginTransaction();
   d582e:	6803      	ldr	r3, [r0, #0]
   d5830:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d5832:	460f      	mov	r7, r1
   d5834:	4614      	mov	r4, r2
   d5836:	4605      	mov	r5, r0
	beginTransaction();
   d5838:	4798      	blx	r3

	if (numBytes > 1) {
   d583a:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   d583c:	bf88      	it	hi
   d583e:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   d5842:	68e8      	ldr	r0, [r5, #12]
   d5844:	4639      	mov	r1, r7
   d5846:	f000 fc8b 	bl	d6160 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d584a:	4426      	add	r6, r4
   d584c:	42b4      	cmp	r4, r6
   d584e:	d005      	beq.n	d585c <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   d5850:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5854:	68e8      	ldr	r0, [r5, #12]
   d5856:	f000 fc83 	bl	d6160 <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   d585a:	e7f7      	b.n	d584c <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   d585c:	682b      	ldr	r3, [r5, #0]
   d585e:	4628      	mov	r0, r5
   d5860:	699b      	ldr	r3, [r3, #24]
   d5862:	4798      	blx	r3

	return true;
}
   d5864:	2001      	movs	r0, #1
   d5866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5868 <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   d5868:	2200      	movs	r2, #0
   d586a:	7002      	strb	r2, [r0, #0]
   d586c:	7042      	strb	r2, [r0, #1]
   d586e:	7082      	strb	r2, [r0, #2]
   d5870:	70c2      	strb	r2, [r0, #3]
   d5872:	7102      	strb	r2, [r0, #4]
   d5874:	7142      	strb	r2, [r0, #5]
   d5876:	7182      	strb	r2, [r0, #6]
   d5878:	71c2      	strb	r2, [r0, #7]
   d587a:	7202      	strb	r2, [r0, #8]
   d587c:	7242      	strb	r2, [r0, #9]
   d587e:	7282      	strb	r2, [r0, #10]
}
   d5880:	4770      	bx	lr

000d5882 <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   d5882:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   d5884:	f041 0107 	orr.w	r1, r1, #7
   d5888:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   d588a:	7102      	strb	r2, [r0, #4]
   d588c:	7082      	strb	r2, [r0, #2]
   d588e:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   d5890:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   d5892:	7242      	strb	r2, [r0, #9]
}
   d5894:	4770      	bx	lr
	...

000d5898 <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d5898:	4a02      	ldr	r2, [pc, #8]	; (d58a4 <_ZN6LIS3DHC1Ei+0xc>)
   d589a:	e9c0 2100 	strd	r2, r1, [r0]
   d589e:	2200      	movs	r2, #0
   d58a0:	7202      	strb	r2, [r0, #8]
}
   d58a2:	4770      	bx	lr
   d58a4:	000d8a60 	.word	0x000d8a60

000d58a8 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d58a8:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d58aa:	6803      	ldr	r3, [r0, #0]
   d58ac:	aa01      	add	r2, sp, #4
   d58ae:	68dc      	ldr	r4, [r3, #12]
   d58b0:	2301      	movs	r3, #1
   d58b2:	47a0      	blx	r4
}
   d58b4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d58b8:	b002      	add	sp, #8
   d58ba:	bd10      	pop	{r4, pc}

000d58bc <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d58bc:	b538      	push	{r3, r4, r5, lr}
   d58be:	4605      	mov	r5, r0
   d58c0:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d58c2:	210f      	movs	r1, #15
   d58c4:	4628      	mov	r0, r5
   d58c6:	f7ff ffef 	bl	d58a8 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d58ca:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d58cc:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d58d0:	d004      	beq.n	d58dc <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d58d2:	f000 fe9f 	bl	d6614 <delay>
	for(int tries = 0; tries < 10; tries++) {
   d58d6:	3c01      	subs	r4, #1
   d58d8:	d1f3      	bne.n	d58c2 <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d58da:	4620      	mov	r0, r4
}
   d58dc:	bd38      	pop	{r3, r4, r5, pc}

000d58de <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   d58de:	b510      	push	{r4, lr}
   d58e0:	4604      	mov	r4, r0
	spi.begin(ss);
   d58e2:	8a01      	ldrh	r1, [r0, #16]
   d58e4:	68c0      	ldr	r0, [r0, #12]
   d58e6:	f000 fba1 	bl	d602c <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   d58ea:	4620      	mov	r0, r4
}
   d58ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   d58f0:	f7ff bfe4 	b.w	d58bc <_ZN6LIS3DH9hasDeviceEv>

000d58f4 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d58f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d58f6:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d58f8:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d58fa:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d58fc:	f7ff ffd4 	bl	d58a8 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   d5900:	f000 0008 	and.w	r0, r0, #8
   d5904:	2800      	cmp	r0, #0
   d5906:	bf14      	ite	ne
   d5908:	2601      	movne	r6, #1
   d590a:	2600      	moveq	r6, #0
	if (hasData) {
   d590c:	d01b      	beq.n	d5946 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   d590e:	682b      	ldr	r3, [r5, #0]
   d5910:	466a      	mov	r2, sp
   d5912:	68df      	ldr	r7, [r3, #12]
   d5914:	2128      	movs	r1, #40	; 0x28
   d5916:	2306      	movs	r3, #6
   d5918:	4628      	mov	r0, r5
   d591a:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   d591c:	f89d 2001 	ldrb.w	r2, [sp, #1]
   d5920:	f89d 3000 	ldrb.w	r3, [sp]
   d5924:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d5928:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   d592a:	f89d 2003 	ldrb.w	r2, [sp, #3]
   d592e:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d5932:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d5936:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   d5938:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d593c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d5940:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d5944:	80a3      	strh	r3, [r4, #4]
}
   d5946:	4630      	mov	r0, r6
   d5948:	b003      	add	sp, #12
   d594a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d594c <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   d594c:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   d594e:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   d5950:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   d5954:	691c      	ldr	r4, [r3, #16]
   d5956:	aa01      	add	r2, sp, #4
   d5958:	2301      	movs	r3, #1
   d595a:	47a0      	blx	r4
}
   d595c:	b002      	add	sp, #8
   d595e:	bd10      	pop	{r4, pc}

000d5960 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   d5960:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   d5962:	6803      	ldr	r3, [r0, #0]
   d5964:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   d5966:	4604      	mov	r4, r0
   d5968:	460d      	mov	r5, r1
	if (!hasDevice()) {
   d596a:	4798      	blx	r3
   d596c:	4606      	mov	r6, r0
   d596e:	b930      	cbnz	r0, d597e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   d5970:	f000 fff0 	bl	d6954 <_Z16_fetch_usbserialv>
   d5974:	4927      	ldr	r1, [pc, #156]	; (d5a14 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   d5976:	f000 fdb6 	bl	d64e6 <_ZN5Print7printlnEPKc>
}
   d597a:	4630      	mov	r0, r6
   d597c:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   d597e:	782a      	ldrb	r2, [r5, #0]
   d5980:	2120      	movs	r1, #32
   d5982:	4620      	mov	r0, r4
   d5984:	f7ff ffe2 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   d5988:	786a      	ldrb	r2, [r5, #1]
   d598a:	2121      	movs	r1, #33	; 0x21
   d598c:	4620      	mov	r0, r4
   d598e:	f7ff ffdd 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   d5992:	78aa      	ldrb	r2, [r5, #2]
   d5994:	2122      	movs	r1, #34	; 0x22
   d5996:	4620      	mov	r0, r4
   d5998:	f7ff ffd8 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   d599c:	78ea      	ldrb	r2, [r5, #3]
   d599e:	2123      	movs	r1, #35	; 0x23
   d59a0:	4620      	mov	r0, r4
   d59a2:	f7ff ffd3 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   d59a6:	792a      	ldrb	r2, [r5, #4]
   d59a8:	2124      	movs	r1, #36	; 0x24
   d59aa:	4620      	mov	r0, r4
   d59ac:	f7ff ffce 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   d59b0:	796a      	ldrb	r2, [r5, #5]
   d59b2:	2125      	movs	r1, #37	; 0x25
   d59b4:	4620      	mov	r0, r4
   d59b6:	f7ff ffc9 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   d59ba:	79ab      	ldrb	r3, [r5, #6]
   d59bc:	b11b      	cbz	r3, d59c6 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   d59be:	2126      	movs	r1, #38	; 0x26
   d59c0:	4620      	mov	r0, r4
   d59c2:	f7ff ff71 	bl	d58a8 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   d59c6:	7aaa      	ldrb	r2, [r5, #10]
   d59c8:	212e      	movs	r1, #46	; 0x2e
   d59ca:	4620      	mov	r0, r4
   d59cc:	f7ff ffbe 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   d59d0:	78ab      	ldrb	r3, [r5, #2]
   d59d2:	065b      	lsls	r3, r3, #25
   d59d4:	d5d1      	bpl.n	d597a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   d59d6:	79ea      	ldrb	r2, [r5, #7]
   d59d8:	2132      	movs	r1, #50	; 0x32
   d59da:	4620      	mov	r0, r4
   d59dc:	f7ff ffb6 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   d59e0:	7a2a      	ldrb	r2, [r5, #8]
   d59e2:	2133      	movs	r1, #51	; 0x33
   d59e4:	4620      	mov	r0, r4
   d59e6:	f7ff ffb1 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   d59ea:	6863      	ldr	r3, [r4, #4]
   d59ec:	2b00      	cmp	r3, #0
   d59ee:	db0a      	blt.n	d5a06 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   d59f0:	7a6a      	ldrb	r2, [r5, #9]
   d59f2:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   d59f4:	4620      	mov	r0, r4
   d59f6:	2130      	movs	r1, #48	; 0x30
   d59f8:	f7ff ffa8 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   d59fc:	2131      	movs	r1, #49	; 0x31
   d59fe:	4620      	mov	r0, r4
   d5a00:	f7ff ff52 	bl	d58a8 <_ZN6LIS3DH13readRegister8Eh>
   d5a04:	e7b9      	b.n	d597a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   d5a06:	2200      	movs	r2, #0
   d5a08:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   d5a0a:	2130      	movs	r1, #48	; 0x30
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	f7ff ff9d 	bl	d594c <_ZN6LIS3DH14writeRegister8Ehh>
   d5a12:	e7b2      	b.n	d597a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   d5a14:	000d8a44 	.word	0x000d8a44

000d5a18 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5a18:	b508      	push	{r3, lr}
   d5a1a:	4b02      	ldr	r3, [pc, #8]	; (d5a24 <netdb_freeaddrinfo+0xc>)
   d5a1c:	681b      	ldr	r3, [r3, #0]
   d5a1e:	689b      	ldr	r3, [r3, #8]
   d5a20:	9301      	str	r3, [sp, #4]
   d5a22:	bd08      	pop	{r3, pc}
   d5a24:	00030268 	.word	0x00030268

000d5a28 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5a28:	b508      	push	{r3, lr}
   d5a2a:	4b02      	ldr	r3, [pc, #8]	; (d5a34 <netdb_getaddrinfo+0xc>)
   d5a2c:	681b      	ldr	r3, [r3, #0]
   d5a2e:	68db      	ldr	r3, [r3, #12]
   d5a30:	9301      	str	r3, [sp, #4]
   d5a32:	bd08      	pop	{r3, pc}
   d5a34:	00030268 	.word	0x00030268

000d5a38 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5a38:	b508      	push	{r3, lr}
   d5a3a:	4b02      	ldr	r3, [pc, #8]	; (d5a44 <HAL_Validate_Pin_Function+0xc>)
   d5a3c:	681b      	ldr	r3, [r3, #0]
   d5a3e:	685b      	ldr	r3, [r3, #4]
   d5a40:	9301      	str	r3, [sp, #4]
   d5a42:	bd08      	pop	{r3, pc}
   d5a44:	0003022c 	.word	0x0003022c

000d5a48 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5a48:	b508      	push	{r3, lr}
   d5a4a:	4b02      	ldr	r3, [pc, #8]	; (d5a54 <HAL_Pin_Mode+0xc>)
   d5a4c:	681b      	ldr	r3, [r3, #0]
   d5a4e:	689b      	ldr	r3, [r3, #8]
   d5a50:	9301      	str	r3, [sp, #4]
   d5a52:	bd08      	pop	{r3, pc}
   d5a54:	0003022c 	.word	0x0003022c

000d5a58 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5a58:	b508      	push	{r3, lr}
   d5a5a:	4b02      	ldr	r3, [pc, #8]	; (d5a64 <HAL_Get_Pin_Mode+0xc>)
   d5a5c:	681b      	ldr	r3, [r3, #0]
   d5a5e:	68db      	ldr	r3, [r3, #12]
   d5a60:	9301      	str	r3, [sp, #4]
   d5a62:	bd08      	pop	{r3, pc}
   d5a64:	0003022c 	.word	0x0003022c

000d5a68 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5a68:	b508      	push	{r3, lr}
   d5a6a:	4b02      	ldr	r3, [pc, #8]	; (d5a74 <HAL_GPIO_Write+0xc>)
   d5a6c:	681b      	ldr	r3, [r3, #0]
   d5a6e:	691b      	ldr	r3, [r3, #16]
   d5a70:	9301      	str	r3, [sp, #4]
   d5a72:	bd08      	pop	{r3, pc}
   d5a74:	0003022c 	.word	0x0003022c

000d5a78 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5a78:	b508      	push	{r3, lr}
   d5a7a:	4b02      	ldr	r3, [pc, #8]	; (d5a84 <HAL_GPIO_Read+0xc>)
   d5a7c:	681b      	ldr	r3, [r3, #0]
   d5a7e:	695b      	ldr	r3, [r3, #20]
   d5a80:	9301      	str	r3, [sp, #4]
   d5a82:	bd08      	pop	{r3, pc}
   d5a84:	0003022c 	.word	0x0003022c

000d5a88 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   d5a88:	b508      	push	{r3, lr}
   d5a8a:	4b02      	ldr	r3, [pc, #8]	; (d5a94 <HAL_DAC_Write+0xc>)
   d5a8c:	681b      	ldr	r3, [r3, #0]
   d5a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5a90:	9301      	str	r3, [sp, #4]
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	0003022c 	.word	0x0003022c

000d5a98 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d5a98:	b508      	push	{r3, lr}
   d5a9a:	4b02      	ldr	r3, [pc, #8]	; (d5aa4 <hal_adc_read+0xc>)
   d5a9c:	681b      	ldr	r3, [r3, #0]
   d5a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5aa0:	9301      	str	r3, [sp, #4]
   d5aa2:	bd08      	pop	{r3, pc}
   d5aa4:	0003022c 	.word	0x0003022c

000d5aa8 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   d5aa8:	b508      	push	{r3, lr}
   d5aaa:	4b02      	ldr	r3, [pc, #8]	; (d5ab4 <hal_pwm_write_ext+0xc>)
   d5aac:	681b      	ldr	r3, [r3, #0]
   d5aae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   d5ab0:	9301      	str	r3, [sp, #4]
   d5ab2:	bd08      	pop	{r3, pc}
   d5ab4:	0003022c 	.word	0x0003022c

000d5ab8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5ab8:	b508      	push	{r3, lr}
   d5aba:	4b02      	ldr	r3, [pc, #8]	; (d5ac4 <if_index_to_name+0xc>)
   d5abc:	681b      	ldr	r3, [r3, #0]
   d5abe:	695b      	ldr	r3, [r3, #20]
   d5ac0:	9301      	str	r3, [sp, #4]
   d5ac2:	bd08      	pop	{r3, pc}
   d5ac4:	0003026c 	.word	0x0003026c

000d5ac8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5ac8:	b508      	push	{r3, lr}
   d5aca:	4b02      	ldr	r3, [pc, #8]	; (d5ad4 <HAL_RNG_GetRandomNumber+0xc>)
   d5acc:	681b      	ldr	r3, [r3, #0]
   d5ace:	685b      	ldr	r3, [r3, #4]
   d5ad0:	9301      	str	r3, [sp, #4]
   d5ad2:	bd08      	pop	{r3, pc}
   d5ad4:	00030218 	.word	0x00030218

000d5ad8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5ad8:	b508      	push	{r3, lr}
   d5ada:	4b02      	ldr	r3, [pc, #8]	; (d5ae4 <HAL_Delay_Microseconds+0xc>)
   d5adc:	681b      	ldr	r3, [r3, #0]
   d5ade:	68db      	ldr	r3, [r3, #12]
   d5ae0:	9301      	str	r3, [sp, #4]
   d5ae2:	bd08      	pop	{r3, pc}
   d5ae4:	00030218 	.word	0x00030218

000d5ae8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ae8:	b508      	push	{r3, lr}
   d5aea:	4b02      	ldr	r3, [pc, #8]	; (d5af4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5aec:	681b      	ldr	r3, [r3, #0]
   d5aee:	695b      	ldr	r3, [r3, #20]
   d5af0:	9301      	str	r3, [sp, #4]
   d5af2:	bd08      	pop	{r3, pc}
   d5af4:	00030218 	.word	0x00030218

000d5af8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d5af8:	b508      	push	{r3, lr}
   d5afa:	4b02      	ldr	r3, [pc, #8]	; (d5b04 <os_mutex_create+0xc>)
   d5afc:	681b      	ldr	r3, [r3, #0]
   d5afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b00:	9301      	str	r3, [sp, #4]
   d5b02:	bd08      	pop	{r3, pc}
   d5b04:	00030248 	.word	0x00030248

000d5b08 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d5b08:	b508      	push	{r3, lr}
   d5b0a:	4b02      	ldr	r3, [pc, #8]	; (d5b14 <os_mutex_lock+0xc>)
   d5b0c:	681b      	ldr	r3, [r3, #0]
   d5b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5b10:	9301      	str	r3, [sp, #4]
   d5b12:	bd08      	pop	{r3, pc}
   d5b14:	00030248 	.word	0x00030248

000d5b18 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d5b18:	b508      	push	{r3, lr}
   d5b1a:	4b02      	ldr	r3, [pc, #8]	; (d5b24 <os_mutex_unlock+0xc>)
   d5b1c:	681b      	ldr	r3, [r3, #0]
   d5b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5b20:	9301      	str	r3, [sp, #4]
   d5b22:	bd08      	pop	{r3, pc}
   d5b24:	00030248 	.word	0x00030248

000d5b28 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5b28:	b508      	push	{r3, lr}
   d5b2a:	4b02      	ldr	r3, [pc, #8]	; (d5b34 <os_mutex_recursive_create+0xc>)
   d5b2c:	681b      	ldr	r3, [r3, #0]
   d5b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5b30:	9301      	str	r3, [sp, #4]
   d5b32:	bd08      	pop	{r3, pc}
   d5b34:	00030248 	.word	0x00030248

000d5b38 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5b38:	b508      	push	{r3, lr}
   d5b3a:	4b02      	ldr	r3, [pc, #8]	; (d5b44 <os_mutex_recursive_destroy+0xc>)
   d5b3c:	681b      	ldr	r3, [r3, #0]
   d5b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5b40:	9301      	str	r3, [sp, #4]
   d5b42:	bd08      	pop	{r3, pc}
   d5b44:	00030248 	.word	0x00030248

000d5b48 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5b48:	b508      	push	{r3, lr}
   d5b4a:	4b02      	ldr	r3, [pc, #8]	; (d5b54 <inet_inet_ntop+0xc>)
   d5b4c:	681b      	ldr	r3, [r3, #0]
   d5b4e:	695b      	ldr	r3, [r3, #20]
   d5b50:	9301      	str	r3, [sp, #4]
   d5b52:	bd08      	pop	{r3, pc}
   d5b54:	00030264 	.word	0x00030264

000d5b58 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <inet_htonl+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	6a1b      	ldr	r3, [r3, #32]
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	00030264 	.word	0x00030264

000d5b68 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <inet_htons+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	00030264 	.word	0x00030264

000d5b78 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <hal_usart_init+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	681b      	ldr	r3, [r3, #0]
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	0003023c 	.word	0x0003023c

000d5b88 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <hal_usart_write+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	68db      	ldr	r3, [r3, #12]
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	0003023c 	.word	0x0003023c

000d5b98 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <hal_usart_available+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	691b      	ldr	r3, [r3, #16]
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	0003023c 	.word	0x0003023c

000d5ba8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <hal_usart_read+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	695b      	ldr	r3, [r3, #20]
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	0003023c 	.word	0x0003023c

000d5bb8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <hal_usart_peek+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	699b      	ldr	r3, [r3, #24]
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	0003023c 	.word	0x0003023c

000d5bc8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <hal_usart_flush+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	69db      	ldr	r3, [r3, #28]
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	0003023c 	.word	0x0003023c

000d5bd8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <hal_usart_is_enabled+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	6a1b      	ldr	r3, [r3, #32]
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	0003023c 	.word	0x0003023c

000d5be8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <hal_usart_available_data_for_write+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	0003023c 	.word	0x0003023c

000d5bf8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <hal_i2c_write+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	6a1b      	ldr	r3, [r3, #32]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	00030228 	.word	0x00030228

000d5c08 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <hal_i2c_available+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	00030228 	.word	0x00030228

000d5c18 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <hal_i2c_read+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	00030228 	.word	0x00030228

000d5c28 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <hal_i2c_peek+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	00030228 	.word	0x00030228

000d5c38 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <hal_i2c_flush+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	00030228 	.word	0x00030228

000d5c48 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <hal_i2c_is_enabled+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	00030228 	.word	0x00030228

000d5c58 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <hal_i2c_init+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	00030228 	.word	0x00030228

000d5c68 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <sock_setsockopt+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	699b      	ldr	r3, [r3, #24]
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	00030238 	.word	0x00030238

000d5c78 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <sock_close+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	69db      	ldr	r3, [r3, #28]
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	00030238 	.word	0x00030238

000d5c88 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <sock_connect+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	6a1b      	ldr	r3, [r3, #32]
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	00030238 	.word	0x00030238

000d5c98 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <sock_recv+0xc>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5ca0:	9301      	str	r3, [sp, #4]
   d5ca2:	bd08      	pop	{r3, pc}
   d5ca4:	00030238 	.word	0x00030238

000d5ca8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5ca8:	b508      	push	{r3, lr}
   d5caa:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <sock_send+0xc>)
   d5cac:	681b      	ldr	r3, [r3, #0]
   d5cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5cb0:	9301      	str	r3, [sp, #4]
   d5cb2:	bd08      	pop	{r3, pc}
   d5cb4:	00030238 	.word	0x00030238

000d5cb8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	4b02      	ldr	r3, [pc, #8]	; (d5cc4 <sock_socket+0xc>)
   d5cbc:	681b      	ldr	r3, [r3, #0]
   d5cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5cc0:	9301      	str	r3, [sp, #4]
   d5cc2:	bd08      	pop	{r3, pc}
   d5cc4:	00030238 	.word	0x00030238

000d5cc8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b02      	ldr	r3, [pc, #8]	; (d5cd4 <hal_spi_begin+0xc>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	681b      	ldr	r3, [r3, #0]
   d5cd0:	9301      	str	r3, [sp, #4]
   d5cd2:	bd08      	pop	{r3, pc}
   d5cd4:	00030230 	.word	0x00030230

000d5cd8 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b02      	ldr	r3, [pc, #8]	; (d5ce4 <hal_spi_transfer+0xc>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	695b      	ldr	r3, [r3, #20]
   d5ce0:	9301      	str	r3, [sp, #4]
   d5ce2:	bd08      	pop	{r3, pc}
   d5ce4:	00030230 	.word	0x00030230

000d5ce8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5ce8:	b508      	push	{r3, lr}
   d5cea:	4b02      	ldr	r3, [pc, #8]	; (d5cf4 <hal_spi_init+0xc>)
   d5cec:	681b      	ldr	r3, [r3, #0]
   d5cee:	69db      	ldr	r3, [r3, #28]
   d5cf0:	9301      	str	r3, [sp, #4]
   d5cf2:	bd08      	pop	{r3, pc}
   d5cf4:	00030230 	.word	0x00030230

000d5cf8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5cf8:	b508      	push	{r3, lr}
   d5cfa:	4b02      	ldr	r3, [pc, #8]	; (d5d04 <hal_spi_is_enabled+0xc>)
   d5cfc:	681b      	ldr	r3, [r3, #0]
   d5cfe:	6a1b      	ldr	r3, [r3, #32]
   d5d00:	9301      	str	r3, [sp, #4]
   d5d02:	bd08      	pop	{r3, pc}
   d5d04:	00030230 	.word	0x00030230

000d5d08 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <hal_spi_info+0xc>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5d10:	9301      	str	r3, [sp, #4]
   d5d12:	bd08      	pop	{r3, pc}
   d5d14:	00030230 	.word	0x00030230

000d5d18 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <hal_spi_set_settings+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	00030230 	.word	0x00030230

000d5d28 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <hal_spi_acquire+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	00030230 	.word	0x00030230

000d5d38 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <hal_spi_release+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	00030230 	.word	0x00030230

000d5d48 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <HAL_USB_USART_Init+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	681b      	ldr	r3, [r3, #0]
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	0003024c 	.word	0x0003024c

000d5d58 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <HAL_USB_USART_Begin+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	685b      	ldr	r3, [r3, #4]
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	0003024c 	.word	0x0003024c

000d5d68 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <HAL_USB_USART_Available_Data+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	691b      	ldr	r3, [r3, #16]
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	0003024c 	.word	0x0003024c

000d5d78 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	695b      	ldr	r3, [r3, #20]
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	0003024c 	.word	0x0003024c

000d5d88 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <HAL_USB_USART_Receive_Data+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	699b      	ldr	r3, [r3, #24]
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	0003024c 	.word	0x0003024c

000d5d98 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <HAL_USB_USART_Send_Data+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	69db      	ldr	r3, [r3, #28]
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	0003024c 	.word	0x0003024c

000d5da8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <HAL_USB_USART_Flush_Data+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	6a1b      	ldr	r3, [r3, #32]
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	0003024c 	.word	0x0003024c

000d5db8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <panic_+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	00030260 	.word	0x00030260

000d5dc8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <log_message+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030260 	.word	0x00030260

000d5dd8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <set_system_mode+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	685b      	ldr	r3, [r3, #4]
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030220 	.word	0x00030220

000d5de8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <system_delay_ms+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	695b      	ldr	r3, [r3, #20]
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030220 	.word	0x00030220

000d5df8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <system_thread_set_state+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030220 	.word	0x00030220

000d5e08 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b03      	ldr	r3, [pc, #12]	; (d5e18 <system_ctrl_set_app_request_handler+0x10>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5e12:	9301      	str	r3, [sp, #4]
   d5e14:	bd08      	pop	{r3, pc}
   d5e16:	0000      	.short	0x0000
   d5e18:	00030220 	.word	0x00030220

000d5e1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5e1c:	b508      	push	{r3, lr}
   d5e1e:	4b03      	ldr	r3, [pc, #12]	; (d5e2c <system_ctrl_set_result+0x10>)
   d5e20:	681b      	ldr	r3, [r3, #0]
   d5e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5e26:	9301      	str	r3, [sp, #4]
   d5e28:	bd08      	pop	{r3, pc}
   d5e2a:	0000      	.short	0x0000
   d5e2c:	00030220 	.word	0x00030220

000d5e30 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e30:	b508      	push	{r3, lr}
   d5e32:	4b02      	ldr	r3, [pc, #8]	; (d5e3c <network_connect+0xc>)
   d5e34:	681b      	ldr	r3, [r3, #0]
   d5e36:	685b      	ldr	r3, [r3, #4]
   d5e38:	9301      	str	r3, [sp, #4]
   d5e3a:	bd08      	pop	{r3, pc}
   d5e3c:	00030240 	.word	0x00030240

000d5e40 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5e40:	b508      	push	{r3, lr}
   d5e42:	4b02      	ldr	r3, [pc, #8]	; (d5e4c <network_connecting+0xc>)
   d5e44:	681b      	ldr	r3, [r3, #0]
   d5e46:	689b      	ldr	r3, [r3, #8]
   d5e48:	9301      	str	r3, [sp, #4]
   d5e4a:	bd08      	pop	{r3, pc}
   d5e4c:	00030240 	.word	0x00030240

000d5e50 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5e50:	b508      	push	{r3, lr}
   d5e52:	4b02      	ldr	r3, [pc, #8]	; (d5e5c <network_disconnect+0xc>)
   d5e54:	681b      	ldr	r3, [r3, #0]
   d5e56:	68db      	ldr	r3, [r3, #12]
   d5e58:	9301      	str	r3, [sp, #4]
   d5e5a:	bd08      	pop	{r3, pc}
   d5e5c:	00030240 	.word	0x00030240

000d5e60 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5e60:	b508      	push	{r3, lr}
   d5e62:	4b02      	ldr	r3, [pc, #8]	; (d5e6c <network_ready+0xc>)
   d5e64:	681b      	ldr	r3, [r3, #0]
   d5e66:	691b      	ldr	r3, [r3, #16]
   d5e68:	9301      	str	r3, [sp, #4]
   d5e6a:	bd08      	pop	{r3, pc}
   d5e6c:	00030240 	.word	0x00030240

000d5e70 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e70:	b508      	push	{r3, lr}
   d5e72:	4b02      	ldr	r3, [pc, #8]	; (d5e7c <network_on+0xc>)
   d5e74:	681b      	ldr	r3, [r3, #0]
   d5e76:	695b      	ldr	r3, [r3, #20]
   d5e78:	9301      	str	r3, [sp, #4]
   d5e7a:	bd08      	pop	{r3, pc}
   d5e7c:	00030240 	.word	0x00030240

000d5e80 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5e80:	b508      	push	{r3, lr}
   d5e82:	4b02      	ldr	r3, [pc, #8]	; (d5e8c <network_off+0xc>)
   d5e84:	681b      	ldr	r3, [r3, #0]
   d5e86:	699b      	ldr	r3, [r3, #24]
   d5e88:	9301      	str	r3, [sp, #4]
   d5e8a:	bd08      	pop	{r3, pc}
   d5e8c:	00030240 	.word	0x00030240

000d5e90 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5e90:	b508      	push	{r3, lr}
   d5e92:	4b02      	ldr	r3, [pc, #8]	; (d5e9c <network_listen+0xc>)
   d5e94:	681b      	ldr	r3, [r3, #0]
   d5e96:	69db      	ldr	r3, [r3, #28]
   d5e98:	9301      	str	r3, [sp, #4]
   d5e9a:	bd08      	pop	{r3, pc}
   d5e9c:	00030240 	.word	0x00030240

000d5ea0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5ea0:	b508      	push	{r3, lr}
   d5ea2:	4b02      	ldr	r3, [pc, #8]	; (d5eac <network_listening+0xc>)
   d5ea4:	681b      	ldr	r3, [r3, #0]
   d5ea6:	6a1b      	ldr	r3, [r3, #32]
   d5ea8:	9301      	str	r3, [sp, #4]
   d5eaa:	bd08      	pop	{r3, pc}
   d5eac:	00030240 	.word	0x00030240

000d5eb0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5eb0:	b508      	push	{r3, lr}
   d5eb2:	4b02      	ldr	r3, [pc, #8]	; (d5ebc <network_set_listen_timeout+0xc>)
   d5eb4:	681b      	ldr	r3, [r3, #0]
   d5eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5eb8:	9301      	str	r3, [sp, #4]
   d5eba:	bd08      	pop	{r3, pc}
   d5ebc:	00030240 	.word	0x00030240

000d5ec0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <network_get_listen_timeout+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	00030240 	.word	0x00030240

000d5ed0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <network_is_on+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	00030240 	.word	0x00030240

000d5ee0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b02      	ldr	r3, [pc, #8]	; (d5eec <network_is_off+0xc>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5ee8:	9301      	str	r3, [sp, #4]
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	00030240 	.word	0x00030240

000d5ef0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5ef0:	b508      	push	{r3, lr}
   d5ef2:	4b02      	ldr	r3, [pc, #8]	; (d5efc <spark_process+0xc>)
   d5ef4:	681b      	ldr	r3, [r3, #0]
   d5ef6:	689b      	ldr	r3, [r3, #8]
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	bd08      	pop	{r3, pc}
   d5efc:	00030244 	.word	0x00030244

000d5f00 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5f00:	b508      	push	{r3, lr}
   d5f02:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <spark_deviceID+0xc>)
   d5f04:	681b      	ldr	r3, [r3, #0]
   d5f06:	69db      	ldr	r3, [r3, #28]
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	bd08      	pop	{r3, pc}
   d5f0c:	00030244 	.word	0x00030244

000d5f10 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5f10:	b508      	push	{r3, lr}
   d5f12:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5f14:	681b      	ldr	r3, [r3, #0]
   d5f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f18:	9301      	str	r3, [sp, #4]
   d5f1a:	bd08      	pop	{r3, pc}
   d5f1c:	00030244 	.word	0x00030244

000d5f20 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5f20:	b508      	push	{r3, lr}
   d5f22:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <malloc+0xc>)
   d5f24:	681b      	ldr	r3, [r3, #0]
   d5f26:	681b      	ldr	r3, [r3, #0]
   d5f28:	9301      	str	r3, [sp, #4]
   d5f2a:	bd08      	pop	{r3, pc}
   d5f2c:	0003021c 	.word	0x0003021c

000d5f30 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5f30:	b508      	push	{r3, lr}
   d5f32:	4b02      	ldr	r3, [pc, #8]	; (d5f3c <free+0xc>)
   d5f34:	681b      	ldr	r3, [r3, #0]
   d5f36:	685b      	ldr	r3, [r3, #4]
   d5f38:	9301      	str	r3, [sp, #4]
   d5f3a:	bd08      	pop	{r3, pc}
   d5f3c:	0003021c 	.word	0x0003021c

000d5f40 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5f40:	b508      	push	{r3, lr}
   d5f42:	4b02      	ldr	r3, [pc, #8]	; (d5f4c <realloc+0xc>)
   d5f44:	681b      	ldr	r3, [r3, #0]
   d5f46:	689b      	ldr	r3, [r3, #8]
   d5f48:	9301      	str	r3, [sp, #4]
   d5f4a:	bd08      	pop	{r3, pc}
   d5f4c:	0003021c 	.word	0x0003021c

000d5f50 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5f50:	b508      	push	{r3, lr}
   d5f52:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <snprintf+0xc>)
   d5f54:	681b      	ldr	r3, [r3, #0]
   d5f56:	69db      	ldr	r3, [r3, #28]
   d5f58:	9301      	str	r3, [sp, #4]
   d5f5a:	bd08      	pop	{r3, pc}
   d5f5c:	0003021c 	.word	0x0003021c

000d5f60 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5f60:	b508      	push	{r3, lr}
   d5f62:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <vsnprintf+0xc>)
   d5f64:	681b      	ldr	r3, [r3, #0]
   d5f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5f68:	9301      	str	r3, [sp, #4]
   d5f6a:	bd08      	pop	{r3, pc}
   d5f6c:	0003021c 	.word	0x0003021c

000d5f70 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5f70:	b508      	push	{r3, lr}
   d5f72:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <__errno+0xc>)
   d5f74:	681b      	ldr	r3, [r3, #0]
   d5f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f78:	9301      	str	r3, [sp, #4]
   d5f7a:	bd08      	pop	{r3, pc}
   d5f7c:	0003021c 	.word	0x0003021c

000d5f80 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5f80:	b508      	push	{r3, lr}
   d5f82:	4b02      	ldr	r3, [pc, #8]	; (d5f8c <newlib_impure_ptr_callback+0xc>)
   d5f84:	681b      	ldr	r3, [r3, #0]
   d5f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5f88:	9301      	str	r3, [sp, #4]
   d5f8a:	bd08      	pop	{r3, pc}
   d5f8c:	0003021c 	.word	0x0003021c

000d5f90 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5f90:	2200      	movs	r2, #0
   d5f92:	6840      	ldr	r0, [r0, #4]
   d5f94:	4611      	mov	r1, r2
   d5f96:	f7ff bf83 	b.w	d5ea0 <network_listening>

000d5f9a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5f9a:	2200      	movs	r2, #0
   d5f9c:	6840      	ldr	r0, [r0, #4]
   d5f9e:	4611      	mov	r1, r2
   d5fa0:	f7ff bf8e 	b.w	d5ec0 <network_get_listen_timeout>

000d5fa4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5fa4:	6840      	ldr	r0, [r0, #4]
   d5fa6:	2200      	movs	r2, #0
   d5fa8:	f7ff bf82 	b.w	d5eb0 <network_set_listen_timeout>

000d5fac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fac:	6840      	ldr	r0, [r0, #4]
   d5fae:	2200      	movs	r2, #0
   d5fb0:	f081 0101 	eor.w	r1, r1, #1
   d5fb4:	f7ff bf6c 	b.w	d5e90 <network_listen>

000d5fb8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5fb8:	2300      	movs	r3, #0
   d5fba:	6840      	ldr	r0, [r0, #4]
   d5fbc:	461a      	mov	r2, r3
   d5fbe:	4619      	mov	r1, r3
   d5fc0:	f7ff bf5e 	b.w	d5e80 <network_off>

000d5fc4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5fc4:	2300      	movs	r3, #0
   d5fc6:	6840      	ldr	r0, [r0, #4]
   d5fc8:	461a      	mov	r2, r3
   d5fca:	4619      	mov	r1, r3
   d5fcc:	f7ff bf50 	b.w	d5e70 <network_on>

000d5fd0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5fd0:	2200      	movs	r2, #0
   d5fd2:	6840      	ldr	r0, [r0, #4]
   d5fd4:	4611      	mov	r1, r2
   d5fd6:	f7ff bf43 	b.w	d5e60 <network_ready>

000d5fda <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5fda:	2200      	movs	r2, #0
   d5fdc:	6840      	ldr	r0, [r0, #4]
   d5fde:	4611      	mov	r1, r2
   d5fe0:	f7ff bf2e 	b.w	d5e40 <network_connecting>

000d5fe4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5fe4:	6840      	ldr	r0, [r0, #4]
   d5fe6:	2200      	movs	r2, #0
   d5fe8:	2102      	movs	r1, #2
   d5fea:	f7ff bf31 	b.w	d5e50 <network_disconnect>

000d5fee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5fee:	2300      	movs	r3, #0
   d5ff0:	6840      	ldr	r0, [r0, #4]
   d5ff2:	461a      	mov	r2, r3
   d5ff4:	f7ff bf1c 	b.w	d5e30 <network_connect>

000d5ff8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ff8:	4b02      	ldr	r3, [pc, #8]	; (d6004 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5ffa:	2203      	movs	r2, #3
   d5ffc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5ffe:	4a02      	ldr	r2, [pc, #8]	; (d6008 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6000:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6002:	4770      	bx	lr
   d6004:	2003e650 	.word	0x2003e650
   d6008:	000d8aa0 	.word	0x000d8aa0

000d600c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d600c:	2100      	movs	r1, #0
   d600e:	f7ff be8b 	b.w	d5d28 <hal_spi_acquire>

000d6012 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d6012:	2100      	movs	r1, #0
   d6014:	f7ff be90 	b.w	d5d38 <hal_spi_release>

000d6018 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6018:	b510      	push	{r4, lr}
   d601a:	4604      	mov	r4, r0
   d601c:	4608      	mov	r0, r1
{
    _spi = spi;
   d601e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6020:	f7ff fe62 	bl	d5ce8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6024:	2300      	movs	r3, #0
   d6026:	6063      	str	r3, [r4, #4]
}
   d6028:	4620      	mov	r0, r4
   d602a:	bd10      	pop	{r4, pc}

000d602c <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
   d602c:	b513      	push	{r0, r1, r4, lr}
   d602e:	4604      	mov	r4, r0
    if (!lock())
   d6030:	7800      	ldrb	r0, [r0, #0]
{
   d6032:	9101      	str	r1, [sp, #4]
    if (!lock())
   d6034:	f7ff ffea 	bl	d600c <_ZN8SPIClass4lockEv.isra.0>
   d6038:	9901      	ldr	r1, [sp, #4]
   d603a:	b940      	cbnz	r0, d604e <_ZN8SPIClass5beginEt+0x22>
    {
        hal_spi_begin(_spi, ss_pin);
   d603c:	7820      	ldrb	r0, [r4, #0]
   d603e:	f7ff fe43 	bl	d5cc8 <hal_spi_begin>
        unlock();
   d6042:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6044:	b002      	add	sp, #8
   d6046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d604a:	f7ff bfe2 	b.w	d6012 <_ZN8SPIClass6unlockEv.isra.0>
}
   d604e:	b002      	add	sp, #8
   d6050:	bd10      	pop	{r4, pc}

000d6052 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6052:	7800      	ldrb	r0, [r0, #0]
   d6054:	f7ff bfdd 	b.w	d6012 <_ZN8SPIClass6unlockEv.isra.0>

000d6058 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6058:	0840      	lsrs	r0, r0, #1
{
   d605a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d605c:	6018      	str	r0, [r3, #0]
   d605e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6060:	6818      	ldr	r0, [r3, #0]
   d6062:	4288      	cmp	r0, r1
   d6064:	b2e5      	uxtb	r5, r4
   d6066:	d906      	bls.n	d6076 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6068:	3401      	adds	r4, #1
   d606a:	2c08      	cmp	r4, #8
   d606c:	d002      	beq.n	d6074 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d606e:	0840      	lsrs	r0, r0, #1
   d6070:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6072:	e7f5      	b.n	d6060 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6074:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6078:	5d5b      	ldrb	r3, [r3, r5]
   d607a:	7013      	strb	r3, [r2, #0]
}
   d607c:	bd30      	pop	{r4, r5, pc}
   d607e:	bf00      	nop
   d6080:	000d8ad4 	.word	0x000d8ad4

000d6084 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6088:	4606      	mov	r6, r0
   d608a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d608c:	7800      	ldrb	r0, [r0, #0]
{
   d608e:	460c      	mov	r4, r1
    CHECK(lock());
   d6090:	f7ff ffbc 	bl	d600c <_ZN8SPIClass4lockEv.isra.0>
   d6094:	2800      	cmp	r0, #0
   d6096:	db1b      	blt.n	d60d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6098:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d609a:	2214      	movs	r2, #20
   d609c:	2100      	movs	r1, #0
   d609e:	a809      	add	r0, sp, #36	; 0x24
   d60a0:	f002 f954 	bl	d834c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d60a4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d60a6:	2200      	movs	r2, #0
   d60a8:	a909      	add	r1, sp, #36	; 0x24
   d60aa:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d60ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d60b0:	f7ff fe2a 	bl	d5d08 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d60b4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d60b8:	b113      	cbz	r3, d60c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d60ba:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d60be:	b155      	cbz	r5, d60d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d60c0:	2700      	movs	r7, #0
   d60c2:	46b9      	mov	r9, r7
   d60c4:	46b8      	mov	r8, r7
   d60c6:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d60c8:	7923      	ldrb	r3, [r4, #4]
   d60ca:	b15d      	cbz	r5, d60e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d60cc:	b1c3      	cbz	r3, d6100 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d60ce:	2000      	movs	r0, #0
}
   d60d0:	b00f      	add	sp, #60	; 0x3c
   d60d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d60d6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d60da:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d60de:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d60e2:	e7f1      	b.n	d60c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d60e4:	2b00      	cmp	r3, #0
   d60e6:	d135      	bne.n	d6154 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d60e8:	68a3      	ldr	r3, [r4, #8]
   d60ea:	4543      	cmp	r3, r8
   d60ec:	d108      	bne.n	d6100 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d60ee:	f88d 9020 	strb.w	r9, [sp, #32]
   d60f2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d60f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d60fa:	89a3      	ldrh	r3, [r4, #12]
   d60fc:	429a      	cmp	r2, r3
   d60fe:	d0e6      	beq.n	d60ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d6100:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6102:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d6104:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d6108:	980a      	ldr	r0, [sp, #40]	; 0x28
   d610a:	ab04      	add	r3, sp, #16
   d610c:	f10d 020f 	add.w	r2, sp, #15
   d6110:	f7ff ffa2 	bl	d6058 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d6114:	7921      	ldrb	r1, [r4, #4]
   d6116:	b985      	cbnz	r5, d613a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d6118:	b989      	cbnz	r1, d613e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d611a:	68a3      	ldr	r3, [r4, #8]
   d611c:	4543      	cmp	r3, r8
   d611e:	d30e      	bcc.n	d613e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d6120:	f88d 9020 	strb.w	r9, [sp, #32]
   d6124:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6128:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d612c:	89a3      	ldrh	r3, [r4, #12]
   d612e:	429a      	cmp	r2, r3
   d6130:	d105      	bne.n	d613e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6132:	9b04      	ldr	r3, [sp, #16]
   d6134:	4543      	cmp	r3, r8
   d6136:	d102      	bne.n	d613e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6138:	e7c9      	b.n	d60ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d613a:	2900      	cmp	r1, #0
   d613c:	d1f9      	bne.n	d6132 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d613e:	2300      	movs	r3, #0
   d6140:	9301      	str	r3, [sp, #4]
   d6142:	7b63      	ldrb	r3, [r4, #13]
   d6144:	9300      	str	r3, [sp, #0]
   d6146:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d614a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d614c:	7830      	ldrb	r0, [r6, #0]
   d614e:	f7ff fde3 	bl	d5d18 <hal_spi_set_settings>
   d6152:	e7bc      	b.n	d60ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d6154:	e9cd 5500 	strd	r5, r5, [sp]
   d6158:	462b      	mov	r3, r5
   d615a:	462a      	mov	r2, r5
   d615c:	2101      	movs	r1, #1
   d615e:	e7f5      	b.n	d614c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d6160 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6160:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6162:	7800      	ldrb	r0, [r0, #0]
   d6164:	f7ff fdb8 	bl	d5cd8 <hal_spi_transfer>
}
   d6168:	b2c0      	uxtb	r0, r0
   d616a:	bd08      	pop	{r3, pc}

000d616c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d616c:	b510      	push	{r4, lr}
   d616e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6170:	6800      	ldr	r0, [r0, #0]
   d6172:	b118      	cbz	r0, d617c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6174:	f7ff fedc 	bl	d5f30 <free>
            wakeupSource_ = nullptr;
   d6178:	2300      	movs	r3, #0
   d617a:	6023      	str	r3, [r4, #0]
        }
    }
   d617c:	bd10      	pop	{r4, pc}

000d617e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d617e:	b510      	push	{r4, lr}
   d6180:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6182:	f7ff fff3 	bl	d616c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6186:	4620      	mov	r0, r4
   d6188:	bd10      	pop	{r4, pc}
	...

000d618c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d618c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d618e:	4b09      	ldr	r3, [pc, #36]	; (d61b4 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6190:	4c09      	ldr	r4, [pc, #36]	; (d61b8 <_GLOBAL__sub_I_System+0x2c>)
   d6192:	2202      	movs	r2, #2
   d6194:	2000      	movs	r0, #0
   d6196:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6198:	4b08      	ldr	r3, [pc, #32]	; (d61bc <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d619a:	6020      	str	r0, [r4, #0]
   d619c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d619e:	71a0      	strb	r0, [r4, #6]
   d61a0:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d61a2:	f7ff fe19 	bl	d5dd8 <set_system_mode>
SystemClass System;
   d61a6:	4620      	mov	r0, r4
   d61a8:	4a05      	ldr	r2, [pc, #20]	; (d61c0 <_GLOBAL__sub_I_System+0x34>)
   d61aa:	4906      	ldr	r1, [pc, #24]	; (d61c4 <_GLOBAL__sub_I_System+0x38>)
   d61ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d61b0:	f001 b97c 	b.w	d74ac <__aeabi_atexit>
   d61b4:	2003e664 	.word	0x2003e664
   d61b8:	2003e658 	.word	0x2003e658
   d61bc:	ffff0000 	.word	0xffff0000
   d61c0:	2003e558 	.word	0x2003e558
   d61c4:	000d617f 	.word	0x000d617f

000d61c8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d61c8:	b510      	push	{r4, lr}
   d61ca:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d61cc:	f002 f8f4 	bl	d83b8 <strlen>
   d61d0:	3801      	subs	r0, #1
   d61d2:	1823      	adds	r3, r4, r0
   d61d4:	4620      	mov	r0, r4
	while(i<j){
   d61d6:	4283      	cmp	r3, r0
   d61d8:	d906      	bls.n	d61e8 <_Z11str_reversePc+0x20>
		c = *i;
   d61da:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d61dc:	7819      	ldrb	r1, [r3, #0]
   d61de:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d61e2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d61e6:	e7f6      	b.n	d61d6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d61e8:	bd10      	pop	{r4, pc}

000d61ea <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d61ea:	b570      	push	{r4, r5, r6, lr}
   d61ec:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d61ee:	1e91      	subs	r1, r2, #2
   d61f0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d61f2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d61f4:	d822      	bhi.n	d623c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d61f6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d61f8:	b16d      	cbz	r5, d6216 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d61fa:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d61fe:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6202:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6204:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6206:	bf94      	ite	ls
   d6208:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d620a:	3157      	addhi	r1, #87	; 0x57
   d620c:	b2c9      	uxtb	r1, r1
   d620e:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6212:	4635      	mov	r5, r6
	while(a){
   d6214:	e7f0      	b.n	d61f8 <ultoa+0xe>
   d6216:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6218:	4423      	add	r3, r4
            *ptr++ = '0';
   d621a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d621c:	4293      	cmp	r3, r2
   d621e:	d902      	bls.n	d6226 <ultoa+0x3c>
            *ptr++ = '0';
   d6220:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6224:	e7fa      	b.n	d621c <ultoa+0x32>
   d6226:	1a1a      	subs	r2, r3, r0
   d6228:	4283      	cmp	r3, r0
   d622a:	bf38      	it	cc
   d622c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d622e:	2300      	movs	r3, #0
   d6230:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6232:	4620      	mov	r0, r4
   d6234:	f7ff ffc8 	bl	d61c8 <_Z11str_reversePc>
	return buffer;
   d6238:	4620      	mov	r0, r4
}
   d623a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d623c:	2000      	movs	r0, #0
   d623e:	e7fc      	b.n	d623a <ultoa+0x50>

000d6240 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d6240:	b570      	push	{r4, r5, r6, lr}
   d6242:	b086      	sub	sp, #24
   d6244:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d6246:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d6248:	4668      	mov	r0, sp
   d624a:	f000 fb17 	bl	d687c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d624e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6250:	1d34      	adds	r4, r6, #4
   d6252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6254:	682b      	ldr	r3, [r5, #0]
   d6256:	7023      	strb	r3, [r4, #0]
    }
   d6258:	4630      	mov	r0, r6
   d625a:	b006      	add	sp, #24
   d625c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6260 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6264:	ec57 6b10 	vmov	r6, r7, d0
   d6268:	4680      	mov	r8, r0
   d626a:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d626c:	ee10 0a10 	vmov	r0, s0
   d6270:	2200      	movs	r2, #0
   d6272:	2300      	movs	r3, #0
   d6274:	4639      	mov	r1, r7
   d6276:	f001 fe63 	bl	d7f40 <__aeabi_dcmplt>
   d627a:	b128      	cbz	r0, d6288 <_Z4dtoadhPc+0x28>
        val = -val;
   d627c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d6280:	461f      	mov	r7, r3
        *sout++ = '-';
   d6282:	232d      	movs	r3, #45	; 0x2d
   d6284:	f804 3b01 	strb.w	r3, [r4], #1
   d6288:	2300      	movs	r3, #0
    }
    long scale = 1;
   d628a:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d628e:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d6290:	b2d9      	uxtb	r1, r3
   d6292:	4588      	cmp	r8, r1
   d6294:	d903      	bls.n	d629e <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d6296:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d629a:	3301      	adds	r3, #1
   d629c:	e7f8      	b.n	d6290 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d629e:	4648      	mov	r0, r9
   d62a0:	f001 fb72 	bl	d7988 <__aeabi_i2d>
   d62a4:	4632      	mov	r2, r6
   d62a6:	463b      	mov	r3, r7
   d62a8:	f001 fbd8 	bl	d7a5c <__aeabi_dmul>
   d62ac:	4606      	mov	r6, r0
   d62ae:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d62b0:	f001 fea6 	bl	d8000 <__aeabi_d2ulz>
   d62b4:	4605      	mov	r5, r0
   d62b6:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d62b8:	f001 fb9a 	bl	d79f0 <__aeabi_ul2d>
   d62bc:	4602      	mov	r2, r0
   d62be:	460b      	mov	r3, r1
   d62c0:	4630      	mov	r0, r6
   d62c2:	4639      	mov	r1, r7
   d62c4:	f001 fa12 	bl	d76ec <__aeabi_dsub>
   d62c8:	4b13      	ldr	r3, [pc, #76]	; (d6318 <_Z4dtoadhPc+0xb8>)
   d62ca:	2200      	movs	r2, #0
   d62cc:	f001 fe4c 	bl	d7f68 <__aeabi_dcmpge>
   d62d0:	b110      	cbz	r0, d62d8 <_Z4dtoadhPc+0x78>
        fixed++;
   d62d2:	3501      	adds	r5, #1
   d62d4:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d62d8:	464a      	mov	r2, r9
   d62da:	4628      	mov	r0, r5
   d62dc:	17d3      	asrs	r3, r2, #31
   d62de:	4651      	mov	r1, sl
   d62e0:	f001 fe76 	bl	d7fd0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d62e4:	2301      	movs	r3, #1
   d62e6:	4615      	mov	r5, r2
   d62e8:	4621      	mov	r1, r4
   d62ea:	220a      	movs	r2, #10
   d62ec:	f7ff ff7d 	bl	d61ea <ultoa>
    if (prec) {
   d62f0:	f1b8 0f00 	cmp.w	r8, #0
   d62f4:	d00d      	beq.n	d6312 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d62f6:	4620      	mov	r0, r4
   d62f8:	f002 f85e 	bl	d83b8 <strlen>
        *sout++ = '.';
   d62fc:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d62fe:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d6300:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d6302:	220a      	movs	r2, #10
   d6304:	4643      	mov	r3, r8
   d6306:	4628      	mov	r0, r5
   d6308:	3101      	adds	r1, #1
    }
}
   d630a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d630e:	f7ff bf6c 	b.w	d61ea <ultoa>
}
   d6312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6316:	bf00      	nop
   d6318:	3fe00000 	.word	0x3fe00000

000d631c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d631c:	b510      	push	{r4, lr}
   d631e:	4604      	mov	r4, r0
{
	free(buffer);
   d6320:	6800      	ldr	r0, [r0, #0]
   d6322:	f7ff fe05 	bl	d5f30 <free>
}
   d6326:	4620      	mov	r0, r4
   d6328:	bd10      	pop	{r4, pc}

000d632a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d632a:	b510      	push	{r4, lr}
   d632c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d632e:	6800      	ldr	r0, [r0, #0]
   d6330:	b108      	cbz	r0, d6336 <_ZN6String10invalidateEv+0xc>
   d6332:	f7ff fdfd 	bl	d5f30 <free>
	buffer = NULL;
   d6336:	2300      	movs	r3, #0
	capacity = len = 0;
   d6338:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d633c:	6023      	str	r3, [r4, #0]
}
   d633e:	bd10      	pop	{r4, pc}

000d6340 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6340:	b538      	push	{r3, r4, r5, lr}
   d6342:	4604      	mov	r4, r0
   d6344:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6346:	6800      	ldr	r0, [r0, #0]
   d6348:	3101      	adds	r1, #1
   d634a:	f7ff fdf9 	bl	d5f40 <realloc>
	if (newbuffer) {
   d634e:	b110      	cbz	r0, d6356 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6350:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6354:	2001      	movs	r0, #1
	}
	return 0;
}
   d6356:	bd38      	pop	{r3, r4, r5, pc}

000d6358 <_ZN6String7reserveEj>:
{
   d6358:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d635a:	6803      	ldr	r3, [r0, #0]
{
   d635c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d635e:	b123      	cbz	r3, d636a <_ZN6String7reserveEj+0x12>
   d6360:	6843      	ldr	r3, [r0, #4]
   d6362:	428b      	cmp	r3, r1
   d6364:	d301      	bcc.n	d636a <_ZN6String7reserveEj+0x12>
   d6366:	2001      	movs	r0, #1
}
   d6368:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d636a:	4620      	mov	r0, r4
   d636c:	f7ff ffe8 	bl	d6340 <_ZN6String12changeBufferEj>
   d6370:	2800      	cmp	r0, #0
   d6372:	d0f9      	beq.n	d6368 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6374:	68a3      	ldr	r3, [r4, #8]
   d6376:	2b00      	cmp	r3, #0
   d6378:	d1f5      	bne.n	d6366 <_ZN6String7reserveEj+0xe>
   d637a:	6822      	ldr	r2, [r4, #0]
   d637c:	7013      	strb	r3, [r2, #0]
   d637e:	e7f2      	b.n	d6366 <_ZN6String7reserveEj+0xe>

000d6380 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6380:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6382:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6384:	4611      	mov	r1, r2
   d6386:	9201      	str	r2, [sp, #4]
{
   d6388:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d638a:	f7ff ffe5 	bl	d6358 <_ZN6String7reserveEj>
   d638e:	9a01      	ldr	r2, [sp, #4]
   d6390:	b928      	cbnz	r0, d639e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6392:	4620      	mov	r0, r4
   d6394:	f7ff ffc9 	bl	d632a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6398:	4620      	mov	r0, r4
   d639a:	b003      	add	sp, #12
   d639c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d639e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d63a0:	4629      	mov	r1, r5
   d63a2:	6820      	ldr	r0, [r4, #0]
   d63a4:	f001 ffc4 	bl	d8330 <memcpy>
	buffer[len] = 0;
   d63a8:	6822      	ldr	r2, [r4, #0]
   d63aa:	68a3      	ldr	r3, [r4, #8]
   d63ac:	2100      	movs	r1, #0
   d63ae:	54d1      	strb	r1, [r2, r3]
	return *this;
   d63b0:	e7f2      	b.n	d6398 <_ZN6String4copyEPKcj+0x18>

000d63b2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d63b2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d63b4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d63b6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d63ba:	4604      	mov	r4, r0
	len = 0;
   d63bc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d63be:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d63c0:	b141      	cbz	r1, d63d4 <_ZN6StringC1EPKc+0x22>
   d63c2:	4608      	mov	r0, r1
   d63c4:	9101      	str	r1, [sp, #4]
   d63c6:	f001 fff7 	bl	d83b8 <strlen>
   d63ca:	9901      	ldr	r1, [sp, #4]
   d63cc:	4602      	mov	r2, r0
   d63ce:	4620      	mov	r0, r4
   d63d0:	f7ff ffd6 	bl	d6380 <_ZN6String4copyEPKcj>
}
   d63d4:	4620      	mov	r0, r4
   d63d6:	b002      	add	sp, #8
   d63d8:	bd10      	pop	{r4, pc}

000d63da <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d63da:	b513      	push	{r0, r1, r4, lr}
   d63dc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d63de:	b159      	cbz	r1, d63f8 <_ZN6StringaSEPKc+0x1e>
   d63e0:	4608      	mov	r0, r1
   d63e2:	9101      	str	r1, [sp, #4]
   d63e4:	f001 ffe8 	bl	d83b8 <strlen>
   d63e8:	9901      	ldr	r1, [sp, #4]
   d63ea:	4602      	mov	r2, r0
   d63ec:	4620      	mov	r0, r4
   d63ee:	f7ff ffc7 	bl	d6380 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d63f2:	4620      	mov	r0, r4
   d63f4:	b002      	add	sp, #8
   d63f6:	bd10      	pop	{r4, pc}
	else invalidate();
   d63f8:	f7ff ff97 	bl	d632a <_ZN6String10invalidateEv>
   d63fc:	e7f9      	b.n	d63f2 <_ZN6StringaSEPKc+0x18>

000d63fe <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d63fe:	b510      	push	{r4, lr}
   d6400:	4604      	mov	r4, r0
   d6402:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6404:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d6406:	4608      	mov	r0, r1
	capacity = 0;
   d6408:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d640c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d640e:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d6410:	a901      	add	r1, sp, #4
   d6412:	b2c0      	uxtb	r0, r0
   d6414:	f7ff ff24 	bl	d6260 <_Z4dtoadhPc>
        *this = buf;
   d6418:	a901      	add	r1, sp, #4
   d641a:	4620      	mov	r0, r4
   d641c:	f7ff ffdd 	bl	d63da <_ZN6StringaSEPKc>
}
   d6420:	4620      	mov	r0, r4
   d6422:	b00a      	add	sp, #40	; 0x28
   d6424:	bd10      	pop	{r4, pc}

000d6426 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6426:	b510      	push	{r4, lr}
   d6428:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d642a:	6800      	ldr	r0, [r0, #0]
   d642c:	b108      	cbz	r0, d6432 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d642e:	f7ff fb83 	bl	d5b38 <os_mutex_recursive_destroy>
    }
   d6432:	4620      	mov	r0, r4
   d6434:	bd10      	pop	{r4, pc}

000d6436 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6436:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6438:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d643a:	4604      	mov	r4, r0
      if (_M_manager)
   d643c:	b113      	cbz	r3, d6444 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d643e:	2203      	movs	r2, #3
   d6440:	4601      	mov	r1, r0
   d6442:	4798      	blx	r3
    }
   d6444:	4620      	mov	r0, r4
   d6446:	bd10      	pop	{r4, pc}

000d6448 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d6448:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d644a:	4c06      	ldr	r4, [pc, #24]	; (d6464 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d644c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d644e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6450:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6452:	f7ff fb69 	bl	d5b28 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6456:	4620      	mov	r0, r4
   d6458:	4a03      	ldr	r2, [pc, #12]	; (d6468 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d645a:	4904      	ldr	r1, [pc, #16]	; (d646c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d645c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6460:	f001 b824 	b.w	d74ac <__aeabi_atexit>
   d6464:	2003e668 	.word	0x2003e668
   d6468:	2003e558 	.word	0x2003e558
   d646c:	000d6427 	.word	0x000d6427

000d6470 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6472:	4606      	mov	r6, r0
   d6474:	460d      	mov	r5, r1
  size_t n = 0;
   d6476:	188f      	adds	r7, r1, r2
   d6478:	2400      	movs	r4, #0
  while (size--) {
   d647a:	42bd      	cmp	r5, r7
   d647c:	d00c      	beq.n	d6498 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d647e:	6833      	ldr	r3, [r6, #0]
   d6480:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6484:	689b      	ldr	r3, [r3, #8]
   d6486:	4630      	mov	r0, r6
   d6488:	4798      	blx	r3
     if (chunk>=0)
   d648a:	1e03      	subs	r3, r0, #0
   d648c:	db01      	blt.n	d6492 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d648e:	441c      	add	r4, r3
  while (size--) {
   d6490:	e7f3      	b.n	d647a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6492:	2c00      	cmp	r4, #0
   d6494:	bf08      	it	eq
   d6496:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6498:	4620      	mov	r0, r4
   d649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d649c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d649c:	b513      	push	{r0, r1, r4, lr}
   d649e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d64a0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d64a2:	b159      	cbz	r1, d64bc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d64a4:	9101      	str	r1, [sp, #4]
   d64a6:	f001 ff87 	bl	d83b8 <strlen>
   d64aa:	6823      	ldr	r3, [r4, #0]
   d64ac:	9901      	ldr	r1, [sp, #4]
   d64ae:	68db      	ldr	r3, [r3, #12]
   d64b0:	4602      	mov	r2, r0
   d64b2:	4620      	mov	r0, r4
    }
   d64b4:	b002      	add	sp, #8
   d64b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d64ba:	4718      	bx	r3
    }
   d64bc:	b002      	add	sp, #8
   d64be:	bd10      	pop	{r4, pc}

000d64c0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d64c0:	b508      	push	{r3, lr}
  return write(str);
   d64c2:	f7ff ffeb 	bl	d649c <_ZN5Print5writeEPKc>
}
   d64c6:	bd08      	pop	{r3, pc}

000d64c8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d64c8:	6803      	ldr	r3, [r0, #0]
   d64ca:	689b      	ldr	r3, [r3, #8]
   d64cc:	4718      	bx	r3

000d64ce <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64ce:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d64d0:	210d      	movs	r1, #13
{
   d64d2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d64d4:	f7ff fff8 	bl	d64c8 <_ZN5Print5printEc>
  n += print('\n');
   d64d8:	210a      	movs	r1, #10
  size_t n = print('\r');
   d64da:	4604      	mov	r4, r0
  n += print('\n');
   d64dc:	4628      	mov	r0, r5
   d64de:	f7ff fff3 	bl	d64c8 <_ZN5Print5printEc>
  return n;
}
   d64e2:	4420      	add	r0, r4
   d64e4:	bd38      	pop	{r3, r4, r5, pc}

000d64e6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d64e6:	b538      	push	{r3, r4, r5, lr}
   d64e8:	4605      	mov	r5, r0
  return write(str);
   d64ea:	f7ff ffd7 	bl	d649c <_ZN5Print5writeEPKc>
   d64ee:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d64f0:	4628      	mov	r0, r5
   d64f2:	f7ff ffec 	bl	d64ce <_ZN5Print7printlnEv>
  return n;
}
   d64f6:	4420      	add	r0, r4
   d64f8:	bd38      	pop	{r3, r4, r5, pc}

000d64fa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d64fa:	b530      	push	{r4, r5, lr}
   d64fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d64fe:	2300      	movs	r3, #0
   d6500:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6504:	2a01      	cmp	r2, #1
   d6506:	bf98      	it	ls
   d6508:	220a      	movls	r2, #10
   d650a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d650c:	460d      	mov	r5, r1
   d650e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6512:	fb01 5312 	mls	r3, r1, r2, r5
   d6516:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d651a:	2b09      	cmp	r3, #9
   d651c:	bf94      	ite	ls
   d651e:	3330      	addls	r3, #48	; 0x30
   d6520:	3337      	addhi	r3, #55	; 0x37
   d6522:	b2db      	uxtb	r3, r3
  } while(n);
   d6524:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6526:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d652a:	d9ef      	bls.n	d650c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d652c:	4621      	mov	r1, r4
   d652e:	f7ff ffb5 	bl	d649c <_ZN5Print5writeEPKc>
}
   d6532:	b00b      	add	sp, #44	; 0x2c
   d6534:	bd30      	pop	{r4, r5, pc}

000d6536 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d653a:	b086      	sub	sp, #24
   d653c:	af00      	add	r7, sp, #0
   d653e:	4605      	mov	r5, r0
   d6540:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6542:	1d38      	adds	r0, r7, #4
   d6544:	2114      	movs	r1, #20
{
   d6546:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6548:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d654a:	f7ff fd09 	bl	d5f60 <vsnprintf>

    if (n<bufsize)
   d654e:	2813      	cmp	r0, #19
   d6550:	d80e      	bhi.n	d6570 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6552:	1d39      	adds	r1, r7, #4
   d6554:	4628      	mov	r0, r5
   d6556:	f7ff ffa1 	bl	d649c <_ZN5Print5writeEPKc>
   d655a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d655c:	b11e      	cbz	r6, d6566 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d655e:	4628      	mov	r0, r5
   d6560:	f7ff ffb5 	bl	d64ce <_ZN5Print7printlnEv>
   d6564:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6566:	4620      	mov	r0, r4
   d6568:	3718      	adds	r7, #24
   d656a:	46bd      	mov	sp, r7
   d656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6570:	f100 0308 	add.w	r3, r0, #8
   d6574:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6578:	46e8      	mov	r8, sp
        char bigger[n+1];
   d657a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d657e:	4622      	mov	r2, r4
   d6580:	1c41      	adds	r1, r0, #1
   d6582:	683b      	ldr	r3, [r7, #0]
   d6584:	4668      	mov	r0, sp
   d6586:	f7ff fceb 	bl	d5f60 <vsnprintf>
  return write(str);
   d658a:	4669      	mov	r1, sp
   d658c:	4628      	mov	r0, r5
   d658e:	f7ff ff85 	bl	d649c <_ZN5Print5writeEPKc>
   d6592:	4604      	mov	r4, r0
   d6594:	46c5      	mov	sp, r8
   d6596:	e7e1      	b.n	d655c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6598 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6598:	b510      	push	{r4, lr}
   d659a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d659c:	f7ff faa4 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d65a0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d65a2:	6823      	ldr	r3, [r4, #0]
   d65a4:	4620      	mov	r0, r4
   d65a6:	695b      	ldr	r3, [r3, #20]
   d65a8:	4798      	blx	r3
    if (c >= 0) return c;
   d65aa:	2800      	cmp	r0, #0
   d65ac:	da08      	bge.n	d65c0 <_ZN6Stream9timedReadEv+0x28>
   d65ae:	f7ff fa9b 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d65b2:	68e3      	ldr	r3, [r4, #12]
   d65b4:	1ac0      	subs	r0, r0, r3
   d65b6:	68a3      	ldr	r3, [r4, #8]
   d65b8:	4298      	cmp	r0, r3
   d65ba:	d3f2      	bcc.n	d65a2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d65bc:	f04f 30ff 	mov.w	r0, #4294967295
}
   d65c0:	bd10      	pop	{r4, pc}

000d65c2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   d65c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65c4:	4606      	mov	r6, r0
   d65c6:	460d      	mov	r5, r1
   d65c8:	4617      	mov	r7, r2
  size_t count = 0;
   d65ca:	2400      	movs	r4, #0
  while (count < length) {
   d65cc:	42bc      	cmp	r4, r7
   d65ce:	d007      	beq.n	d65e0 <_ZN6Stream9readBytesEPcj+0x1e>
    int c = timedRead();
   d65d0:	4630      	mov	r0, r6
   d65d2:	f7ff ffe1 	bl	d6598 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   d65d6:	1e03      	subs	r3, r0, #0
   d65d8:	db02      	blt.n	d65e0 <_ZN6Stream9readBytesEPcj+0x1e>
    *buffer++ = (char)c;
   d65da:	552b      	strb	r3, [r5, r4]
    count++;
   d65dc:	3401      	adds	r4, #1
  while (count < length) {
   d65de:	e7f5      	b.n	d65cc <_ZN6Stream9readBytesEPcj+0xa>
  }
  return count;
}
   d65e0:	4620      	mov	r0, r4
   d65e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d65e4 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d65e4:	2300      	movs	r3, #0
   d65e6:	6840      	ldr	r0, [r0, #4]
   d65e8:	461a      	mov	r2, r3
   d65ea:	4619      	mov	r1, r3
   d65ec:	f7ff bc40 	b.w	d5e70 <network_on>

000d65f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d65f0:	4b01      	ldr	r3, [pc, #4]	; (d65f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d65f2:	4a02      	ldr	r2, [pc, #8]	; (d65fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d65f4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d65f6:	4770      	bx	lr
   d65f8:	2003e66c 	.word	0x2003e66c
   d65fc:	000d8ae4 	.word	0x000d8ae4

000d6600 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6600:	4b02      	ldr	r3, [pc, #8]	; (d660c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6602:	681a      	ldr	r2, [r3, #0]
   d6604:	4b02      	ldr	r3, [pc, #8]	; (d6610 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6606:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6608:	4770      	bx	lr
   d660a:	bf00      	nop
   d660c:	2003e4f0 	.word	0x2003e4f0
   d6610:	2003e670 	.word	0x2003e670

000d6614 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6614:	2100      	movs	r1, #0
   d6616:	f7ff bbe7 	b.w	d5de8 <system_delay_ms>

000d661a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d661a:	b510      	push	{r4, lr}
   d661c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d661e:	f7ff ff0a 	bl	d6436 <_ZNSt14_Function_baseD1Ev>
   d6622:	4620      	mov	r0, r4
   d6624:	bd10      	pop	{r4, pc}
	...

000d6628 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6628:	4803      	ldr	r0, [pc, #12]	; (d6638 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d662a:	4a04      	ldr	r2, [pc, #16]	; (d663c <_GLOBAL__sub_I_RGB+0x14>)
   d662c:	4904      	ldr	r1, [pc, #16]	; (d6640 <_GLOBAL__sub_I_RGB+0x18>)
   d662e:	2300      	movs	r3, #0
   d6630:	6083      	str	r3, [r0, #8]
   d6632:	f000 bf3b 	b.w	d74ac <__aeabi_atexit>
   d6636:	bf00      	nop
   d6638:	2003e674 	.word	0x2003e674
   d663c:	2003e558 	.word	0x2003e558
   d6640:	000d661b 	.word	0x000d661b

000d6644 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6644:	4b01      	ldr	r3, [pc, #4]	; (d664c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6646:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6648:	4770      	bx	lr
   d664a:	bf00      	nop
   d664c:	2003e4f4 	.word	0x2003e4f4

000d6650 <serialEventRun>:
{
   d6650:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6652:	4b0b      	ldr	r3, [pc, #44]	; (d6680 <serialEventRun+0x30>)
   d6654:	b143      	cbz	r3, d6668 <serialEventRun+0x18>
   d6656:	f000 f97d 	bl	d6954 <_Z16_fetch_usbserialv>
   d665a:	6803      	ldr	r3, [r0, #0]
   d665c:	691b      	ldr	r3, [r3, #16]
   d665e:	4798      	blx	r3
   d6660:	2800      	cmp	r0, #0
   d6662:	dd01      	ble.n	d6668 <serialEventRun+0x18>
        serialEvent();
   d6664:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6668:	4b06      	ldr	r3, [pc, #24]	; (d6684 <serialEventRun+0x34>)
   d666a:	b143      	cbz	r3, d667e <serialEventRun+0x2e>
   d666c:	f000 f9f0 	bl	d6a50 <_Z22__fetch_global_Serial1v>
   d6670:	6803      	ldr	r3, [r0, #0]
   d6672:	691b      	ldr	r3, [r3, #16]
   d6674:	4798      	blx	r3
   d6676:	2800      	cmp	r0, #0
   d6678:	dd01      	ble.n	d667e <serialEventRun+0x2e>
        serialEvent1();
   d667a:	f3af 8000 	nop.w
}
   d667e:	bd08      	pop	{r3, pc}
	...

000d6688 <_post_loop>:
{
   d6688:	b508      	push	{r3, lr}
	serialEventRun();
   d668a:	f7ff ffe1 	bl	d6650 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d668e:	f7ff fa2b 	bl	d5ae8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6692:	4b01      	ldr	r3, [pc, #4]	; (d6698 <_post_loop+0x10>)
   d6694:	6018      	str	r0, [r3, #0]
}
   d6696:	bd08      	pop	{r3, pc}
   d6698:	2003e7d4 	.word	0x2003e7d4

000d669c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d669c:	4802      	ldr	r0, [pc, #8]	; (d66a8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d669e:	4a03      	ldr	r2, [pc, #12]	; (d66ac <_Z33system_initialize_user_backup_ramv+0x10>)
   d66a0:	4903      	ldr	r1, [pc, #12]	; (d66b0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d66a2:	1a12      	subs	r2, r2, r0
   d66a4:	f001 be44 	b.w	d8330 <memcpy>
   d66a8:	2003f400 	.word	0x2003f400
   d66ac:	2003f404 	.word	0x2003f404
   d66b0:	000d8ec8 	.word	0x000d8ec8

000d66b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d66b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d66b6:	2300      	movs	r3, #0
   d66b8:	9300      	str	r3, [sp, #0]
   d66ba:	461a      	mov	r2, r3
   d66bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66c0:	f7ff fbac 	bl	d5e1c <system_ctrl_set_result>
}
   d66c4:	b003      	add	sp, #12
   d66c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d66cc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d66cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d66ce:	8843      	ldrh	r3, [r0, #2]
   d66d0:	2b0a      	cmp	r3, #10
   d66d2:	d008      	beq.n	d66e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d66d4:	2b50      	cmp	r3, #80	; 0x50
   d66d6:	d10b      	bne.n	d66f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d66d8:	4b09      	ldr	r3, [pc, #36]	; (d6700 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d66da:	681b      	ldr	r3, [r3, #0]
   d66dc:	b14b      	cbz	r3, d66f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d66de:	b003      	add	sp, #12
   d66e0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d66e4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d66e6:	f7ff ffe5 	bl	d66b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d66ea:	b003      	add	sp, #12
   d66ec:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d66f0:	2300      	movs	r3, #0
   d66f2:	9300      	str	r3, [sp, #0]
   d66f4:	461a      	mov	r2, r3
   d66f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d66fa:	f7ff fb8f 	bl	d5e1c <system_ctrl_set_result>
}
   d66fe:	e7f4      	b.n	d66ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6700:	2003e688 	.word	0x2003e688

000d6704 <module_user_init_hook>:
{
   d6704:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6706:	4c12      	ldr	r4, [pc, #72]	; (d6750 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6708:	4812      	ldr	r0, [pc, #72]	; (d6754 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d670a:	4d13      	ldr	r5, [pc, #76]	; (d6758 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d670c:	2100      	movs	r1, #0
   d670e:	f7ff fc37 	bl	d5f80 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6712:	6823      	ldr	r3, [r4, #0]
   d6714:	42ab      	cmp	r3, r5
   d6716:	4b11      	ldr	r3, [pc, #68]	; (d675c <module_user_init_hook+0x58>)
   d6718:	bf0c      	ite	eq
   d671a:	2201      	moveq	r2, #1
   d671c:	2200      	movne	r2, #0
   d671e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6720:	d002      	beq.n	d6728 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6722:	f7ff ffbb 	bl	d669c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6726:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6728:	f7ff f9ce 	bl	d5ac8 <HAL_RNG_GetRandomNumber>
   d672c:	4604      	mov	r4, r0
    srand(seed);
   d672e:	f001 fe15 	bl	d835c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6732:	4b0b      	ldr	r3, [pc, #44]	; (d6760 <module_user_init_hook+0x5c>)
   d6734:	b113      	cbz	r3, d673c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6736:	4620      	mov	r0, r4
   d6738:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d673c:	2100      	movs	r1, #0
   d673e:	4808      	ldr	r0, [pc, #32]	; (d6760 <module_user_init_hook+0x5c>)
   d6740:	f7ff fbe6 	bl	d5f10 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6748:	4806      	ldr	r0, [pc, #24]	; (d6764 <module_user_init_hook+0x60>)
   d674a:	2100      	movs	r1, #0
   d674c:	f7ff bb5c 	b.w	d5e08 <system_ctrl_set_app_request_handler>
   d6750:	2003f400 	.word	0x2003f400
   d6754:	000d6645 	.word	0x000d6645
   d6758:	9a271c1e 	.word	0x9a271c1e
   d675c:	2003e684 	.word	0x2003e684
   d6760:	00000000 	.word	0x00000000
   d6764:	000d66cd 	.word	0x000d66cd

000d6768 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d6768:	4770      	bx	lr

000d676a <_ZN9IPAddressD0Ev>:
   d676a:	b510      	push	{r4, lr}
   d676c:	2118      	movs	r1, #24
   d676e:	4604      	mov	r4, r0
   d6770:	f000 fea1 	bl	d74b6 <_ZdlPvj>
   d6774:	4620      	mov	r0, r4
   d6776:	bd10      	pop	{r4, pc}

000d6778 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6778:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d677a:	7d03      	ldrb	r3, [r0, #20]
   d677c:	2b06      	cmp	r3, #6
{
   d677e:	b08d      	sub	sp, #52	; 0x34
   d6780:	460e      	mov	r6, r1
   d6782:	f100 0704 	add.w	r7, r0, #4
   d6786:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d678a:	d012      	beq.n	d67b2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d678c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6790:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6794:	220a      	movs	r2, #10
   d6796:	4630      	mov	r0, r6
   d6798:	f7ff feaf 	bl	d64fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d679c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d679e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d67a0:	d019      	beq.n	d67d6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d67a2:	2c00      	cmp	r4, #0
   d67a4:	d0f4      	beq.n	d6790 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d67a6:	212e      	movs	r1, #46	; 0x2e
   d67a8:	4630      	mov	r0, r6
   d67aa:	f7ff fe8d 	bl	d64c8 <_ZN5Print5printEc>
   d67ae:	4404      	add	r4, r0
   d67b0:	e7ee      	b.n	d6790 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d67b2:	232f      	movs	r3, #47	; 0x2f
   d67b4:	466a      	mov	r2, sp
   d67b6:	4639      	mov	r1, r7
   d67b8:	200a      	movs	r0, #10
		buf[0] = 0;
   d67ba:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d67be:	f7ff f9c3 	bl	d5b48 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d67c2:	4668      	mov	r0, sp
   d67c4:	f001 fdf8 	bl	d83b8 <strlen>
   d67c8:	6833      	ldr	r3, [r6, #0]
   d67ca:	4602      	mov	r2, r0
   d67cc:	68db      	ldr	r3, [r3, #12]
   d67ce:	4669      	mov	r1, sp
   d67d0:	4630      	mov	r0, r6
   d67d2:	4798      	blx	r3
   d67d4:	4604      	mov	r4, r0
    }
    return n;
}
   d67d6:	4620      	mov	r0, r4
   d67d8:	b00d      	add	sp, #52	; 0x34
   d67da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d67dc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d67dc:	b510      	push	{r4, lr}
   d67de:	4b05      	ldr	r3, [pc, #20]	; (d67f4 <_ZN9IPAddressC1Ev+0x18>)
   d67e0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d67e2:	2211      	movs	r2, #17
   d67e4:	f840 3b04 	str.w	r3, [r0], #4
   d67e8:	2100      	movs	r1, #0
   d67ea:	f001 fdaf 	bl	d834c <memset>
}
   d67ee:	4620      	mov	r0, r4
   d67f0:	bd10      	pop	{r4, pc}
   d67f2:	bf00      	nop
   d67f4:	000d8b0c 	.word	0x000d8b0c

000d67f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d67f8:	4603      	mov	r3, r0
   d67fa:	4a07      	ldr	r2, [pc, #28]	; (d6818 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d67fc:	b510      	push	{r4, lr}
   d67fe:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6802:	f101 0210 	add.w	r2, r1, #16
   d6806:	f851 4b04 	ldr.w	r4, [r1], #4
   d680a:	f843 4b04 	str.w	r4, [r3], #4
   d680e:	4291      	cmp	r1, r2
   d6810:	d1f9      	bne.n	d6806 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6812:	780a      	ldrb	r2, [r1, #0]
   d6814:	701a      	strb	r2, [r3, #0]
}
   d6816:	bd10      	pop	{r4, pc}
   d6818:	000d8b0c 	.word	0x000d8b0c

000d681c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d681c:	7d03      	ldrb	r3, [r0, #20]
   d681e:	2b04      	cmp	r3, #4
   d6820:	d104      	bne.n	d682c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d6822:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6824:	3800      	subs	r0, #0
   d6826:	bf18      	it	ne
   d6828:	2001      	movne	r0, #1
   d682a:	4770      	bx	lr
    } else if (version() == 6) {
   d682c:	2b06      	cmp	r3, #6
   d682e:	d107      	bne.n	d6840 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6830:	6843      	ldr	r3, [r0, #4]
   d6832:	b93b      	cbnz	r3, d6844 <_ZNK9IPAddresscvbEv+0x28>
   d6834:	6883      	ldr	r3, [r0, #8]
   d6836:	b92b      	cbnz	r3, d6844 <_ZNK9IPAddresscvbEv+0x28>
   d6838:	68c3      	ldr	r3, [r0, #12]
   d683a:	b91b      	cbnz	r3, d6844 <_ZNK9IPAddresscvbEv+0x28>
   d683c:	6900      	ldr	r0, [r0, #16]
   d683e:	e7f1      	b.n	d6824 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6840:	2000      	movs	r0, #0
   d6842:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6844:	2001      	movs	r0, #1
}
   d6846:	4770      	bx	lr

000d6848 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6848:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d684a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d684e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6852:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6856:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d685a:	2304      	movs	r3, #4
   d685c:	6041      	str	r1, [r0, #4]
   d685e:	7503      	strb	r3, [r0, #20]
}
   d6860:	bd10      	pop	{r4, pc}
	...

000d6864 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d6864:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6866:	4d04      	ldr	r5, [pc, #16]	; (d6878 <_ZN9IPAddressC1Ehhhh+0x14>)
   d6868:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d686a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d686e:	9500      	str	r5, [sp, #0]
   d6870:	f7ff ffea 	bl	d6848 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6874:	b003      	add	sp, #12
   d6876:	bd30      	pop	{r4, r5, pc}
   d6878:	000d8b0c 	.word	0x000d8b0c

000d687c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d687c:	b513      	push	{r0, r1, r4, lr}
   d687e:	4b05      	ldr	r3, [pc, #20]	; (d6894 <_ZN9IPAddressC1EPKh+0x18>)
   d6880:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d6882:	78cb      	ldrb	r3, [r1, #3]
   d6884:	9300      	str	r3, [sp, #0]
   d6886:	788b      	ldrb	r3, [r1, #2]
   d6888:	784a      	ldrb	r2, [r1, #1]
   d688a:	7809      	ldrb	r1, [r1, #0]
   d688c:	f7ff ffdc 	bl	d6848 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6890:	b002      	add	sp, #8
   d6892:	bd10      	pop	{r4, pc}
   d6894:	000d8b0c 	.word	0x000d8b0c

000d6898 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6898:	7441      	strb	r1, [r0, #17]
}
   d689a:	4770      	bx	lr

000d689c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d689c:	4770      	bx	lr

000d689e <_ZN9USBSerial4readEv>:
{
   d689e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d68a0:	2100      	movs	r1, #0
   d68a2:	7c00      	ldrb	r0, [r0, #16]
   d68a4:	f7ff fa70 	bl	d5d88 <HAL_USB_USART_Receive_Data>
}
   d68a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d68ac:	bd08      	pop	{r3, pc}

000d68ae <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d68ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d68b0:	2101      	movs	r1, #1
   d68b2:	7c00      	ldrb	r0, [r0, #16]
   d68b4:	f7ff fa68 	bl	d5d88 <HAL_USB_USART_Receive_Data>
}
   d68b8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d68bc:	bd08      	pop	{r3, pc}

000d68be <_ZN9USBSerial17availableForWriteEv>:
{
   d68be:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d68c0:	7c00      	ldrb	r0, [r0, #16]
   d68c2:	f7ff fa59 	bl	d5d78 <HAL_USB_USART_Available_Data_For_Write>
}
   d68c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68ca:	bd08      	pop	{r3, pc}

000d68cc <_ZN9USBSerial9availableEv>:
{
   d68cc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d68ce:	7c00      	ldrb	r0, [r0, #16]
   d68d0:	f7ff fa4a 	bl	d5d68 <HAL_USB_USART_Available_Data>
}
   d68d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d68d8:	bd08      	pop	{r3, pc}

000d68da <_ZN9USBSerial5writeEh>:
{
   d68da:	b513      	push	{r0, r1, r4, lr}
   d68dc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d68de:	7c00      	ldrb	r0, [r0, #16]
{
   d68e0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d68e2:	f7ff fa49 	bl	d5d78 <HAL_USB_USART_Available_Data_For_Write>
   d68e6:	2800      	cmp	r0, #0
   d68e8:	9901      	ldr	r1, [sp, #4]
   d68ea:	dc01      	bgt.n	d68f0 <_ZN9USBSerial5writeEh+0x16>
   d68ec:	7c60      	ldrb	r0, [r4, #17]
   d68ee:	b120      	cbz	r0, d68fa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d68f0:	7c20      	ldrb	r0, [r4, #16]
   d68f2:	f7ff fa51 	bl	d5d98 <HAL_USB_USART_Send_Data>
   d68f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d68fa:	b002      	add	sp, #8
   d68fc:	bd10      	pop	{r4, pc}

000d68fe <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d68fe:	7c00      	ldrb	r0, [r0, #16]
   d6900:	f7ff ba52 	b.w	d5da8 <HAL_USB_USART_Flush_Data>

000d6904 <_ZN9USBSerialD0Ev>:
   d6904:	b510      	push	{r4, lr}
   d6906:	2114      	movs	r1, #20
   d6908:	4604      	mov	r4, r0
   d690a:	f000 fdd4 	bl	d74b6 <_ZdlPvj>
   d690e:	4620      	mov	r0, r4
   d6910:	bd10      	pop	{r4, pc}
	...

000d6914 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6914:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d691a:	4604      	mov	r4, r0
   d691c:	4608      	mov	r0, r1
   d691e:	2100      	movs	r1, #0
   d6920:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6924:	4b04      	ldr	r3, [pc, #16]	; (d6938 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6926:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6928:	2301      	movs	r3, #1
  _serial = serial;
   d692a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d692c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d692e:	4611      	mov	r1, r2
   d6930:	f7ff fa0a 	bl	d5d48 <HAL_USB_USART_Init>
}
   d6934:	4620      	mov	r0, r4
   d6936:	bd10      	pop	{r4, pc}
   d6938:	000d8b20 	.word	0x000d8b20

000d693c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d693c:	7c00      	ldrb	r0, [r0, #16]
   d693e:	2200      	movs	r2, #0
   d6940:	f7ff ba0a 	b.w	d5d58 <HAL_USB_USART_Begin>

000d6944 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6944:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6946:	2214      	movs	r2, #20
{
   d6948:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d694a:	2100      	movs	r1, #0
   d694c:	f001 fcfe 	bl	d834c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6950:	4620      	mov	r0, r4
   d6952:	bd10      	pop	{r4, pc}

000d6954 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6954:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6956:	4c10      	ldr	r4, [pc, #64]	; (d6998 <_Z16_fetch_usbserialv+0x44>)
{
   d6958:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d695a:	a803      	add	r0, sp, #12
   d695c:	f7ff fff2 	bl	d6944 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6960:	7821      	ldrb	r1, [r4, #0]
   d6962:	f3bf 8f5b 	dmb	ish
   d6966:	f011 0101 	ands.w	r1, r1, #1
   d696a:	d111      	bne.n	d6990 <_Z16_fetch_usbserialv+0x3c>
   d696c:	4620      	mov	r0, r4
   d696e:	9101      	str	r1, [sp, #4]
   d6970:	f7fd fba4 	bl	d40bc <__cxa_guard_acquire>
   d6974:	9901      	ldr	r1, [sp, #4]
   d6976:	b158      	cbz	r0, d6990 <_Z16_fetch_usbserialv+0x3c>
   d6978:	aa03      	add	r2, sp, #12
   d697a:	4808      	ldr	r0, [pc, #32]	; (d699c <_Z16_fetch_usbserialv+0x48>)
   d697c:	f7ff ffca 	bl	d6914 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6980:	4620      	mov	r0, r4
   d6982:	f7fd fba0 	bl	d40c6 <__cxa_guard_release>
   d6986:	4a06      	ldr	r2, [pc, #24]	; (d69a0 <_Z16_fetch_usbserialv+0x4c>)
   d6988:	4906      	ldr	r1, [pc, #24]	; (d69a4 <_Z16_fetch_usbserialv+0x50>)
   d698a:	4804      	ldr	r0, [pc, #16]	; (d699c <_Z16_fetch_usbserialv+0x48>)
   d698c:	f000 fd8e 	bl	d74ac <__aeabi_atexit>
	return _usbserial;
}
   d6990:	4802      	ldr	r0, [pc, #8]	; (d699c <_Z16_fetch_usbserialv+0x48>)
   d6992:	b008      	add	sp, #32
   d6994:	bd10      	pop	{r4, pc}
   d6996:	bf00      	nop
   d6998:	2003e68c 	.word	0x2003e68c
   d699c:	2003e690 	.word	0x2003e690
   d69a0:	2003e558 	.word	0x2003e558
   d69a4:	000d689d 	.word	0x000d689d

000d69a8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d69a8:	4770      	bx	lr

000d69aa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69aa:	7441      	strb	r1, [r0, #17]
}
   d69ac:	4770      	bx	lr

000d69ae <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d69ae:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d69b0:	7c00      	ldrb	r0, [r0, #16]
   d69b2:	f7ff f919 	bl	d5be8 <hal_usart_available_data_for_write>
}
   d69b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69ba:	bd08      	pop	{r3, pc}

000d69bc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d69bc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d69be:	7c00      	ldrb	r0, [r0, #16]
   d69c0:	f7ff f8ea 	bl	d5b98 <hal_usart_available>
}
   d69c4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69c8:	bd08      	pop	{r3, pc}

000d69ca <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d69ca:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d69cc:	7c00      	ldrb	r0, [r0, #16]
   d69ce:	f7ff f8f3 	bl	d5bb8 <hal_usart_peek>
}
   d69d2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69d6:	bd08      	pop	{r3, pc}

000d69d8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d69d8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d69da:	7c00      	ldrb	r0, [r0, #16]
   d69dc:	f7ff f8e4 	bl	d5ba8 <hal_usart_read>
}
   d69e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69e4:	bd08      	pop	{r3, pc}

000d69e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d69e6:	7c00      	ldrb	r0, [r0, #16]
   d69e8:	f7ff b8ee 	b.w	d5bc8 <hal_usart_flush>

000d69ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d69ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d69ee:	7c45      	ldrb	r5, [r0, #17]
{
   d69f0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d69f2:	b12d      	cbz	r5, d6a00 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d69f4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d69f6:	b003      	add	sp, #12
   d69f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d69fc:	f7ff b8c4 	b.w	d5b88 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6a00:	7c00      	ldrb	r0, [r0, #16]
   d6a02:	9101      	str	r1, [sp, #4]
   d6a04:	f7ff f8f0 	bl	d5be8 <hal_usart_available_data_for_write>
   d6a08:	2800      	cmp	r0, #0
   d6a0a:	9901      	ldr	r1, [sp, #4]
   d6a0c:	dcf2      	bgt.n	d69f4 <_ZN11USARTSerial5writeEh+0x8>
}
   d6a0e:	4628      	mov	r0, r5
   d6a10:	b003      	add	sp, #12
   d6a12:	bd30      	pop	{r4, r5, pc}

000d6a14 <_ZN11USARTSerialD0Ev>:
   d6a14:	b510      	push	{r4, lr}
   d6a16:	2114      	movs	r1, #20
   d6a18:	4604      	mov	r4, r0
   d6a1a:	f000 fd4c 	bl	d74b6 <_ZdlPvj>
   d6a1e:	4620      	mov	r0, r4
   d6a20:	bd10      	pop	{r4, pc}
	...

000d6a24 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6a24:	b510      	push	{r4, lr}
   d6a26:	f04f 0c00 	mov.w	ip, #0
   d6a2a:	4604      	mov	r4, r0
   d6a2c:	4608      	mov	r0, r1
   d6a2e:	4611      	mov	r1, r2
   d6a30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6a34:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6a38:	4a04      	ldr	r2, [pc, #16]	; (d6a4c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6a3a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6a3c:	2201      	movs	r2, #1
  _serial = serial;
   d6a3e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6a40:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6a42:	461a      	mov	r2, r3
   d6a44:	f7ff f898 	bl	d5b78 <hal_usart_init>
}
   d6a48:	4620      	mov	r0, r4
   d6a4a:	bd10      	pop	{r4, pc}
   d6a4c:	000d8b50 	.word	0x000d8b50

000d6a50 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6a50:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6a52:	4c0e      	ldr	r4, [pc, #56]	; (d6a8c <_Z22__fetch_global_Serial1v+0x3c>)
   d6a54:	7821      	ldrb	r1, [r4, #0]
   d6a56:	f3bf 8f5b 	dmb	ish
   d6a5a:	f011 0101 	ands.w	r1, r1, #1
   d6a5e:	d112      	bne.n	d6a86 <_Z22__fetch_global_Serial1v+0x36>
   d6a60:	4620      	mov	r0, r4
   d6a62:	9101      	str	r1, [sp, #4]
   d6a64:	f7fd fb2a 	bl	d40bc <__cxa_guard_acquire>
   d6a68:	9901      	ldr	r1, [sp, #4]
   d6a6a:	b160      	cbz	r0, d6a86 <_Z22__fetch_global_Serial1v+0x36>
   d6a6c:	4a08      	ldr	r2, [pc, #32]	; (d6a90 <_Z22__fetch_global_Serial1v+0x40>)
   d6a6e:	4b09      	ldr	r3, [pc, #36]	; (d6a94 <_Z22__fetch_global_Serial1v+0x44>)
   d6a70:	4809      	ldr	r0, [pc, #36]	; (d6a98 <_Z22__fetch_global_Serial1v+0x48>)
   d6a72:	f7ff ffd7 	bl	d6a24 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6a76:	4620      	mov	r0, r4
   d6a78:	f7fd fb25 	bl	d40c6 <__cxa_guard_release>
   d6a7c:	4a07      	ldr	r2, [pc, #28]	; (d6a9c <_Z22__fetch_global_Serial1v+0x4c>)
   d6a7e:	4908      	ldr	r1, [pc, #32]	; (d6aa0 <_Z22__fetch_global_Serial1v+0x50>)
   d6a80:	4805      	ldr	r0, [pc, #20]	; (d6a98 <_Z22__fetch_global_Serial1v+0x48>)
   d6a82:	f000 fd13 	bl	d74ac <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6a86:	4804      	ldr	r0, [pc, #16]	; (d6a98 <_Z22__fetch_global_Serial1v+0x48>)
   d6a88:	b002      	add	sp, #8
   d6a8a:	bd10      	pop	{r4, pc}
   d6a8c:	2003e6a4 	.word	0x2003e6a4
   d6a90:	2003e6a8 	.word	0x2003e6a8
   d6a94:	2003e72c 	.word	0x2003e72c
   d6a98:	2003e7b0 	.word	0x2003e7b0
   d6a9c:	2003e558 	.word	0x2003e558
   d6aa0:	000d69a9 	.word	0x000d69a9

000d6aa4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6aa4:	4770      	bx	lr

000d6aa6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6aa8:	4606      	mov	r6, r0
   d6aaa:	4615      	mov	r5, r2
   d6aac:	460c      	mov	r4, r1
   d6aae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6ab0:	42bc      	cmp	r4, r7
   d6ab2:	d006      	beq.n	d6ac2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6ab4:	6833      	ldr	r3, [r6, #0]
   d6ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6aba:	689b      	ldr	r3, [r3, #8]
   d6abc:	4630      	mov	r0, r6
   d6abe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6ac0:	e7f6      	b.n	d6ab0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6ac2:	4628      	mov	r0, r5
   d6ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ac6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6ac6:	7c00      	ldrb	r0, [r0, #16]
   d6ac8:	2200      	movs	r2, #0
   d6aca:	f7ff b895 	b.w	d5bf8 <hal_i2c_write>

000d6ace <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6ace:	7c00      	ldrb	r0, [r0, #16]
   d6ad0:	2100      	movs	r1, #0
   d6ad2:	f7ff b899 	b.w	d5c08 <hal_i2c_available>

000d6ad6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6ad6:	7c00      	ldrb	r0, [r0, #16]
   d6ad8:	2100      	movs	r1, #0
   d6ada:	f7ff b89d 	b.w	d5c18 <hal_i2c_read>

000d6ade <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6ade:	7c00      	ldrb	r0, [r0, #16]
   d6ae0:	2100      	movs	r1, #0
   d6ae2:	f7ff b8a1 	b.w	d5c28 <hal_i2c_peek>

000d6ae6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6ae6:	7c00      	ldrb	r0, [r0, #16]
   d6ae8:	2100      	movs	r1, #0
   d6aea:	f7ff b8a5 	b.w	d5c38 <hal_i2c_flush>

000d6aee <_ZN7TwoWireD0Ev>:
   d6aee:	b510      	push	{r4, lr}
   d6af0:	2114      	movs	r1, #20
   d6af2:	4604      	mov	r4, r0
   d6af4:	f000 fcdf 	bl	d74b6 <_ZdlPvj>
   d6af8:	4620      	mov	r0, r4
   d6afa:	bd10      	pop	{r4, pc}

000d6afc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6afc:	b510      	push	{r4, lr}
   d6afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b02:	4604      	mov	r4, r0
   d6b04:	4608      	mov	r0, r1
   d6b06:	2100      	movs	r1, #0
   d6b08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6b0c:	4b03      	ldr	r3, [pc, #12]	; (d6b1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6b0e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6b10:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6b12:	4611      	mov	r1, r2
   d6b14:	f7ff f8a0 	bl	d5c58 <hal_i2c_init>
}
   d6b18:	4620      	mov	r0, r4
   d6b1a:	bd10      	pop	{r4, pc}
   d6b1c:	000d8b80 	.word	0x000d8b80

000d6b20 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d6b20:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6b22:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d6b24:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d6b28:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6b2a:	2201      	movs	r2, #1
   d6b2c:	f04f 33ff 	mov.w	r3, #4294967295
   d6b30:	f10d 0107 	add.w	r1, sp, #7
   d6b34:	47a0      	blx	r4
}
   d6b36:	b002      	add	sp, #8
   d6b38:	bd10      	pop	{r4, pc}

000d6b3a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d6b3a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6b3c:	6803      	ldr	r3, [r0, #0]
   d6b3e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d6b40:	f04f 33ff 	mov.w	r3, #4294967295
   d6b44:	46a4      	mov	ip, r4
}
   d6b46:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d6b4a:	4760      	bx	ip

000d6b4c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6b4c:	b513      	push	{r0, r1, r4, lr}
   d6b4e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d6b50:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d6b52:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d6b56:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d6b58:	f10d 0107 	add.w	r1, sp, #7
   d6b5c:	2201      	movs	r2, #1
   d6b5e:	47a0      	blx	r4
}
   d6b60:	b002      	add	sp, #8
   d6b62:	bd10      	pop	{r4, pc}

000d6b64 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d6b64:	4770      	bx	lr

000d6b66 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d6b66:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6b68:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d6b6a:	681a      	ldr	r2, [r3, #0]
   d6b6c:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d6b6e:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d6b70:	da10      	bge.n	d6b94 <_ZN9TCPClient9connectedEv+0x2e>
   d6b72:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6b76:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6b7a:	429a      	cmp	r2, r3
   d6b7c:	d10a      	bne.n	d6b94 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d6b7e:	6803      	ldr	r3, [r0, #0]
   d6b80:	691b      	ldr	r3, [r3, #16]
   d6b82:	4798      	blx	r3
        if (!rv) {
   d6b84:	4604      	mov	r4, r0
   d6b86:	b928      	cbnz	r0, d6b94 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d6b88:	682b      	ldr	r3, [r5, #0]
   d6b8a:	4628      	mov	r0, r5
   d6b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b8e:	4798      	blx	r3
        rv = available();
   d6b90:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d6b92:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d6b94:	2001      	movs	r0, #1
   d6b96:	e7fc      	b.n	d6b92 <_ZN9TCPClient9connectedEv+0x2c>

000d6b98 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d6b98:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d6b9a:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d6b9c:	43c0      	mvns	r0, r0
   d6b9e:	0fc0      	lsrs	r0, r0, #31
   d6ba0:	4770      	bx	lr

000d6ba2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6ba2:	4770      	bx	lr

000d6ba4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6ba4:	4b06      	ldr	r3, [pc, #24]	; (d6bc0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6ba6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6ba8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6baa:	f100 040c 	add.w	r4, r0, #12
	    ||
   d6bae:	d005      	beq.n	d6bbc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d6bb0:	4608      	mov	r0, r1
   d6bb2:	f000 fc85 	bl	d74c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6bb6:	2800      	cmp	r0, #0
	return nullptr;
   d6bb8:	bf08      	it	eq
   d6bba:	2400      	moveq	r4, #0
      }
   d6bbc:	4620      	mov	r0, r4
   d6bbe:	bd10      	pop	{r4, pc}
   d6bc0:	000d8adc 	.word	0x000d8adc

000d6bc4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6bc4:	b510      	push	{r4, lr}
   d6bc6:	21ac      	movs	r1, #172	; 0xac
   d6bc8:	4604      	mov	r4, r0
   d6bca:	f000 fc74 	bl	d74b6 <_ZdlPvj>
   d6bce:	4620      	mov	r0, r4
   d6bd0:	bd10      	pop	{r4, pc}

000d6bd2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d6bd2:	f7fd ba64 	b.w	d409e <_ZdlPv>

000d6bd6 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d6bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d6bda:	f04f 0800 	mov.w	r8, #0
   d6bde:	b086      	sub	sp, #24
   d6be0:	461d      	mov	r5, r3
   d6be2:	f8c0 8004 	str.w	r8, [r0, #4]
   d6be6:	4604      	mov	r4, r0
   d6be8:	460e      	mov	r6, r1
   d6bea:	4617      	mov	r7, r2
    struct timeval tv = {};
   d6bec:	4641      	mov	r1, r8
   d6bee:	2210      	movs	r2, #16
   d6bf0:	a802      	add	r0, sp, #8
   d6bf2:	f001 fbab 	bl	d834c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d6bf6:	1c6b      	adds	r3, r5, #1
   d6bf8:	d009      	beq.n	d6c0e <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d6bfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d6bfe:	fbb5 f3f0 	udiv	r3, r5, r0
   d6c02:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d6c06:	fb00 5313 	mls	r3, r0, r3, r5
   d6c0a:	4358      	muls	r0, r3
   d6c0c:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d6c0e:	6960      	ldr	r0, [r4, #20]
   d6c10:	2310      	movs	r3, #16
   d6c12:	9300      	str	r3, [sp, #0]
   d6c14:	6800      	ldr	r0, [r0, #0]
   d6c16:	ab02      	add	r3, sp, #8
   d6c18:	f241 0205 	movw	r2, #4101	; 0x1005
   d6c1c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6c20:	f7ff f822 	bl	d5c68 <sock_setsockopt>
    if (ret < 0) {
   d6c24:	2800      	cmp	r0, #0
   d6c26:	da07      	bge.n	d6c38 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d6c28:	f7ff f9a2 	bl	d5f70 <__errno>
   d6c2c:	6803      	ldr	r3, [r0, #0]
   d6c2e:	6063      	str	r3, [r4, #4]
        return 0;
   d6c30:	2000      	movs	r0, #0
}
   d6c32:	b006      	add	sp, #24
   d6c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d6c38:	6960      	ldr	r0, [r4, #20]
   d6c3a:	2300      	movs	r3, #0
   d6c3c:	6800      	ldr	r0, [r0, #0]
   d6c3e:	463a      	mov	r2, r7
   d6c40:	4631      	mov	r1, r6
   d6c42:	f7ff f831 	bl	d5ca8 <sock_send>
    if (ret < 0) {
   d6c46:	1e03      	subs	r3, r0, #0
   d6c48:	dbee      	blt.n	d6c28 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d6c4a:	4618      	mov	r0, r3
   d6c4c:	e7f1      	b.n	d6c32 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d6c50 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d6c50:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d6c52:	6984      	ldr	r4, [r0, #24]
   d6c54:	4b0a      	ldr	r3, [pc, #40]	; (d6c80 <_ZN9TCPClientD1Ev+0x30>)
   d6c56:	6003      	str	r3, [r0, #0]
   d6c58:	4605      	mov	r5, r0
   d6c5a:	b17c      	cbz	r4, d6c7c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d6c5c:	6863      	ldr	r3, [r4, #4]
   d6c5e:	3b01      	subs	r3, #1
   d6c60:	6063      	str	r3, [r4, #4]
   d6c62:	b95b      	cbnz	r3, d6c7c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d6c64:	6823      	ldr	r3, [r4, #0]
   d6c66:	4620      	mov	r0, r4
   d6c68:	689b      	ldr	r3, [r3, #8]
   d6c6a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6c6c:	68a3      	ldr	r3, [r4, #8]
   d6c6e:	3b01      	subs	r3, #1
   d6c70:	60a3      	str	r3, [r4, #8]
   d6c72:	b91b      	cbnz	r3, d6c7c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d6c74:	6823      	ldr	r3, [r4, #0]
   d6c76:	4620      	mov	r0, r4
   d6c78:	68db      	ldr	r3, [r3, #12]
   d6c7a:	4798      	blx	r3
   d6c7c:	4628      	mov	r0, r5
   d6c7e:	bd38      	pop	{r3, r4, r5, pc}
   d6c80:	000d8bdc 	.word	0x000d8bdc

000d6c84 <_ZN9TCPClientD0Ev>:
   d6c84:	b510      	push	{r4, lr}
   d6c86:	4604      	mov	r4, r0
   d6c88:	f7ff ffe2 	bl	d6c50 <_ZN9TCPClientD1Ev>
   d6c8c:	4620      	mov	r0, r4
   d6c8e:	211c      	movs	r1, #28
   d6c90:	f000 fc11 	bl	d74b6 <_ZdlPvj>
   d6c94:	4620      	mov	r0, r4
   d6c96:	bd10      	pop	{r4, pc}

000d6c98 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d6c98:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6c9a:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d6c9c:	4b05      	ldr	r3, [pc, #20]	; (d6cb4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d6c9e:	4604      	mov	r4, r0
   d6ca0:	358c      	adds	r5, #140	; 0x8c
   d6ca2:	f844 3b04 	str.w	r3, [r4], #4
   d6ca6:	4606      	mov	r6, r0
   d6ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6cac:	682b      	ldr	r3, [r5, #0]
   d6cae:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d6cb0:	4630      	mov	r0, r6
   d6cb2:	bd70      	pop	{r4, r5, r6, pc}
   d6cb4:	000d8b0c 	.word	0x000d8b0c

000d6cb8 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d6cb8:	b510      	push	{r4, lr}
   d6cba:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6cbc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6cc0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6cc4:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d6cc6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6cc8:	d005      	beq.n	d6cd6 <_ZN9TCPClient4peekEv+0x1e>
   d6cca:	6963      	ldr	r3, [r4, #20]
   d6ccc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6cd0:	4413      	add	r3, r2
   d6cd2:	7918      	ldrb	r0, [r3, #4]
}
   d6cd4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d6cd6:	6803      	ldr	r3, [r0, #0]
   d6cd8:	691b      	ldr	r3, [r3, #16]
   d6cda:	4798      	blx	r3
   d6cdc:	2800      	cmp	r0, #0
   d6cde:	d1f4      	bne.n	d6cca <_ZN9TCPClient4peekEv+0x12>
   d6ce0:	f04f 30ff 	mov.w	r0, #4294967295
   d6ce4:	e7f6      	b.n	d6cd4 <_ZN9TCPClient4peekEv+0x1c>

000d6ce6 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d6ce6:	b510      	push	{r4, lr}
   d6ce8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6cea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6cee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6cf2:	429a      	cmp	r2, r3
int TCPClient::read() {
   d6cf4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6cf6:	d008      	beq.n	d6d0a <_ZN9TCPClient4readEv+0x24>
   d6cf8:	6963      	ldr	r3, [r4, #20]
   d6cfa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d6cfe:	1c51      	adds	r1, r2, #1
   d6d00:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d6d04:	4413      	add	r3, r2
   d6d06:	7918      	ldrb	r0, [r3, #4]
}
   d6d08:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d6d0a:	6803      	ldr	r3, [r0, #0]
   d6d0c:	691b      	ldr	r3, [r3, #16]
   d6d0e:	4798      	blx	r3
   d6d10:	2800      	cmp	r0, #0
   d6d12:	d1f1      	bne.n	d6cf8 <_ZN9TCPClient4readEv+0x12>
   d6d14:	f04f 30ff 	mov.w	r0, #4294967295
   d6d18:	e7f6      	b.n	d6d08 <_ZN9TCPClient4readEv+0x22>

000d6d1a <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6d1c:	6943      	ldr	r3, [r0, #20]
   d6d1e:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d6d20:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6d24:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d6d28:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d6d2a:	4605      	mov	r5, r0
   d6d2c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d6d2e:	d016      	beq.n	d6d5e <_ZN9TCPClient4readEPhj+0x44>
   d6d30:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d6d32:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d6d36:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d6d3a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d6d3c:	42bc      	cmp	r4, r7
   d6d3e:	bf28      	it	cs
   d6d40:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d6d42:	3304      	adds	r3, #4
   d6d44:	4622      	mov	r2, r4
   d6d46:	4419      	add	r1, r3
   d6d48:	4630      	mov	r0, r6
   d6d4a:	f001 faf1 	bl	d8330 <memcpy>
   d6d4e:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d6d50:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d6d54:	4423      	add	r3, r4
   d6d56:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d6d5a:	4620      	mov	r0, r4
   d6d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d6d5e:	6803      	ldr	r3, [r0, #0]
   d6d60:	691b      	ldr	r3, [r3, #16]
   d6d62:	4798      	blx	r3
   d6d64:	2800      	cmp	r0, #0
   d6d66:	d1e3      	bne.n	d6d30 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d6d68:	f04f 34ff 	mov.w	r4, #4294967295
   d6d6c:	e7f5      	b.n	d6d5a <_ZN9TCPClient4readEPhj+0x40>

000d6d6e <_ZN9TCPClient12flush_bufferEv>:
   d6d6e:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d6d70:	2300      	movs	r3, #0
   d6d72:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d6d76:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d6d78:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d6d7c:	4770      	bx	lr

000d6d7e <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6d82:	461f      	mov	r7, r3
    stop();
   d6d84:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d86:	460c      	mov	r4, r1
    stop();
   d6d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d6d8a:	b08a      	sub	sp, #40	; 0x28
   d6d8c:	4605      	mov	r5, r0
   d6d8e:	4616      	mov	r6, r2
    stop();
   d6d90:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d6d92:	7d23      	ldrb	r3, [r4, #20]
   d6d94:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d6d98:	2b04      	cmp	r3, #4
   d6d9a:	bf0c      	ite	eq
   d6d9c:	2002      	moveq	r0, #2
   d6d9e:	200a      	movne	r0, #10
   d6da0:	2206      	movs	r2, #6
   d6da2:	2101      	movs	r1, #1
   d6da4:	f7fe ff88 	bl	d5cb8 <sock_socket>
   d6da8:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d6dac:	696b      	ldr	r3, [r5, #20]
   d6dae:	681b      	ldr	r3, [r3, #0]
   d6db0:	2b00      	cmp	r3, #0
   d6db2:	da08      	bge.n	d6dc6 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d6db4:	682b      	ldr	r3, [r5, #0]
   d6db6:	4628      	mov	r0, r5
   d6db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6dba:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d6dbc:	4798      	blx	r3
}
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	b00a      	add	sp, #40	; 0x28
   d6dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d6dc6:	4628      	mov	r0, r5
   d6dc8:	f7ff ffd1 	bl	d6d6e <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d6dcc:	b1b7      	cbz	r7, d6dfc <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d6dce:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6dd0:	a903      	add	r1, sp, #12
   d6dd2:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d6dd4:	9303      	str	r3, [sp, #12]
   d6dd6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d6dda:	f7fe fe6d 	bl	d5ab8 <if_index_to_name>
   d6dde:	2800      	cmp	r0, #0
   d6de0:	d1e8      	bne.n	d6db4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d6de2:	6968      	ldr	r0, [r5, #20]
   d6de4:	2306      	movs	r3, #6
   d6de6:	9300      	str	r3, [sp, #0]
   d6de8:	6800      	ldr	r0, [r0, #0]
   d6dea:	ab03      	add	r3, sp, #12
   d6dec:	f241 020b 	movw	r2, #4107	; 0x100b
   d6df0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6df4:	f7fe ff38 	bl	d5c68 <sock_setsockopt>
   d6df8:	2800      	cmp	r0, #0
   d6dfa:	d1db      	bne.n	d6db4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d6dfc:	221c      	movs	r2, #28
   d6dfe:	2100      	movs	r1, #0
   d6e00:	a803      	add	r0, sp, #12
   d6e02:	f001 faa3 	bl	d834c <memset>
    if (ip.version() == 4) {
   d6e06:	7d23      	ldrb	r3, [r4, #20]
   d6e08:	2b04      	cmp	r3, #4
   d6e0a:	d11d      	bne.n	d6e48 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d6e0c:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d6e10:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d6e12:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d6e16:	f7fe fea7 	bl	d5b68 <inet_htons>
   d6e1a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d6e1e:	6860      	ldr	r0, [r4, #4]
   d6e20:	f7fe fe9a 	bl	d5b58 <inet_htonl>
   d6e24:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d6e26:	696b      	ldr	r3, [r5, #20]
   d6e28:	221c      	movs	r2, #28
   d6e2a:	6818      	ldr	r0, [r3, #0]
   d6e2c:	a903      	add	r1, sp, #12
   d6e2e:	f7fe ff2b 	bl	d5c88 <sock_connect>
   d6e32:	2800      	cmp	r0, #0
   d6e34:	d1be      	bne.n	d6db4 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d6e36:	3404      	adds	r4, #4
   d6e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6e3a:	696d      	ldr	r5, [r5, #20]
   d6e3c:	358c      	adds	r5, #140	; 0x8c
   d6e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6e40:	6823      	ldr	r3, [r4, #0]
   d6e42:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d6e44:	2401      	movs	r4, #1
   d6e46:	e7ba      	b.n	d6dbe <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d6e48:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d6e4c:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d6e4e:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d6e52:	f7fe fe89 	bl	d5b68 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6e56:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d6e58:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d6e5c:	1d23      	adds	r3, r4, #4
   d6e5e:	f104 0714 	add.w	r7, r4, #20
   d6e62:	6818      	ldr	r0, [r3, #0]
   d6e64:	6859      	ldr	r1, [r3, #4]
   d6e66:	4632      	mov	r2, r6
   d6e68:	c203      	stmia	r2!, {r0, r1}
   d6e6a:	3308      	adds	r3, #8
   d6e6c:	42bb      	cmp	r3, r7
   d6e6e:	4616      	mov	r6, r2
   d6e70:	d1f7      	bne.n	d6e62 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d6e72:	e7d8      	b.n	d6e26 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d6e74 <_ZN9TCPClient9availableEv>:
{
   d6e74:	b530      	push	{r4, r5, lr}
   d6e76:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d6e78:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d6e7c:	b08b      	sub	sp, #44	; 0x2c
   d6e7e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d6e80:	b12b      	cbz	r3, d6e8e <_ZN9TCPClient9availableEv+0x1a>
   d6e82:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d6e86:	429a      	cmp	r2, r3
   d6e88:	d101      	bne.n	d6e8e <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d6e8a:	f7ff ff70 	bl	d6d6e <_ZN9TCPClient12flush_bufferEv>
   d6e8e:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d6e90:	6808      	ldr	r0, [r1, #0]
   d6e92:	2800      	cmp	r0, #0
   d6e94:	db18      	blt.n	d6ec8 <_ZN9TCPClient9availableEv+0x54>
   d6e96:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d6e9a:	2d7f      	cmp	r5, #127	; 0x7f
   d6e9c:	d814      	bhi.n	d6ec8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d6e9e:	3104      	adds	r1, #4
   d6ea0:	2308      	movs	r3, #8
   d6ea2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d6ea6:	4429      	add	r1, r5
   d6ea8:	f7fe fef6 	bl	d5c98 <sock_recv>
            if (ret > 0) {
   d6eac:	2800      	cmp	r0, #0
   d6eae:	dd13      	ble.n	d6ed8 <_ZN9TCPClient9availableEv+0x64>
   d6eb0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d6eb2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6eb6:	b90a      	cbnz	r2, d6ebc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d6eb8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d6ebc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d6ebe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d6ec2:	4410      	add	r0, r2
   d6ec4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d6ec8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d6eca:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d6ece:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d6ed2:	1ac0      	subs	r0, r0, r3
   d6ed4:	b00b      	add	sp, #44	; 0x2c
   d6ed6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d6ed8:	f7ff f84a 	bl	d5f70 <__errno>
   d6edc:	6803      	ldr	r3, [r0, #0]
   d6ede:	2b0b      	cmp	r3, #11
   d6ee0:	d0f2      	beq.n	d6ec8 <_ZN9TCPClient9availableEv+0x54>
   d6ee2:	f7ff f845 	bl	d5f70 <__errno>
   d6ee6:	6803      	ldr	r3, [r0, #0]
   d6ee8:	2b0b      	cmp	r3, #11
   d6eea:	d0ed      	beq.n	d6ec8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d6eec:	2320      	movs	r3, #32
   d6eee:	2500      	movs	r5, #0
   d6ef0:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d6ef4:	f7ff f83c 	bl	d5f70 <__errno>
   d6ef8:	6803      	ldr	r3, [r0, #0]
   d6efa:	9301      	str	r3, [sp, #4]
   d6efc:	4b08      	ldr	r3, [pc, #32]	; (d6f20 <_ZN9TCPClient9availableEv+0xac>)
   d6efe:	4909      	ldr	r1, [pc, #36]	; (d6f24 <_ZN9TCPClient9availableEv+0xb0>)
   d6f00:	9300      	str	r3, [sp, #0]
   d6f02:	aa02      	add	r2, sp, #8
   d6f04:	462b      	mov	r3, r5
   d6f06:	2032      	movs	r0, #50	; 0x32
   d6f08:	f7fe ff5e 	bl	d5dc8 <log_message>
                    sock_close(d_->sock);
   d6f0c:	6963      	ldr	r3, [r4, #20]
   d6f0e:	6818      	ldr	r0, [r3, #0]
   d6f10:	f7fe feb2 	bl	d5c78 <sock_close>
   d6f14:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6f16:	f04f 32ff 	mov.w	r2, #4294967295
   d6f1a:	601a      	str	r2, [r3, #0]
   d6f1c:	e7d4      	b.n	d6ec8 <_ZN9TCPClient9availableEv+0x54>
   d6f1e:	bf00      	nop
   d6f20:	000d8ba7 	.word	0x000d8ba7
   d6f24:	000d8ba0 	.word	0x000d8ba0

000d6f28 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d6f28:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d6f2a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d6f2c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d6f2e:	6818      	ldr	r0, [r3, #0]
   d6f30:	2800      	cmp	r0, #0
   d6f32:	db01      	blt.n	d6f38 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d6f34:	f7fe fea0 	bl	d5c78 <sock_close>
   d6f38:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d6f3a:	f04f 32ff 	mov.w	r2, #4294967295
   d6f3e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d6f40:	6960      	ldr	r0, [r4, #20]
   d6f42:	2211      	movs	r2, #17
   d6f44:	2100      	movs	r1, #0
   d6f46:	308c      	adds	r0, #140	; 0x8c
   d6f48:	f001 fa00 	bl	d834c <memset>
    flush_buffer();
   d6f4c:	4620      	mov	r0, r4
}
   d6f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d6f52:	f7ff bf0c 	b.w	d6d6e <_ZN9TCPClient12flush_bufferEv>

000d6f56 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d6f56:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6f58:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d6f5a:	4604      	mov	r4, r0
          total(0) {
   d6f5c:	6001      	str	r1, [r0, #0]
   d6f5e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d6f62:	3088      	adds	r0, #136	; 0x88
   d6f64:	f7ff fc3a 	bl	d67dc <_ZN9IPAddressC1Ev>
}
   d6f68:	4620      	mov	r0, r4
   d6f6a:	bd10      	pop	{r4, pc}

000d6f6c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d6f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6f6e:	2300      	movs	r3, #0
   d6f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6f74:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d6f78:	4a0e      	ldr	r2, [pc, #56]	; (d6fb4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d6f7a:	6103      	str	r3, [r0, #16]
   d6f7c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6f7e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d6f80:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6f82:	20ac      	movs	r0, #172	; 0xac
   d6f84:	9101      	str	r1, [sp, #4]
   d6f86:	f7fd f886 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6f8a:	1e05      	subs	r5, r0, #0
   d6f8c:	f105 060c 	add.w	r6, r5, #12
   d6f90:	d008      	beq.n	d6fa4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d6f92:	2301      	movs	r3, #1
   d6f94:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6f98:	4b07      	ldr	r3, [pc, #28]	; (d6fb8 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6f9a:	9901      	ldr	r1, [sp, #4]
   d6f9c:	602b      	str	r3, [r5, #0]
   d6f9e:	4630      	mov	r0, r6
   d6fa0:	f7ff ffd9 	bl	d6f56 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d6fa4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d6fa6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d6faa:	f7ff fee0 	bl	d6d6e <_ZN9TCPClient12flush_bufferEv>
}
   d6fae:	b002      	add	sp, #8
   d6fb0:	bd70      	pop	{r4, r5, r6, pc}
   d6fb2:	bf00      	nop
   d6fb4:	000d8bdc 	.word	0x000d8bdc
   d6fb8:	000d8bc0 	.word	0x000d8bc0

000d6fbc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d6fbc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d6fbe:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d6fc2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d6fc4:	f7ff ffd2 	bl	d6f6c <_ZN9TCPClientC1Ei>
}
   d6fc8:	4620      	mov	r0, r4
   d6fca:	bd10      	pop	{r4, pc}

000d6fcc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d6fcc:	b510      	push	{r4, lr}
   d6fce:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6fd0:	6800      	ldr	r0, [r0, #0]
   d6fd2:	2800      	cmp	r0, #0
   d6fd4:	db01      	blt.n	d6fda <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d6fd6:	f7fe fe4f 	bl	d5c78 <sock_close>
    }
}
   d6fda:	4620      	mov	r0, r4
   d6fdc:	bd10      	pop	{r4, pc}

000d6fde <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d6fde:	300c      	adds	r0, #12
   d6fe0:	f7ff bff4 	b.w	d6fcc <_ZN9TCPClient4DataD1Ev>

000d6fe4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6fe8:	4698      	mov	r8, r3
    stop();
   d6fea:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6fec:	b093      	sub	sp, #76	; 0x4c
   d6fee:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d6ff0:	2400      	movs	r4, #0
    stop();
   d6ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d6ff4:	4606      	mov	r6, r0
   d6ff6:	4617      	mov	r7, r2
    stop();
   d6ff8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d6ffa:	4628      	mov	r0, r5
   d6ffc:	466b      	mov	r3, sp
   d6ffe:	4622      	mov	r2, r4
   d7000:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d7002:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7004:	f7fe fd10 	bl	d5a28 <netdb_getaddrinfo>
   d7008:	4605      	mov	r5, r0
   d700a:	2800      	cmp	r0, #0
   d700c:	d163      	bne.n	d70d6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d700e:	9b00      	ldr	r3, [sp, #0]
   d7010:	2b00      	cmp	r3, #0
   d7012:	d04b      	beq.n	d70ac <_ZN9TCPClient7connectEPKctm+0xc8>
   d7014:	695b      	ldr	r3, [r3, #20]
   d7016:	2b00      	cmp	r3, #0
   d7018:	d048      	beq.n	d70ac <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d701a:	a806      	add	r0, sp, #24
   d701c:	f7ff fbde 	bl	d67dc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7020:	9b00      	ldr	r3, [sp, #0]
   d7022:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7024:	7863      	ldrb	r3, [r4, #1]
   d7026:	2b02      	cmp	r3, #2
   d7028:	d104      	bne.n	d7034 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d702a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d702c:	a806      	add	r0, sp, #24
   d702e:	f7ff f907 	bl	d6240 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d7032:	e026      	b.n	d7082 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d7034:	2b0a      	cmp	r3, #10
   d7036:	d124      	bne.n	d7082 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7038:	2211      	movs	r2, #17
   d703a:	4629      	mov	r1, r5
   d703c:	a801      	add	r0, sp, #4
   d703e:	f001 f985 	bl	d834c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7042:	68a3      	ldr	r3, [r4, #8]
   d7044:	2b00      	cmp	r3, #0
   d7046:	d038      	beq.n	d70ba <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7048:	f104 0308 	add.w	r3, r4, #8
   d704c:	f10d 0c04 	add.w	ip, sp, #4
   d7050:	3418      	adds	r4, #24
   d7052:	6818      	ldr	r0, [r3, #0]
   d7054:	6859      	ldr	r1, [r3, #4]
   d7056:	4662      	mov	r2, ip
   d7058:	c203      	stmia	r2!, {r0, r1}
   d705a:	3308      	adds	r3, #8
   d705c:	42a3      	cmp	r3, r4
   d705e:	4694      	mov	ip, r2
   d7060:	d1f7      	bne.n	d7052 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d7062:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7064:	a901      	add	r1, sp, #4
   d7066:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7068:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d706c:	f7ff fbc4 	bl	d67f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d7070:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7074:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7078:	ac07      	add	r4, sp, #28
   d707a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d707c:	f8dc 3000 	ldr.w	r3, [ip]
   d7080:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d7082:	a806      	add	r0, sp, #24
   d7084:	f7ff fbca 	bl	d681c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7088:	b180      	cbz	r0, d70ac <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d708a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d708c:	ad07      	add	r5, sp, #28
   d708e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7092:	4b12      	ldr	r3, [pc, #72]	; (d70dc <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7094:	930c      	str	r3, [sp, #48]	; 0x30
   d7096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7098:	ac0d      	add	r4, sp, #52	; 0x34
   d709a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d709c:	682b      	ldr	r3, [r5, #0]
   d709e:	7023      	strb	r3, [r4, #0]
   d70a0:	463a      	mov	r2, r7
   d70a2:	4643      	mov	r3, r8
   d70a4:	a90c      	add	r1, sp, #48	; 0x30
   d70a6:	4630      	mov	r0, r6
   d70a8:	47c8      	blx	r9
   d70aa:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d70ac:	9800      	ldr	r0, [sp, #0]
   d70ae:	f7fe fcb3 	bl	d5a18 <netdb_freeaddrinfo>
}
   d70b2:	4628      	mov	r0, r5
   d70b4:	b013      	add	sp, #76	; 0x4c
   d70b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d70ba:	68e3      	ldr	r3, [r4, #12]
   d70bc:	2b00      	cmp	r3, #0
   d70be:	d1c3      	bne.n	d7048 <_ZN9TCPClient7connectEPKctm+0x64>
   d70c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d70c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d70c8:	f7fe fd46 	bl	d5b58 <inet_htonl>
   d70cc:	4581      	cmp	r9, r0
   d70ce:	d1bb      	bne.n	d7048 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d70d0:	f104 0114 	add.w	r1, r4, #20
   d70d4:	e7aa      	b.n	d702c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d70d6:	4625      	mov	r5, r4
   d70d8:	e7e8      	b.n	d70ac <_ZN9TCPClient7connectEPKctm+0xc8>
   d70da:	bf00      	nop
   d70dc:	000d8b0c 	.word	0x000d8b0c

000d70e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d70e0:	2200      	movs	r2, #0
   d70e2:	6840      	ldr	r0, [r0, #4]
   d70e4:	4611      	mov	r1, r2
   d70e6:	f7fe bebb 	b.w	d5e60 <network_ready>

000d70ea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d70ea:	2200      	movs	r2, #0
   d70ec:	6840      	ldr	r0, [r0, #4]
   d70ee:	4611      	mov	r1, r2
   d70f0:	f7fe bed6 	b.w	d5ea0 <network_listening>

000d70f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d70f4:	2200      	movs	r2, #0
   d70f6:	6840      	ldr	r0, [r0, #4]
   d70f8:	4611      	mov	r1, r2
   d70fa:	f7fe bee1 	b.w	d5ec0 <network_get_listen_timeout>

000d70fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d70fe:	6840      	ldr	r0, [r0, #4]
   d7100:	2200      	movs	r2, #0
   d7102:	f7fe bed5 	b.w	d5eb0 <network_set_listen_timeout>

000d7106 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7106:	6840      	ldr	r0, [r0, #4]
   d7108:	2200      	movs	r2, #0
   d710a:	f081 0101 	eor.w	r1, r1, #1
   d710e:	f7fe bebf 	b.w	d5e90 <network_listen>

000d7112 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7112:	2300      	movs	r3, #0
   d7114:	6840      	ldr	r0, [r0, #4]
   d7116:	461a      	mov	r2, r3
   d7118:	4619      	mov	r1, r3
   d711a:	f7fe beb1 	b.w	d5e80 <network_off>

000d711e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d711e:	2200      	movs	r2, #0
   d7120:	6840      	ldr	r0, [r0, #4]
   d7122:	4611      	mov	r1, r2
   d7124:	f7fe be8c 	b.w	d5e40 <network_connecting>

000d7128 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7128:	6840      	ldr	r0, [r0, #4]
   d712a:	2200      	movs	r2, #0
   d712c:	2102      	movs	r1, #2
   d712e:	f7fe be8f 	b.w	d5e50 <network_disconnect>

000d7132 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7132:	2300      	movs	r3, #0
   d7134:	6840      	ldr	r0, [r0, #4]
   d7136:	461a      	mov	r2, r3
   d7138:	f7fe be7a 	b.w	d5e30 <network_connect>

000d713c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d713c:	4b02      	ldr	r3, [pc, #8]	; (d7148 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d713e:	2204      	movs	r2, #4
   d7140:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7142:	4a02      	ldr	r2, [pc, #8]	; (d714c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7144:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7146:	4770      	bx	lr
   d7148:	2003e7c4 	.word	0x2003e7c4
   d714c:	000d8c28 	.word	0x000d8c28

000d7150 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7150:	2300      	movs	r3, #0
   d7152:	6840      	ldr	r0, [r0, #4]
   d7154:	461a      	mov	r2, r3
   d7156:	f7fe be6b 	b.w	d5e30 <network_connect>

000d715a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d715a:	6840      	ldr	r0, [r0, #4]
   d715c:	2200      	movs	r2, #0
   d715e:	2102      	movs	r1, #2
   d7160:	f7fe be76 	b.w	d5e50 <network_disconnect>

000d7164 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7164:	2200      	movs	r2, #0
   d7166:	6840      	ldr	r0, [r0, #4]
   d7168:	4611      	mov	r1, r2
   d716a:	f7fe be69 	b.w	d5e40 <network_connecting>

000d716e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d716e:	2200      	movs	r2, #0
   d7170:	6840      	ldr	r0, [r0, #4]
   d7172:	4611      	mov	r1, r2
   d7174:	f7fe be74 	b.w	d5e60 <network_ready>

000d7178 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7178:	2300      	movs	r3, #0
   d717a:	6840      	ldr	r0, [r0, #4]
   d717c:	461a      	mov	r2, r3
   d717e:	4619      	mov	r1, r3
   d7180:	f7fe be76 	b.w	d5e70 <network_on>

000d7184 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7184:	2300      	movs	r3, #0
   d7186:	6840      	ldr	r0, [r0, #4]
   d7188:	461a      	mov	r2, r3
   d718a:	4619      	mov	r1, r3
   d718c:	f7fe be78 	b.w	d5e80 <network_off>

000d7190 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7190:	6840      	ldr	r0, [r0, #4]
   d7192:	2100      	movs	r1, #0
   d7194:	f7fe be9c 	b.w	d5ed0 <network_is_on>

000d7198 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7198:	6840      	ldr	r0, [r0, #4]
   d719a:	2100      	movs	r1, #0
   d719c:	f7fe bea0 	b.w	d5ee0 <network_is_off>

000d71a0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d71a0:	6840      	ldr	r0, [r0, #4]
   d71a2:	2200      	movs	r2, #0
   d71a4:	f081 0101 	eor.w	r1, r1, #1
   d71a8:	f7fe be72 	b.w	d5e90 <network_listen>

000d71ac <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d71ac:	6840      	ldr	r0, [r0, #4]
   d71ae:	2200      	movs	r2, #0
   d71b0:	f7fe be7e 	b.w	d5eb0 <network_set_listen_timeout>

000d71b4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d71b4:	2200      	movs	r2, #0
   d71b6:	6840      	ldr	r0, [r0, #4]
   d71b8:	4611      	mov	r1, r2
   d71ba:	f7fe be81 	b.w	d5ec0 <network_get_listen_timeout>

000d71be <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d71be:	2200      	movs	r2, #0
   d71c0:	6840      	ldr	r0, [r0, #4]
   d71c2:	4611      	mov	r1, r2
   d71c4:	f7fe be6c 	b.w	d5ea0 <network_listening>

000d71c8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d71c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d71cc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d71ce:	b095      	sub	sp, #84	; 0x54
   d71d0:	4616      	mov	r6, r2
   d71d2:	460d      	mov	r5, r1
   d71d4:	4607      	mov	r7, r0
    IPAddress addr;
   d71d6:	f7ff fb01 	bl	d67dc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d71da:	4621      	mov	r1, r4
   d71dc:	2218      	movs	r2, #24
   d71de:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d71e0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d71e2:	f001 f8b3 	bl	d834c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d71e6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d71e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d71ec:	4621      	mov	r1, r4
   d71ee:	466b      	mov	r3, sp
   d71f0:	aa0c      	add	r2, sp, #48	; 0x30
   d71f2:	4630      	mov	r0, r6
   d71f4:	f7fe fc18 	bl	d5a28 <netdb_getaddrinfo>
    if (!r) {
   d71f8:	4604      	mov	r4, r0
   d71fa:	2800      	cmp	r0, #0
   d71fc:	d14c      	bne.n	d7298 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d71fe:	4602      	mov	r2, r0
   d7200:	2101      	movs	r1, #1
   d7202:	6868      	ldr	r0, [r5, #4]
   d7204:	f7fe fe2c 	bl	d5e60 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7208:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d720a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d720c:	4622      	mov	r2, r4
   d720e:	6868      	ldr	r0, [r5, #4]
   d7210:	f7fe fe26 	bl	d5e60 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7214:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7216:	4681      	mov	r9, r0
        bool ok = false;
   d7218:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d721a:	2e00      	cmp	r6, #0
   d721c:	d03c      	beq.n	d7298 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d721e:	2900      	cmp	r1, #0
   d7220:	d13a      	bne.n	d7298 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7222:	6873      	ldr	r3, [r6, #4]
   d7224:	2b02      	cmp	r3, #2
   d7226:	d003      	beq.n	d7230 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7228:	2b0a      	cmp	r3, #10
   d722a:	d011      	beq.n	d7250 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d722c:	69f6      	ldr	r6, [r6, #28]
   d722e:	e7f4      	b.n	d721a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7230:	f1b8 0f00 	cmp.w	r8, #0
   d7234:	d00a      	beq.n	d724c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7236:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7238:	a806      	add	r0, sp, #24
   d723a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d723c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d723e:	f7ff fb1d 	bl	d687c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7244:	1d3c      	adds	r4, r7, #4
   d7246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7248:	682b      	ldr	r3, [r5, #0]
   d724a:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d724c:	4641      	mov	r1, r8
   d724e:	e7ed      	b.n	d722c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7250:	f1b9 0f00 	cmp.w	r9, #0
   d7254:	d101      	bne.n	d725a <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7256:	4649      	mov	r1, r9
   d7258:	e7e8      	b.n	d722c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d725a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d725c:	2210      	movs	r2, #16
   d725e:	a801      	add	r0, sp, #4
   d7260:	f001 f874 	bl	d834c <memset>
                    a.v = 6;
   d7264:	2306      	movs	r3, #6
   d7266:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d726a:	ad01      	add	r5, sp, #4
   d726c:	f104 0308 	add.w	r3, r4, #8
   d7270:	3418      	adds	r4, #24
   d7272:	6818      	ldr	r0, [r3, #0]
   d7274:	6859      	ldr	r1, [r3, #4]
   d7276:	462a      	mov	r2, r5
   d7278:	c203      	stmia	r2!, {r0, r1}
   d727a:	3308      	adds	r3, #8
   d727c:	42a3      	cmp	r3, r4
   d727e:	4615      	mov	r5, r2
   d7280:	d1f7      	bne.n	d7272 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7282:	a901      	add	r1, sp, #4
   d7284:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7286:	ad07      	add	r5, sp, #28
   d7288:	f7ff fab6 	bl	d67f8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d728c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d728e:	1d3c      	adds	r4, r7, #4
   d7290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7292:	682b      	ldr	r3, [r5, #0]
   d7294:	7023      	strb	r3, [r4, #0]
   d7296:	e7de      	b.n	d7256 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7298:	9800      	ldr	r0, [sp, #0]
   d729a:	f7fe fbbd 	bl	d5a18 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d729e:	4638      	mov	r0, r7
   d72a0:	b015      	add	sp, #84	; 0x54
   d72a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d72a8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d72a8:	4b02      	ldr	r3, [pc, #8]	; (d72b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d72aa:	4a03      	ldr	r2, [pc, #12]	; (d72b8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d72ac:	601a      	str	r2, [r3, #0]
   d72ae:	2200      	movs	r2, #0
   d72b0:	605a      	str	r2, [r3, #4]

} // spark
   d72b2:	4770      	bx	lr
   d72b4:	2003e7cc 	.word	0x2003e7cc
   d72b8:	000d8c64 	.word	0x000d8c64

000d72bc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d72bc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d72be:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d72c0:	d902      	bls.n	d72c8 <pinAvailable+0xc>
    return false;
   d72c2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d72c4:	b002      	add	sp, #8
   d72c6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d72c8:	f1a0 030b 	sub.w	r3, r0, #11
   d72cc:	2b02      	cmp	r3, #2
   d72ce:	d81a      	bhi.n	d7306 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d72d0:	4c17      	ldr	r4, [pc, #92]	; (d7330 <pinAvailable+0x74>)
   d72d2:	7821      	ldrb	r1, [r4, #0]
   d72d4:	f3bf 8f5b 	dmb	ish
   d72d8:	f011 0101 	ands.w	r1, r1, #1
   d72dc:	d10b      	bne.n	d72f6 <pinAvailable+0x3a>
   d72de:	4620      	mov	r0, r4
   d72e0:	9101      	str	r1, [sp, #4]
   d72e2:	f7fc feeb 	bl	d40bc <__cxa_guard_acquire>
   d72e6:	9901      	ldr	r1, [sp, #4]
   d72e8:	b128      	cbz	r0, d72f6 <pinAvailable+0x3a>
   d72ea:	4812      	ldr	r0, [pc, #72]	; (d7334 <pinAvailable+0x78>)
   d72ec:	f7fe fe94 	bl	d6018 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d72f0:	4620      	mov	r0, r4
   d72f2:	f7fc fee8 	bl	d40c6 <__cxa_guard_release>
   d72f6:	4b0f      	ldr	r3, [pc, #60]	; (d7334 <pinAvailable+0x78>)
   d72f8:	7818      	ldrb	r0, [r3, #0]
   d72fa:	f7fe fcfd 	bl	d5cf8 <hal_spi_is_enabled>
   d72fe:	2800      	cmp	r0, #0
   d7300:	d1df      	bne.n	d72c2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7302:	2001      	movs	r0, #1
   d7304:	e7de      	b.n	d72c4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7306:	2801      	cmp	r0, #1
   d7308:	d809      	bhi.n	d731e <pinAvailable+0x62>
   d730a:	f000 f8a7 	bl	d745c <_Z19__fetch_global_Wirev>
   d730e:	2100      	movs	r1, #0
   d7310:	7c00      	ldrb	r0, [r0, #16]
   d7312:	f7fe fc99 	bl	d5c48 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7316:	f080 0001 	eor.w	r0, r0, #1
   d731a:	b2c0      	uxtb	r0, r0
   d731c:	e7d2      	b.n	d72c4 <pinAvailable+0x8>
   d731e:	3809      	subs	r0, #9
   d7320:	2801      	cmp	r0, #1
   d7322:	d8ee      	bhi.n	d7302 <pinAvailable+0x46>
   d7324:	f7ff fb94 	bl	d6a50 <_Z22__fetch_global_Serial1v>
   d7328:	7c00      	ldrb	r0, [r0, #16]
   d732a:	f7fe fc55 	bl	d5bd8 <hal_usart_is_enabled>
   d732e:	e7f2      	b.n	d7316 <pinAvailable+0x5a>
   d7330:	2003e55c 	.word	0x2003e55c
   d7334:	2003e560 	.word	0x2003e560

000d7338 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7338:	2823      	cmp	r0, #35	; 0x23
{
   d733a:	b538      	push	{r3, r4, r5, lr}
   d733c:	4604      	mov	r4, r0
   d733e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7340:	d80a      	bhi.n	d7358 <pinMode+0x20>
   d7342:	29ff      	cmp	r1, #255	; 0xff
   d7344:	d008      	beq.n	d7358 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7346:	f7ff ffb9 	bl	d72bc <pinAvailable>
   d734a:	b128      	cbz	r0, d7358 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d734c:	4629      	mov	r1, r5
   d734e:	4620      	mov	r0, r4
}
   d7350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7354:	f7fe bb78 	b.w	d5a48 <HAL_Pin_Mode>
}
   d7358:	bd38      	pop	{r3, r4, r5, pc}

000d735a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d735a:	b538      	push	{r3, r4, r5, lr}
   d735c:	4604      	mov	r4, r0
   d735e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7360:	f7fe fb7a 	bl	d5a58 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7364:	28ff      	cmp	r0, #255	; 0xff
   d7366:	d010      	beq.n	d738a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7368:	2806      	cmp	r0, #6
   d736a:	d804      	bhi.n	d7376 <digitalWrite+0x1c>
   d736c:	234d      	movs	r3, #77	; 0x4d
   d736e:	fa23 f000 	lsr.w	r0, r3, r0
   d7372:	07c3      	lsls	r3, r0, #31
   d7374:	d409      	bmi.n	d738a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7376:	4620      	mov	r0, r4
   d7378:	f7ff ffa0 	bl	d72bc <pinAvailable>
   d737c:	b128      	cbz	r0, d738a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d737e:	4629      	mov	r1, r5
   d7380:	4620      	mov	r0, r4
}
   d7382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7386:	f7fe bb6f 	b.w	d5a68 <HAL_GPIO_Write>
}
   d738a:	bd38      	pop	{r3, r4, r5, pc}

000d738c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d738c:	b510      	push	{r4, lr}
   d738e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7390:	f7fe fb62 	bl	d5a58 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7394:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7396:	b2db      	uxtb	r3, r3
   d7398:	2b01      	cmp	r3, #1
   d739a:	d908      	bls.n	d73ae <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d739c:	4620      	mov	r0, r4
   d739e:	f7ff ff8d 	bl	d72bc <pinAvailable>
   d73a2:	b120      	cbz	r0, d73ae <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d73a4:	4620      	mov	r0, r4
}
   d73a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d73aa:	f7fe bb65 	b.w	d5a78 <HAL_GPIO_Read>
}
   d73ae:	2000      	movs	r0, #0
   d73b0:	bd10      	pop	{r4, pc}

000d73b2 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d73b2:	280d      	cmp	r0, #13
{
   d73b4:	b510      	push	{r4, lr}
   d73b6:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d73b8:	bf9c      	itt	ls
   d73ba:	340e      	addls	r4, #14
   d73bc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d73be:	4620      	mov	r0, r4
   d73c0:	f7ff ff7c 	bl	d72bc <pinAvailable>
   d73c4:	b150      	cbz	r0, d73dc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d73c6:	2103      	movs	r1, #3
   d73c8:	4620      	mov	r0, r4
   d73ca:	f7fe fb35 	bl	d5a38 <HAL_Validate_Pin_Function>
   d73ce:	2803      	cmp	r0, #3
   d73d0:	d104      	bne.n	d73dc <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d73d2:	4620      	mov	r0, r4
}
   d73d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d73d8:	f7fe bb5e 	b.w	d5a98 <hal_adc_read>
}
   d73dc:	2000      	movs	r0, #0
   d73de:	bd10      	pop	{r4, pc}

000d73e0 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   d73e0:	b538      	push	{r3, r4, r5, lr}
   d73e2:	4604      	mov	r4, r0
   d73e4:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   d73e6:	f7ff ff69 	bl	d72bc <pinAvailable>
   d73ea:	b1f0      	cbz	r0, d742a <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   d73ec:	2104      	movs	r1, #4
   d73ee:	4620      	mov	r0, r4
   d73f0:	f7fe fb22 	bl	d5a38 <HAL_Validate_Pin_Function>
   d73f4:	2804      	cmp	r0, #4
   d73f6:	d105      	bne.n	d7404 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   d73f8:	b2a9      	uxth	r1, r5
   d73fa:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   d73fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   d7400:	f7fe bb42 	b.w	d5a88 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   d7404:	2102      	movs	r1, #2
   d7406:	4620      	mov	r0, r4
   d7408:	f7fe fb16 	bl	d5a38 <HAL_Validate_Pin_Function>
   d740c:	2802      	cmp	r0, #2
   d740e:	d10c      	bne.n	d742a <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   d7410:	4620      	mov	r0, r4
   d7412:	f7fe fb21 	bl	d5a58 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   d7416:	2801      	cmp	r0, #1
   d7418:	d001      	beq.n	d741e <_Z11analogWritetm+0x3e>
   d741a:	2804      	cmp	r0, #4
   d741c:	d105      	bne.n	d742a <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   d741e:	4629      	mov	r1, r5
   d7420:	4620      	mov	r0, r4
}
   d7422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   d7426:	f7fe bb3f 	b.w	d5aa8 <hal_pwm_write_ext>
}
   d742a:	bd38      	pop	{r3, r4, r5, pc}

000d742c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d742c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d742e:	2300      	movs	r3, #0
   d7430:	2520      	movs	r5, #32
   d7432:	8043      	strh	r3, [r0, #2]
   d7434:	2314      	movs	r3, #20
{
   d7436:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7438:	8003      	strh	r3, [r0, #0]
   d743a:	6085      	str	r5, [r0, #8]
   d743c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d743e:	4906      	ldr	r1, [pc, #24]	; (d7458 <_Z17acquireWireBufferv+0x2c>)
   d7440:	4628      	mov	r0, r5
   d7442:	f000 f83a 	bl	d74ba <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7446:	4904      	ldr	r1, [pc, #16]	; (d7458 <_Z17acquireWireBufferv+0x2c>)
	};
   d7448:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d744a:	4628      	mov	r0, r5
   d744c:	f000 f835 	bl	d74ba <_ZnajRKSt9nothrow_t>
	};
   d7450:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7452:	4620      	mov	r0, r4
   d7454:	bd38      	pop	{r3, r4, r5, pc}
   d7456:	bf00      	nop
   d7458:	000d8c98 	.word	0x000d8c98

000d745c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d745c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d745e:	4d0f      	ldr	r5, [pc, #60]	; (d749c <_Z19__fetch_global_Wirev+0x40>)
   d7460:	7829      	ldrb	r1, [r5, #0]
   d7462:	f3bf 8f5b 	dmb	ish
   d7466:	f011 0401 	ands.w	r4, r1, #1
{
   d746a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d746c:	d113      	bne.n	d7496 <_Z19__fetch_global_Wirev+0x3a>
   d746e:	4628      	mov	r0, r5
   d7470:	f7fc fe24 	bl	d40bc <__cxa_guard_acquire>
   d7474:	b178      	cbz	r0, d7496 <_Z19__fetch_global_Wirev+0x3a>
   d7476:	a801      	add	r0, sp, #4
   d7478:	f7ff ffd8 	bl	d742c <_Z17acquireWireBufferv>
   d747c:	aa01      	add	r2, sp, #4
   d747e:	4621      	mov	r1, r4
   d7480:	4807      	ldr	r0, [pc, #28]	; (d74a0 <_Z19__fetch_global_Wirev+0x44>)
   d7482:	f7ff fb3b 	bl	d6afc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7486:	4628      	mov	r0, r5
   d7488:	f7fc fe1d 	bl	d40c6 <__cxa_guard_release>
   d748c:	4a05      	ldr	r2, [pc, #20]	; (d74a4 <_Z19__fetch_global_Wirev+0x48>)
   d748e:	4906      	ldr	r1, [pc, #24]	; (d74a8 <_Z19__fetch_global_Wirev+0x4c>)
   d7490:	4803      	ldr	r0, [pc, #12]	; (d74a0 <_Z19__fetch_global_Wirev+0x44>)
   d7492:	f000 f80b 	bl	d74ac <__aeabi_atexit>
	return wire;
}
   d7496:	4802      	ldr	r0, [pc, #8]	; (d74a0 <_Z19__fetch_global_Wirev+0x44>)
   d7498:	b007      	add	sp, #28
   d749a:	bd30      	pop	{r4, r5, pc}
   d749c:	2003e7d8 	.word	0x2003e7d8
   d74a0:	2003e7dc 	.word	0x2003e7dc
   d74a4:	2003e558 	.word	0x2003e558
   d74a8:	000d6aa5 	.word	0x000d6aa5

000d74ac <__aeabi_atexit>:
   d74ac:	460b      	mov	r3, r1
   d74ae:	4601      	mov	r1, r0
   d74b0:	4618      	mov	r0, r3
   d74b2:	f000 bf2f 	b.w	d8314 <__cxa_atexit>

000d74b6 <_ZdlPvj>:
   d74b6:	f7fc bdf2 	b.w	d409e <_ZdlPv>

000d74ba <_ZnajRKSt9nothrow_t>:
   d74ba:	f7fc bdee 	b.w	d409a <_Znaj>
	...

000d74c0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d74c0:	4901      	ldr	r1, [pc, #4]	; (d74c8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d74c2:	f000 b8f9 	b.w	d76b8 <_ZNKSt9type_infoeqERKS_>
   d74c6:	bf00      	nop
   d74c8:	000d8cb4 	.word	0x000d8cb4

000d74cc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d74cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d74ce:	2400      	movs	r4, #0
   d74d0:	2310      	movs	r3, #16
   d74d2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d74d6:	6803      	ldr	r3, [r0, #0]
   d74d8:	9400      	str	r4, [sp, #0]
   d74da:	699e      	ldr	r6, [r3, #24]
   d74dc:	f88d 4004 	strb.w	r4, [sp, #4]
   d74e0:	4615      	mov	r5, r2
   d74e2:	466b      	mov	r3, sp
   d74e4:	6812      	ldr	r2, [r2, #0]
   d74e6:	47b0      	blx	r6
   d74e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d74ec:	f003 0306 	and.w	r3, r3, #6
   d74f0:	2b06      	cmp	r3, #6
   d74f2:	bf03      	ittte	eq
   d74f4:	9b00      	ldreq	r3, [sp, #0]
   d74f6:	602b      	streq	r3, [r5, #0]
   d74f8:	2001      	moveq	r0, #1
   d74fa:	4620      	movne	r0, r4
   d74fc:	b004      	add	sp, #16
   d74fe:	bd70      	pop	{r4, r5, r6, pc}

000d7500 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7500:	9800      	ldr	r0, [sp, #0]
   d7502:	4290      	cmp	r0, r2
   d7504:	bf14      	ite	ne
   d7506:	2001      	movne	r0, #1
   d7508:	2006      	moveq	r0, #6
   d750a:	4770      	bx	lr

000d750c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d750c:	b510      	push	{r4, lr}
   d750e:	4b03      	ldr	r3, [pc, #12]	; (d751c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7510:	6003      	str	r3, [r0, #0]
   d7512:	4604      	mov	r4, r0
   d7514:	f000 f8cd 	bl	d76b2 <_ZNSt9type_infoD1Ev>
   d7518:	4620      	mov	r0, r4
   d751a:	bd10      	pop	{r4, pc}
   d751c:	000d8cf4 	.word	0x000d8cf4

000d7520 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7520:	b510      	push	{r4, lr}
   d7522:	4604      	mov	r4, r0
   d7524:	f7ff fff2 	bl	d750c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7528:	4620      	mov	r0, r4
   d752a:	2108      	movs	r1, #8
   d752c:	f7ff ffc3 	bl	d74b6 <_ZdlPvj>
   d7530:	4620      	mov	r0, r4
   d7532:	bd10      	pop	{r4, pc}

000d7534 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7538:	461f      	mov	r7, r3
   d753a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d753e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7542:	4598      	cmp	r8, r3
   d7544:	4606      	mov	r6, r0
   d7546:	4615      	mov	r5, r2
   d7548:	d107      	bne.n	d755a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d754a:	9907      	ldr	r1, [sp, #28]
   d754c:	f000 f8b4 	bl	d76b8 <_ZNKSt9type_infoeqERKS_>
   d7550:	b118      	cbz	r0, d755a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7552:	7165      	strb	r5, [r4, #5]
   d7554:	2000      	movs	r0, #0
   d7556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d755a:	4639      	mov	r1, r7
   d755c:	4630      	mov	r0, r6
   d755e:	f000 f8ab 	bl	d76b8 <_ZNKSt9type_infoeqERKS_>
   d7562:	2800      	cmp	r0, #0
   d7564:	d0f6      	beq.n	d7554 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7566:	2301      	movs	r3, #1
   d7568:	f8c4 8000 	str.w	r8, [r4]
   d756c:	7125      	strb	r5, [r4, #4]
   d756e:	71a3      	strb	r3, [r4, #6]
   d7570:	e7f0      	b.n	d7554 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7572 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7572:	b538      	push	{r3, r4, r5, lr}
   d7574:	4615      	mov	r5, r2
   d7576:	461c      	mov	r4, r3
   d7578:	f000 f89e 	bl	d76b8 <_ZNKSt9type_infoeqERKS_>
   d757c:	b120      	cbz	r0, d7588 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d757e:	2308      	movs	r3, #8
   d7580:	60e3      	str	r3, [r4, #12]
   d7582:	2306      	movs	r3, #6
   d7584:	6025      	str	r5, [r4, #0]
   d7586:	7123      	strb	r3, [r4, #4]
   d7588:	bd38      	pop	{r3, r4, r5, pc}

000d758a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d758a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d758c:	4605      	mov	r5, r0
   d758e:	460c      	mov	r4, r1
   d7590:	9201      	str	r2, [sp, #4]
   d7592:	461e      	mov	r6, r3
   d7594:	f000 f890 	bl	d76b8 <_ZNKSt9type_infoeqERKS_>
   d7598:	b950      	cbnz	r0, d75b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d759a:	2e03      	cmp	r6, #3
   d759c:	d808      	bhi.n	d75b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d759e:	6823      	ldr	r3, [r4, #0]
   d75a0:	9a01      	ldr	r2, [sp, #4]
   d75a2:	695b      	ldr	r3, [r3, #20]
   d75a4:	4629      	mov	r1, r5
   d75a6:	4620      	mov	r0, r4
   d75a8:	b002      	add	sp, #8
   d75aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d75ae:	4718      	bx	r3
   d75b0:	b002      	add	sp, #8
   d75b2:	bd70      	pop	{r4, r5, r6, pc}

000d75b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d75b4:	b510      	push	{r4, lr}
   d75b6:	4b03      	ldr	r3, [pc, #12]	; (d75c4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d75b8:	6003      	str	r3, [r0, #0]
   d75ba:	4604      	mov	r4, r0
   d75bc:	f7ff ffa6 	bl	d750c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d75c0:	4620      	mov	r0, r4
   d75c2:	bd10      	pop	{r4, pc}
   d75c4:	000d8d54 	.word	0x000d8d54

000d75c8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d75c8:	b510      	push	{r4, lr}
   d75ca:	4604      	mov	r4, r0
   d75cc:	f7ff fff2 	bl	d75b4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d75d0:	4620      	mov	r0, r4
   d75d2:	210c      	movs	r1, #12
   d75d4:	f7ff ff6f 	bl	d74b6 <_ZdlPvj>
   d75d8:	4620      	mov	r0, r4
   d75da:	bd10      	pop	{r4, pc}

000d75dc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d75dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d75de:	9f08      	ldr	r7, [sp, #32]
   d75e0:	4297      	cmp	r7, r2
   d75e2:	4605      	mov	r5, r0
   d75e4:	460e      	mov	r6, r1
   d75e6:	4614      	mov	r4, r2
   d75e8:	d00a      	beq.n	d7600 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d75ea:	68a8      	ldr	r0, [r5, #8]
   d75ec:	6802      	ldr	r2, [r0, #0]
   d75ee:	9708      	str	r7, [sp, #32]
   d75f0:	6a15      	ldr	r5, [r2, #32]
   d75f2:	4631      	mov	r1, r6
   d75f4:	4622      	mov	r2, r4
   d75f6:	46ac      	mov	ip, r5
   d75f8:	b003      	add	sp, #12
   d75fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d75fe:	4760      	bx	ip
   d7600:	4619      	mov	r1, r3
   d7602:	9301      	str	r3, [sp, #4]
   d7604:	f000 f858 	bl	d76b8 <_ZNKSt9type_infoeqERKS_>
   d7608:	9b01      	ldr	r3, [sp, #4]
   d760a:	2800      	cmp	r0, #0
   d760c:	d0ed      	beq.n	d75ea <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d760e:	2006      	movs	r0, #6
   d7610:	b003      	add	sp, #12
   d7612:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7614 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7614:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7618:	460d      	mov	r5, r1
   d761a:	4619      	mov	r1, r3
   d761c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7620:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7624:	4681      	mov	r9, r0
   d7626:	4617      	mov	r7, r2
   d7628:	4698      	mov	r8, r3
   d762a:	f000 f845 	bl	d76b8 <_ZNKSt9type_infoeqERKS_>
   d762e:	b190      	cbz	r0, d7656 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7630:	2d00      	cmp	r5, #0
   d7632:	6034      	str	r4, [r6, #0]
   d7634:	7137      	strb	r7, [r6, #4]
   d7636:	db09      	blt.n	d764c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7638:	1961      	adds	r1, r4, r5
   d763a:	458a      	cmp	sl, r1
   d763c:	bf0c      	ite	eq
   d763e:	2106      	moveq	r1, #6
   d7640:	2101      	movne	r1, #1
   d7642:	71b1      	strb	r1, [r6, #6]
   d7644:	2000      	movs	r0, #0
   d7646:	b001      	add	sp, #4
   d7648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d764c:	3502      	adds	r5, #2
   d764e:	d1f9      	bne.n	d7644 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7650:	2301      	movs	r3, #1
   d7652:	71b3      	strb	r3, [r6, #6]
   d7654:	e7f6      	b.n	d7644 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7656:	4554      	cmp	r4, sl
   d7658:	d106      	bne.n	d7668 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d765a:	4659      	mov	r1, fp
   d765c:	4648      	mov	r0, r9
   d765e:	f000 f82b 	bl	d76b8 <_ZNKSt9type_infoeqERKS_>
   d7662:	b108      	cbz	r0, d7668 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7664:	7177      	strb	r7, [r6, #5]
   d7666:	e7ed      	b.n	d7644 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7668:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d766c:	6803      	ldr	r3, [r0, #0]
   d766e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7672:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7676:	69dc      	ldr	r4, [r3, #28]
   d7678:	463a      	mov	r2, r7
   d767a:	4643      	mov	r3, r8
   d767c:	4629      	mov	r1, r5
   d767e:	46a4      	mov	ip, r4
   d7680:	b001      	add	sp, #4
   d7682:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7686:	4760      	bx	ip

000d7688 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d768c:	4607      	mov	r7, r0
   d768e:	460c      	mov	r4, r1
   d7690:	4615      	mov	r5, r2
   d7692:	461e      	mov	r6, r3
   d7694:	f7ff ff6d 	bl	d7572 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7698:	b948      	cbnz	r0, d76ae <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d769a:	68b8      	ldr	r0, [r7, #8]
   d769c:	6803      	ldr	r3, [r0, #0]
   d769e:	699f      	ldr	r7, [r3, #24]
   d76a0:	462a      	mov	r2, r5
   d76a2:	4633      	mov	r3, r6
   d76a4:	4621      	mov	r1, r4
   d76a6:	46bc      	mov	ip, r7
   d76a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d76ac:	4760      	bx	ip
   d76ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d76b2 <_ZNSt9type_infoD1Ev>:
   d76b2:	4770      	bx	lr

000d76b4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d76b4:	2000      	movs	r0, #0
   d76b6:	4770      	bx	lr

000d76b8 <_ZNKSt9type_infoeqERKS_>:
   d76b8:	4281      	cmp	r1, r0
   d76ba:	b508      	push	{r3, lr}
   d76bc:	d00e      	beq.n	d76dc <_ZNKSt9type_infoeqERKS_+0x24>
   d76be:	6840      	ldr	r0, [r0, #4]
   d76c0:	7803      	ldrb	r3, [r0, #0]
   d76c2:	2b2a      	cmp	r3, #42	; 0x2a
   d76c4:	d00c      	beq.n	d76e0 <_ZNKSt9type_infoeqERKS_+0x28>
   d76c6:	6849      	ldr	r1, [r1, #4]
   d76c8:	780b      	ldrb	r3, [r1, #0]
   d76ca:	2b2a      	cmp	r3, #42	; 0x2a
   d76cc:	bf08      	it	eq
   d76ce:	3101      	addeq	r1, #1
   d76d0:	f000 fe68 	bl	d83a4 <strcmp>
   d76d4:	fab0 f080 	clz	r0, r0
   d76d8:	0940      	lsrs	r0, r0, #5
   d76da:	bd08      	pop	{r3, pc}
   d76dc:	2001      	movs	r0, #1
   d76de:	e7fc      	b.n	d76da <_ZNKSt9type_infoeqERKS_+0x22>
   d76e0:	2000      	movs	r0, #0
   d76e2:	e7fa      	b.n	d76da <_ZNKSt9type_infoeqERKS_+0x22>

000d76e4 <__aeabi_drsub>:
   d76e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d76e8:	e002      	b.n	d76f0 <__adddf3>
   d76ea:	bf00      	nop

000d76ec <__aeabi_dsub>:
   d76ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d76f0 <__adddf3>:
   d76f0:	b530      	push	{r4, r5, lr}
   d76f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d76f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d76fa:	ea94 0f05 	teq	r4, r5
   d76fe:	bf08      	it	eq
   d7700:	ea90 0f02 	teqeq	r0, r2
   d7704:	bf1f      	itttt	ne
   d7706:	ea54 0c00 	orrsne.w	ip, r4, r0
   d770a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d770e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7712:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7716:	f000 80e2 	beq.w	d78de <__adddf3+0x1ee>
   d771a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d771e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7722:	bfb8      	it	lt
   d7724:	426d      	neglt	r5, r5
   d7726:	dd0c      	ble.n	d7742 <__adddf3+0x52>
   d7728:	442c      	add	r4, r5
   d772a:	ea80 0202 	eor.w	r2, r0, r2
   d772e:	ea81 0303 	eor.w	r3, r1, r3
   d7732:	ea82 0000 	eor.w	r0, r2, r0
   d7736:	ea83 0101 	eor.w	r1, r3, r1
   d773a:	ea80 0202 	eor.w	r2, r0, r2
   d773e:	ea81 0303 	eor.w	r3, r1, r3
   d7742:	2d36      	cmp	r5, #54	; 0x36
   d7744:	bf88      	it	hi
   d7746:	bd30      	pophi	{r4, r5, pc}
   d7748:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d774c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7750:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7754:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7758:	d002      	beq.n	d7760 <__adddf3+0x70>
   d775a:	4240      	negs	r0, r0
   d775c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7760:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7764:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7768:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d776c:	d002      	beq.n	d7774 <__adddf3+0x84>
   d776e:	4252      	negs	r2, r2
   d7770:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7774:	ea94 0f05 	teq	r4, r5
   d7778:	f000 80a7 	beq.w	d78ca <__adddf3+0x1da>
   d777c:	f1a4 0401 	sub.w	r4, r4, #1
   d7780:	f1d5 0e20 	rsbs	lr, r5, #32
   d7784:	db0d      	blt.n	d77a2 <__adddf3+0xb2>
   d7786:	fa02 fc0e 	lsl.w	ip, r2, lr
   d778a:	fa22 f205 	lsr.w	r2, r2, r5
   d778e:	1880      	adds	r0, r0, r2
   d7790:	f141 0100 	adc.w	r1, r1, #0
   d7794:	fa03 f20e 	lsl.w	r2, r3, lr
   d7798:	1880      	adds	r0, r0, r2
   d779a:	fa43 f305 	asr.w	r3, r3, r5
   d779e:	4159      	adcs	r1, r3
   d77a0:	e00e      	b.n	d77c0 <__adddf3+0xd0>
   d77a2:	f1a5 0520 	sub.w	r5, r5, #32
   d77a6:	f10e 0e20 	add.w	lr, lr, #32
   d77aa:	2a01      	cmp	r2, #1
   d77ac:	fa03 fc0e 	lsl.w	ip, r3, lr
   d77b0:	bf28      	it	cs
   d77b2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d77b6:	fa43 f305 	asr.w	r3, r3, r5
   d77ba:	18c0      	adds	r0, r0, r3
   d77bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d77c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d77c4:	d507      	bpl.n	d77d6 <__adddf3+0xe6>
   d77c6:	f04f 0e00 	mov.w	lr, #0
   d77ca:	f1dc 0c00 	rsbs	ip, ip, #0
   d77ce:	eb7e 0000 	sbcs.w	r0, lr, r0
   d77d2:	eb6e 0101 	sbc.w	r1, lr, r1
   d77d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d77da:	d31b      	bcc.n	d7814 <__adddf3+0x124>
   d77dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d77e0:	d30c      	bcc.n	d77fc <__adddf3+0x10c>
   d77e2:	0849      	lsrs	r1, r1, #1
   d77e4:	ea5f 0030 	movs.w	r0, r0, rrx
   d77e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d77ec:	f104 0401 	add.w	r4, r4, #1
   d77f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d77f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d77f8:	f080 809a 	bcs.w	d7930 <__adddf3+0x240>
   d77fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7800:	bf08      	it	eq
   d7802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7806:	f150 0000 	adcs.w	r0, r0, #0
   d780a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d780e:	ea41 0105 	orr.w	r1, r1, r5
   d7812:	bd30      	pop	{r4, r5, pc}
   d7814:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7818:	4140      	adcs	r0, r0
   d781a:	eb41 0101 	adc.w	r1, r1, r1
   d781e:	3c01      	subs	r4, #1
   d7820:	bf28      	it	cs
   d7822:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7826:	d2e9      	bcs.n	d77fc <__adddf3+0x10c>
   d7828:	f091 0f00 	teq	r1, #0
   d782c:	bf04      	itt	eq
   d782e:	4601      	moveq	r1, r0
   d7830:	2000      	moveq	r0, #0
   d7832:	fab1 f381 	clz	r3, r1
   d7836:	bf08      	it	eq
   d7838:	3320      	addeq	r3, #32
   d783a:	f1a3 030b 	sub.w	r3, r3, #11
   d783e:	f1b3 0220 	subs.w	r2, r3, #32
   d7842:	da0c      	bge.n	d785e <__adddf3+0x16e>
   d7844:	320c      	adds	r2, #12
   d7846:	dd08      	ble.n	d785a <__adddf3+0x16a>
   d7848:	f102 0c14 	add.w	ip, r2, #20
   d784c:	f1c2 020c 	rsb	r2, r2, #12
   d7850:	fa01 f00c 	lsl.w	r0, r1, ip
   d7854:	fa21 f102 	lsr.w	r1, r1, r2
   d7858:	e00c      	b.n	d7874 <__adddf3+0x184>
   d785a:	f102 0214 	add.w	r2, r2, #20
   d785e:	bfd8      	it	le
   d7860:	f1c2 0c20 	rsble	ip, r2, #32
   d7864:	fa01 f102 	lsl.w	r1, r1, r2
   d7868:	fa20 fc0c 	lsr.w	ip, r0, ip
   d786c:	bfdc      	itt	le
   d786e:	ea41 010c 	orrle.w	r1, r1, ip
   d7872:	4090      	lslle	r0, r2
   d7874:	1ae4      	subs	r4, r4, r3
   d7876:	bfa2      	ittt	ge
   d7878:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d787c:	4329      	orrge	r1, r5
   d787e:	bd30      	popge	{r4, r5, pc}
   d7880:	ea6f 0404 	mvn.w	r4, r4
   d7884:	3c1f      	subs	r4, #31
   d7886:	da1c      	bge.n	d78c2 <__adddf3+0x1d2>
   d7888:	340c      	adds	r4, #12
   d788a:	dc0e      	bgt.n	d78aa <__adddf3+0x1ba>
   d788c:	f104 0414 	add.w	r4, r4, #20
   d7890:	f1c4 0220 	rsb	r2, r4, #32
   d7894:	fa20 f004 	lsr.w	r0, r0, r4
   d7898:	fa01 f302 	lsl.w	r3, r1, r2
   d789c:	ea40 0003 	orr.w	r0, r0, r3
   d78a0:	fa21 f304 	lsr.w	r3, r1, r4
   d78a4:	ea45 0103 	orr.w	r1, r5, r3
   d78a8:	bd30      	pop	{r4, r5, pc}
   d78aa:	f1c4 040c 	rsb	r4, r4, #12
   d78ae:	f1c4 0220 	rsb	r2, r4, #32
   d78b2:	fa20 f002 	lsr.w	r0, r0, r2
   d78b6:	fa01 f304 	lsl.w	r3, r1, r4
   d78ba:	ea40 0003 	orr.w	r0, r0, r3
   d78be:	4629      	mov	r1, r5
   d78c0:	bd30      	pop	{r4, r5, pc}
   d78c2:	fa21 f004 	lsr.w	r0, r1, r4
   d78c6:	4629      	mov	r1, r5
   d78c8:	bd30      	pop	{r4, r5, pc}
   d78ca:	f094 0f00 	teq	r4, #0
   d78ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d78d2:	bf06      	itte	eq
   d78d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d78d8:	3401      	addeq	r4, #1
   d78da:	3d01      	subne	r5, #1
   d78dc:	e74e      	b.n	d777c <__adddf3+0x8c>
   d78de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d78e2:	bf18      	it	ne
   d78e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d78e8:	d029      	beq.n	d793e <__adddf3+0x24e>
   d78ea:	ea94 0f05 	teq	r4, r5
   d78ee:	bf08      	it	eq
   d78f0:	ea90 0f02 	teqeq	r0, r2
   d78f4:	d005      	beq.n	d7902 <__adddf3+0x212>
   d78f6:	ea54 0c00 	orrs.w	ip, r4, r0
   d78fa:	bf04      	itt	eq
   d78fc:	4619      	moveq	r1, r3
   d78fe:	4610      	moveq	r0, r2
   d7900:	bd30      	pop	{r4, r5, pc}
   d7902:	ea91 0f03 	teq	r1, r3
   d7906:	bf1e      	ittt	ne
   d7908:	2100      	movne	r1, #0
   d790a:	2000      	movne	r0, #0
   d790c:	bd30      	popne	{r4, r5, pc}
   d790e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7912:	d105      	bne.n	d7920 <__adddf3+0x230>
   d7914:	0040      	lsls	r0, r0, #1
   d7916:	4149      	adcs	r1, r1
   d7918:	bf28      	it	cs
   d791a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d791e:	bd30      	pop	{r4, r5, pc}
   d7920:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7924:	bf3c      	itt	cc
   d7926:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d792a:	bd30      	popcc	{r4, r5, pc}
   d792c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7930:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7938:	f04f 0000 	mov.w	r0, #0
   d793c:	bd30      	pop	{r4, r5, pc}
   d793e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7942:	bf1a      	itte	ne
   d7944:	4619      	movne	r1, r3
   d7946:	4610      	movne	r0, r2
   d7948:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d794c:	bf1c      	itt	ne
   d794e:	460b      	movne	r3, r1
   d7950:	4602      	movne	r2, r0
   d7952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7956:	bf06      	itte	eq
   d7958:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d795c:	ea91 0f03 	teqeq	r1, r3
   d7960:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7964:	bd30      	pop	{r4, r5, pc}
   d7966:	bf00      	nop

000d7968 <__aeabi_ui2d>:
   d7968:	f090 0f00 	teq	r0, #0
   d796c:	bf04      	itt	eq
   d796e:	2100      	moveq	r1, #0
   d7970:	4770      	bxeq	lr
   d7972:	b530      	push	{r4, r5, lr}
   d7974:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7978:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d797c:	f04f 0500 	mov.w	r5, #0
   d7980:	f04f 0100 	mov.w	r1, #0
   d7984:	e750      	b.n	d7828 <__adddf3+0x138>
   d7986:	bf00      	nop

000d7988 <__aeabi_i2d>:
   d7988:	f090 0f00 	teq	r0, #0
   d798c:	bf04      	itt	eq
   d798e:	2100      	moveq	r1, #0
   d7990:	4770      	bxeq	lr
   d7992:	b530      	push	{r4, r5, lr}
   d7994:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7998:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d799c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d79a0:	bf48      	it	mi
   d79a2:	4240      	negmi	r0, r0
   d79a4:	f04f 0100 	mov.w	r1, #0
   d79a8:	e73e      	b.n	d7828 <__adddf3+0x138>
   d79aa:	bf00      	nop

000d79ac <__aeabi_f2d>:
   d79ac:	0042      	lsls	r2, r0, #1
   d79ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d79b2:	ea4f 0131 	mov.w	r1, r1, rrx
   d79b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d79ba:	bf1f      	itttt	ne
   d79bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d79c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d79c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d79c8:	4770      	bxne	lr
   d79ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d79ce:	bf08      	it	eq
   d79d0:	4770      	bxeq	lr
   d79d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d79d6:	bf04      	itt	eq
   d79d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d79dc:	4770      	bxeq	lr
   d79de:	b530      	push	{r4, r5, lr}
   d79e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d79e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d79e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d79ec:	e71c      	b.n	d7828 <__adddf3+0x138>
   d79ee:	bf00      	nop

000d79f0 <__aeabi_ul2d>:
   d79f0:	ea50 0201 	orrs.w	r2, r0, r1
   d79f4:	bf08      	it	eq
   d79f6:	4770      	bxeq	lr
   d79f8:	b530      	push	{r4, r5, lr}
   d79fa:	f04f 0500 	mov.w	r5, #0
   d79fe:	e00a      	b.n	d7a16 <__aeabi_l2d+0x16>

000d7a00 <__aeabi_l2d>:
   d7a00:	ea50 0201 	orrs.w	r2, r0, r1
   d7a04:	bf08      	it	eq
   d7a06:	4770      	bxeq	lr
   d7a08:	b530      	push	{r4, r5, lr}
   d7a0a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7a0e:	d502      	bpl.n	d7a16 <__aeabi_l2d+0x16>
   d7a10:	4240      	negs	r0, r0
   d7a12:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7a16:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7a1a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7a1e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7a22:	f43f aed8 	beq.w	d77d6 <__adddf3+0xe6>
   d7a26:	f04f 0203 	mov.w	r2, #3
   d7a2a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7a2e:	bf18      	it	ne
   d7a30:	3203      	addne	r2, #3
   d7a32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7a36:	bf18      	it	ne
   d7a38:	3203      	addne	r2, #3
   d7a3a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7a3e:	f1c2 0320 	rsb	r3, r2, #32
   d7a42:	fa00 fc03 	lsl.w	ip, r0, r3
   d7a46:	fa20 f002 	lsr.w	r0, r0, r2
   d7a4a:	fa01 fe03 	lsl.w	lr, r1, r3
   d7a4e:	ea40 000e 	orr.w	r0, r0, lr
   d7a52:	fa21 f102 	lsr.w	r1, r1, r2
   d7a56:	4414      	add	r4, r2
   d7a58:	e6bd      	b.n	d77d6 <__adddf3+0xe6>
   d7a5a:	bf00      	nop

000d7a5c <__aeabi_dmul>:
   d7a5c:	b570      	push	{r4, r5, r6, lr}
   d7a5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7a62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7a66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7a6a:	bf1d      	ittte	ne
   d7a6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7a70:	ea94 0f0c 	teqne	r4, ip
   d7a74:	ea95 0f0c 	teqne	r5, ip
   d7a78:	f000 f8de 	bleq	d7c38 <__aeabi_dmul+0x1dc>
   d7a7c:	442c      	add	r4, r5
   d7a7e:	ea81 0603 	eor.w	r6, r1, r3
   d7a82:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7a86:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d7a8a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d7a8e:	bf18      	it	ne
   d7a90:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7a94:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7a9c:	d038      	beq.n	d7b10 <__aeabi_dmul+0xb4>
   d7a9e:	fba0 ce02 	umull	ip, lr, r0, r2
   d7aa2:	f04f 0500 	mov.w	r5, #0
   d7aa6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d7aaa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d7aae:	fbe0 e503 	umlal	lr, r5, r0, r3
   d7ab2:	f04f 0600 	mov.w	r6, #0
   d7ab6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7aba:	f09c 0f00 	teq	ip, #0
   d7abe:	bf18      	it	ne
   d7ac0:	f04e 0e01 	orrne.w	lr, lr, #1
   d7ac4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7ac8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7acc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d7ad0:	d204      	bcs.n	d7adc <__aeabi_dmul+0x80>
   d7ad2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7ad6:	416d      	adcs	r5, r5
   d7ad8:	eb46 0606 	adc.w	r6, r6, r6
   d7adc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d7ae0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7ae4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7ae8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7aec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d7af0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7af4:	bf88      	it	hi
   d7af6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7afa:	d81e      	bhi.n	d7b3a <__aeabi_dmul+0xde>
   d7afc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7b00:	bf08      	it	eq
   d7b02:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7b06:	f150 0000 	adcs.w	r0, r0, #0
   d7b0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7b0e:	bd70      	pop	{r4, r5, r6, pc}
   d7b10:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7b14:	ea46 0101 	orr.w	r1, r6, r1
   d7b18:	ea40 0002 	orr.w	r0, r0, r2
   d7b1c:	ea81 0103 	eor.w	r1, r1, r3
   d7b20:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7b24:	bfc2      	ittt	gt
   d7b26:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7b2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7b2e:	bd70      	popgt	{r4, r5, r6, pc}
   d7b30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7b34:	f04f 0e00 	mov.w	lr, #0
   d7b38:	3c01      	subs	r4, #1
   d7b3a:	f300 80ab 	bgt.w	d7c94 <__aeabi_dmul+0x238>
   d7b3e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7b42:	bfde      	ittt	le
   d7b44:	2000      	movle	r0, #0
   d7b46:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7b4a:	bd70      	pople	{r4, r5, r6, pc}
   d7b4c:	f1c4 0400 	rsb	r4, r4, #0
   d7b50:	3c20      	subs	r4, #32
   d7b52:	da35      	bge.n	d7bc0 <__aeabi_dmul+0x164>
   d7b54:	340c      	adds	r4, #12
   d7b56:	dc1b      	bgt.n	d7b90 <__aeabi_dmul+0x134>
   d7b58:	f104 0414 	add.w	r4, r4, #20
   d7b5c:	f1c4 0520 	rsb	r5, r4, #32
   d7b60:	fa00 f305 	lsl.w	r3, r0, r5
   d7b64:	fa20 f004 	lsr.w	r0, r0, r4
   d7b68:	fa01 f205 	lsl.w	r2, r1, r5
   d7b6c:	ea40 0002 	orr.w	r0, r0, r2
   d7b70:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7b74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7b78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7b7c:	fa21 f604 	lsr.w	r6, r1, r4
   d7b80:	eb42 0106 	adc.w	r1, r2, r6
   d7b84:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7b88:	bf08      	it	eq
   d7b8a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7b8e:	bd70      	pop	{r4, r5, r6, pc}
   d7b90:	f1c4 040c 	rsb	r4, r4, #12
   d7b94:	f1c4 0520 	rsb	r5, r4, #32
   d7b98:	fa00 f304 	lsl.w	r3, r0, r4
   d7b9c:	fa20 f005 	lsr.w	r0, r0, r5
   d7ba0:	fa01 f204 	lsl.w	r2, r1, r4
   d7ba4:	ea40 0002 	orr.w	r0, r0, r2
   d7ba8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7bac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7bb0:	f141 0100 	adc.w	r1, r1, #0
   d7bb4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7bb8:	bf08      	it	eq
   d7bba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7bbe:	bd70      	pop	{r4, r5, r6, pc}
   d7bc0:	f1c4 0520 	rsb	r5, r4, #32
   d7bc4:	fa00 f205 	lsl.w	r2, r0, r5
   d7bc8:	ea4e 0e02 	orr.w	lr, lr, r2
   d7bcc:	fa20 f304 	lsr.w	r3, r0, r4
   d7bd0:	fa01 f205 	lsl.w	r2, r1, r5
   d7bd4:	ea43 0302 	orr.w	r3, r3, r2
   d7bd8:	fa21 f004 	lsr.w	r0, r1, r4
   d7bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7be0:	fa21 f204 	lsr.w	r2, r1, r4
   d7be4:	ea20 0002 	bic.w	r0, r0, r2
   d7be8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7bec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7bf0:	bf08      	it	eq
   d7bf2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7bf6:	bd70      	pop	{r4, r5, r6, pc}
   d7bf8:	f094 0f00 	teq	r4, #0
   d7bfc:	d10f      	bne.n	d7c1e <__aeabi_dmul+0x1c2>
   d7bfe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7c02:	0040      	lsls	r0, r0, #1
   d7c04:	eb41 0101 	adc.w	r1, r1, r1
   d7c08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c0c:	bf08      	it	eq
   d7c0e:	3c01      	subeq	r4, #1
   d7c10:	d0f7      	beq.n	d7c02 <__aeabi_dmul+0x1a6>
   d7c12:	ea41 0106 	orr.w	r1, r1, r6
   d7c16:	f095 0f00 	teq	r5, #0
   d7c1a:	bf18      	it	ne
   d7c1c:	4770      	bxne	lr
   d7c1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7c22:	0052      	lsls	r2, r2, #1
   d7c24:	eb43 0303 	adc.w	r3, r3, r3
   d7c28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7c2c:	bf08      	it	eq
   d7c2e:	3d01      	subeq	r5, #1
   d7c30:	d0f7      	beq.n	d7c22 <__aeabi_dmul+0x1c6>
   d7c32:	ea43 0306 	orr.w	r3, r3, r6
   d7c36:	4770      	bx	lr
   d7c38:	ea94 0f0c 	teq	r4, ip
   d7c3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7c40:	bf18      	it	ne
   d7c42:	ea95 0f0c 	teqne	r5, ip
   d7c46:	d00c      	beq.n	d7c62 <__aeabi_dmul+0x206>
   d7c48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7c4c:	bf18      	it	ne
   d7c4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7c52:	d1d1      	bne.n	d7bf8 <__aeabi_dmul+0x19c>
   d7c54:	ea81 0103 	eor.w	r1, r1, r3
   d7c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7c5c:	f04f 0000 	mov.w	r0, #0
   d7c60:	bd70      	pop	{r4, r5, r6, pc}
   d7c62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7c66:	bf06      	itte	eq
   d7c68:	4610      	moveq	r0, r2
   d7c6a:	4619      	moveq	r1, r3
   d7c6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7c70:	d019      	beq.n	d7ca6 <__aeabi_dmul+0x24a>
   d7c72:	ea94 0f0c 	teq	r4, ip
   d7c76:	d102      	bne.n	d7c7e <__aeabi_dmul+0x222>
   d7c78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7c7c:	d113      	bne.n	d7ca6 <__aeabi_dmul+0x24a>
   d7c7e:	ea95 0f0c 	teq	r5, ip
   d7c82:	d105      	bne.n	d7c90 <__aeabi_dmul+0x234>
   d7c84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7c88:	bf1c      	itt	ne
   d7c8a:	4610      	movne	r0, r2
   d7c8c:	4619      	movne	r1, r3
   d7c8e:	d10a      	bne.n	d7ca6 <__aeabi_dmul+0x24a>
   d7c90:	ea81 0103 	eor.w	r1, r1, r3
   d7c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7c98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7c9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7ca0:	f04f 0000 	mov.w	r0, #0
   d7ca4:	bd70      	pop	{r4, r5, r6, pc}
   d7ca6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7caa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d7cae:	bd70      	pop	{r4, r5, r6, pc}

000d7cb0 <__aeabi_ddiv>:
   d7cb0:	b570      	push	{r4, r5, r6, lr}
   d7cb2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7cb6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7cba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d7cbe:	bf1d      	ittte	ne
   d7cc0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7cc4:	ea94 0f0c 	teqne	r4, ip
   d7cc8:	ea95 0f0c 	teqne	r5, ip
   d7ccc:	f000 f8a7 	bleq	d7e1e <__aeabi_ddiv+0x16e>
   d7cd0:	eba4 0405 	sub.w	r4, r4, r5
   d7cd4:	ea81 0e03 	eor.w	lr, r1, r3
   d7cd8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7cdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7ce0:	f000 8088 	beq.w	d7df4 <__aeabi_ddiv+0x144>
   d7ce4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7ce8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7cec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d7cf0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7cf4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7cf8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7cfc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7d00:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7d04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7d08:	429d      	cmp	r5, r3
   d7d0a:	bf08      	it	eq
   d7d0c:	4296      	cmpeq	r6, r2
   d7d0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7d12:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7d16:	d202      	bcs.n	d7d1e <__aeabi_ddiv+0x6e>
   d7d18:	085b      	lsrs	r3, r3, #1
   d7d1a:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d1e:	1ab6      	subs	r6, r6, r2
   d7d20:	eb65 0503 	sbc.w	r5, r5, r3
   d7d24:	085b      	lsrs	r3, r3, #1
   d7d26:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d7d2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7d32:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d36:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d3a:	bf22      	ittt	cs
   d7d3c:	1ab6      	subcs	r6, r6, r2
   d7d3e:	4675      	movcs	r5, lr
   d7d40:	ea40 000c 	orrcs.w	r0, r0, ip
   d7d44:	085b      	lsrs	r3, r3, #1
   d7d46:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d4a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d52:	bf22      	ittt	cs
   d7d54:	1ab6      	subcs	r6, r6, r2
   d7d56:	4675      	movcs	r5, lr
   d7d58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7d5c:	085b      	lsrs	r3, r3, #1
   d7d5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d62:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d66:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d6a:	bf22      	ittt	cs
   d7d6c:	1ab6      	subcs	r6, r6, r2
   d7d6e:	4675      	movcs	r5, lr
   d7d70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7d74:	085b      	lsrs	r3, r3, #1
   d7d76:	ea4f 0232 	mov.w	r2, r2, rrx
   d7d7a:	ebb6 0e02 	subs.w	lr, r6, r2
   d7d7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7d82:	bf22      	ittt	cs
   d7d84:	1ab6      	subcs	r6, r6, r2
   d7d86:	4675      	movcs	r5, lr
   d7d88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7d8c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7d90:	d018      	beq.n	d7dc4 <__aeabi_ddiv+0x114>
   d7d92:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7d96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7d9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d7d9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d7da2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d7da6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d7daa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d7dae:	d1c0      	bne.n	d7d32 <__aeabi_ddiv+0x82>
   d7db0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7db4:	d10b      	bne.n	d7dce <__aeabi_ddiv+0x11e>
   d7db6:	ea41 0100 	orr.w	r1, r1, r0
   d7dba:	f04f 0000 	mov.w	r0, #0
   d7dbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d7dc2:	e7b6      	b.n	d7d32 <__aeabi_ddiv+0x82>
   d7dc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7dc8:	bf04      	itt	eq
   d7dca:	4301      	orreq	r1, r0
   d7dcc:	2000      	moveq	r0, #0
   d7dce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7dd2:	bf88      	it	hi
   d7dd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7dd8:	f63f aeaf 	bhi.w	d7b3a <__aeabi_dmul+0xde>
   d7ddc:	ebb5 0c03 	subs.w	ip, r5, r3
   d7de0:	bf04      	itt	eq
   d7de2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7de6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7dea:	f150 0000 	adcs.w	r0, r0, #0
   d7dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7df2:	bd70      	pop	{r4, r5, r6, pc}
   d7df4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7df8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7dfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7e00:	bfc2      	ittt	gt
   d7e02:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7e06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7e0a:	bd70      	popgt	{r4, r5, r6, pc}
   d7e0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7e10:	f04f 0e00 	mov.w	lr, #0
   d7e14:	3c01      	subs	r4, #1
   d7e16:	e690      	b.n	d7b3a <__aeabi_dmul+0xde>
   d7e18:	ea45 0e06 	orr.w	lr, r5, r6
   d7e1c:	e68d      	b.n	d7b3a <__aeabi_dmul+0xde>
   d7e1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7e22:	ea94 0f0c 	teq	r4, ip
   d7e26:	bf08      	it	eq
   d7e28:	ea95 0f0c 	teqeq	r5, ip
   d7e2c:	f43f af3b 	beq.w	d7ca6 <__aeabi_dmul+0x24a>
   d7e30:	ea94 0f0c 	teq	r4, ip
   d7e34:	d10a      	bne.n	d7e4c <__aeabi_ddiv+0x19c>
   d7e36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7e3a:	f47f af34 	bne.w	d7ca6 <__aeabi_dmul+0x24a>
   d7e3e:	ea95 0f0c 	teq	r5, ip
   d7e42:	f47f af25 	bne.w	d7c90 <__aeabi_dmul+0x234>
   d7e46:	4610      	mov	r0, r2
   d7e48:	4619      	mov	r1, r3
   d7e4a:	e72c      	b.n	d7ca6 <__aeabi_dmul+0x24a>
   d7e4c:	ea95 0f0c 	teq	r5, ip
   d7e50:	d106      	bne.n	d7e60 <__aeabi_ddiv+0x1b0>
   d7e52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7e56:	f43f aefd 	beq.w	d7c54 <__aeabi_dmul+0x1f8>
   d7e5a:	4610      	mov	r0, r2
   d7e5c:	4619      	mov	r1, r3
   d7e5e:	e722      	b.n	d7ca6 <__aeabi_dmul+0x24a>
   d7e60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7e64:	bf18      	it	ne
   d7e66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7e6a:	f47f aec5 	bne.w	d7bf8 <__aeabi_dmul+0x19c>
   d7e6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7e72:	f47f af0d 	bne.w	d7c90 <__aeabi_dmul+0x234>
   d7e76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7e7a:	f47f aeeb 	bne.w	d7c54 <__aeabi_dmul+0x1f8>
   d7e7e:	e712      	b.n	d7ca6 <__aeabi_dmul+0x24a>

000d7e80 <__gedf2>:
   d7e80:	f04f 3cff 	mov.w	ip, #4294967295
   d7e84:	e006      	b.n	d7e94 <__cmpdf2+0x4>
   d7e86:	bf00      	nop

000d7e88 <__ledf2>:
   d7e88:	f04f 0c01 	mov.w	ip, #1
   d7e8c:	e002      	b.n	d7e94 <__cmpdf2+0x4>
   d7e8e:	bf00      	nop

000d7e90 <__cmpdf2>:
   d7e90:	f04f 0c01 	mov.w	ip, #1
   d7e94:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7ea0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7ea4:	bf18      	it	ne
   d7ea6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d7eaa:	d01b      	beq.n	d7ee4 <__cmpdf2+0x54>
   d7eac:	b001      	add	sp, #4
   d7eae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d7eb2:	bf0c      	ite	eq
   d7eb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d7eb8:	ea91 0f03 	teqne	r1, r3
   d7ebc:	bf02      	ittt	eq
   d7ebe:	ea90 0f02 	teqeq	r0, r2
   d7ec2:	2000      	moveq	r0, #0
   d7ec4:	4770      	bxeq	lr
   d7ec6:	f110 0f00 	cmn.w	r0, #0
   d7eca:	ea91 0f03 	teq	r1, r3
   d7ece:	bf58      	it	pl
   d7ed0:	4299      	cmppl	r1, r3
   d7ed2:	bf08      	it	eq
   d7ed4:	4290      	cmpeq	r0, r2
   d7ed6:	bf2c      	ite	cs
   d7ed8:	17d8      	asrcs	r0, r3, #31
   d7eda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d7ede:	f040 0001 	orr.w	r0, r0, #1
   d7ee2:	4770      	bx	lr
   d7ee4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7ee8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7eec:	d102      	bne.n	d7ef4 <__cmpdf2+0x64>
   d7eee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d7ef2:	d107      	bne.n	d7f04 <__cmpdf2+0x74>
   d7ef4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d7ef8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d7efc:	d1d6      	bne.n	d7eac <__cmpdf2+0x1c>
   d7efe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7f02:	d0d3      	beq.n	d7eac <__cmpdf2+0x1c>
   d7f04:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7f08:	4770      	bx	lr
   d7f0a:	bf00      	nop

000d7f0c <__aeabi_cdrcmple>:
   d7f0c:	4684      	mov	ip, r0
   d7f0e:	4610      	mov	r0, r2
   d7f10:	4662      	mov	r2, ip
   d7f12:	468c      	mov	ip, r1
   d7f14:	4619      	mov	r1, r3
   d7f16:	4663      	mov	r3, ip
   d7f18:	e000      	b.n	d7f1c <__aeabi_cdcmpeq>
   d7f1a:	bf00      	nop

000d7f1c <__aeabi_cdcmpeq>:
   d7f1c:	b501      	push	{r0, lr}
   d7f1e:	f7ff ffb7 	bl	d7e90 <__cmpdf2>
   d7f22:	2800      	cmp	r0, #0
   d7f24:	bf48      	it	mi
   d7f26:	f110 0f00 	cmnmi.w	r0, #0
   d7f2a:	bd01      	pop	{r0, pc}

000d7f2c <__aeabi_dcmpeq>:
   d7f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f30:	f7ff fff4 	bl	d7f1c <__aeabi_cdcmpeq>
   d7f34:	bf0c      	ite	eq
   d7f36:	2001      	moveq	r0, #1
   d7f38:	2000      	movne	r0, #0
   d7f3a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f3e:	bf00      	nop

000d7f40 <__aeabi_dcmplt>:
   d7f40:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f44:	f7ff ffea 	bl	d7f1c <__aeabi_cdcmpeq>
   d7f48:	bf34      	ite	cc
   d7f4a:	2001      	movcc	r0, #1
   d7f4c:	2000      	movcs	r0, #0
   d7f4e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f52:	bf00      	nop

000d7f54 <__aeabi_dcmple>:
   d7f54:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f58:	f7ff ffe0 	bl	d7f1c <__aeabi_cdcmpeq>
   d7f5c:	bf94      	ite	ls
   d7f5e:	2001      	movls	r0, #1
   d7f60:	2000      	movhi	r0, #0
   d7f62:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f66:	bf00      	nop

000d7f68 <__aeabi_dcmpge>:
   d7f68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f6c:	f7ff ffce 	bl	d7f0c <__aeabi_cdrcmple>
   d7f70:	bf94      	ite	ls
   d7f72:	2001      	movls	r0, #1
   d7f74:	2000      	movhi	r0, #0
   d7f76:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f7a:	bf00      	nop

000d7f7c <__aeabi_dcmpgt>:
   d7f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7f80:	f7ff ffc4 	bl	d7f0c <__aeabi_cdrcmple>
   d7f84:	bf34      	ite	cc
   d7f86:	2001      	movcc	r0, #1
   d7f88:	2000      	movcs	r0, #0
   d7f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   d7f8e:	bf00      	nop

000d7f90 <__aeabi_d2uiz>:
   d7f90:	004a      	lsls	r2, r1, #1
   d7f92:	d211      	bcs.n	d7fb8 <__aeabi_d2uiz+0x28>
   d7f94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7f98:	d211      	bcs.n	d7fbe <__aeabi_d2uiz+0x2e>
   d7f9a:	d50d      	bpl.n	d7fb8 <__aeabi_d2uiz+0x28>
   d7f9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d7fa0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d7fa4:	d40e      	bmi.n	d7fc4 <__aeabi_d2uiz+0x34>
   d7fa6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d7fae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d7fb2:	fa23 f002 	lsr.w	r0, r3, r2
   d7fb6:	4770      	bx	lr
   d7fb8:	f04f 0000 	mov.w	r0, #0
   d7fbc:	4770      	bx	lr
   d7fbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d7fc2:	d102      	bne.n	d7fca <__aeabi_d2uiz+0x3a>
   d7fc4:	f04f 30ff 	mov.w	r0, #4294967295
   d7fc8:	4770      	bx	lr
   d7fca:	f04f 0000 	mov.w	r0, #0
   d7fce:	4770      	bx	lr

000d7fd0 <__aeabi_uldivmod>:
   d7fd0:	b953      	cbnz	r3, d7fe8 <__aeabi_uldivmod+0x18>
   d7fd2:	b94a      	cbnz	r2, d7fe8 <__aeabi_uldivmod+0x18>
   d7fd4:	2900      	cmp	r1, #0
   d7fd6:	bf08      	it	eq
   d7fd8:	2800      	cmpeq	r0, #0
   d7fda:	bf1c      	itt	ne
   d7fdc:	f04f 31ff 	movne.w	r1, #4294967295
   d7fe0:	f04f 30ff 	movne.w	r0, #4294967295
   d7fe4:	f000 b98c 	b.w	d8300 <__aeabi_idiv0>
   d7fe8:	f1ad 0c08 	sub.w	ip, sp, #8
   d7fec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d7ff0:	f000 f824 	bl	d803c <__udivmoddi4>
   d7ff4:	f8dd e004 	ldr.w	lr, [sp, #4]
   d7ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7ffc:	b004      	add	sp, #16
   d7ffe:	4770      	bx	lr

000d8000 <__aeabi_d2ulz>:
   d8000:	b5d0      	push	{r4, r6, r7, lr}
   d8002:	4b0c      	ldr	r3, [pc, #48]	; (d8034 <__aeabi_d2ulz+0x34>)
   d8004:	2200      	movs	r2, #0
   d8006:	4606      	mov	r6, r0
   d8008:	460f      	mov	r7, r1
   d800a:	f7ff fd27 	bl	d7a5c <__aeabi_dmul>
   d800e:	f7ff ffbf 	bl	d7f90 <__aeabi_d2uiz>
   d8012:	4604      	mov	r4, r0
   d8014:	f7ff fca8 	bl	d7968 <__aeabi_ui2d>
   d8018:	4b07      	ldr	r3, [pc, #28]	; (d8038 <__aeabi_d2ulz+0x38>)
   d801a:	2200      	movs	r2, #0
   d801c:	f7ff fd1e 	bl	d7a5c <__aeabi_dmul>
   d8020:	4602      	mov	r2, r0
   d8022:	460b      	mov	r3, r1
   d8024:	4630      	mov	r0, r6
   d8026:	4639      	mov	r1, r7
   d8028:	f7ff fb60 	bl	d76ec <__aeabi_dsub>
   d802c:	f7ff ffb0 	bl	d7f90 <__aeabi_d2uiz>
   d8030:	4621      	mov	r1, r4
   d8032:	bdd0      	pop	{r4, r6, r7, pc}
   d8034:	3df00000 	.word	0x3df00000
   d8038:	41f00000 	.word	0x41f00000

000d803c <__udivmoddi4>:
   d803c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8040:	9d08      	ldr	r5, [sp, #32]
   d8042:	4604      	mov	r4, r0
   d8044:	468c      	mov	ip, r1
   d8046:	2b00      	cmp	r3, #0
   d8048:	f040 8083 	bne.w	d8152 <__udivmoddi4+0x116>
   d804c:	428a      	cmp	r2, r1
   d804e:	4617      	mov	r7, r2
   d8050:	d947      	bls.n	d80e2 <__udivmoddi4+0xa6>
   d8052:	fab2 f282 	clz	r2, r2
   d8056:	b142      	cbz	r2, d806a <__udivmoddi4+0x2e>
   d8058:	f1c2 0020 	rsb	r0, r2, #32
   d805c:	fa24 f000 	lsr.w	r0, r4, r0
   d8060:	4091      	lsls	r1, r2
   d8062:	4097      	lsls	r7, r2
   d8064:	ea40 0c01 	orr.w	ip, r0, r1
   d8068:	4094      	lsls	r4, r2
   d806a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d806e:	0c23      	lsrs	r3, r4, #16
   d8070:	fbbc f6f8 	udiv	r6, ip, r8
   d8074:	fa1f fe87 	uxth.w	lr, r7
   d8078:	fb08 c116 	mls	r1, r8, r6, ip
   d807c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8080:	fb06 f10e 	mul.w	r1, r6, lr
   d8084:	4299      	cmp	r1, r3
   d8086:	d909      	bls.n	d809c <__udivmoddi4+0x60>
   d8088:	18fb      	adds	r3, r7, r3
   d808a:	f106 30ff 	add.w	r0, r6, #4294967295
   d808e:	f080 8119 	bcs.w	d82c4 <__udivmoddi4+0x288>
   d8092:	4299      	cmp	r1, r3
   d8094:	f240 8116 	bls.w	d82c4 <__udivmoddi4+0x288>
   d8098:	3e02      	subs	r6, #2
   d809a:	443b      	add	r3, r7
   d809c:	1a5b      	subs	r3, r3, r1
   d809e:	b2a4      	uxth	r4, r4
   d80a0:	fbb3 f0f8 	udiv	r0, r3, r8
   d80a4:	fb08 3310 	mls	r3, r8, r0, r3
   d80a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d80ac:	fb00 fe0e 	mul.w	lr, r0, lr
   d80b0:	45a6      	cmp	lr, r4
   d80b2:	d909      	bls.n	d80c8 <__udivmoddi4+0x8c>
   d80b4:	193c      	adds	r4, r7, r4
   d80b6:	f100 33ff 	add.w	r3, r0, #4294967295
   d80ba:	f080 8105 	bcs.w	d82c8 <__udivmoddi4+0x28c>
   d80be:	45a6      	cmp	lr, r4
   d80c0:	f240 8102 	bls.w	d82c8 <__udivmoddi4+0x28c>
   d80c4:	3802      	subs	r0, #2
   d80c6:	443c      	add	r4, r7
   d80c8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d80cc:	eba4 040e 	sub.w	r4, r4, lr
   d80d0:	2600      	movs	r6, #0
   d80d2:	b11d      	cbz	r5, d80dc <__udivmoddi4+0xa0>
   d80d4:	40d4      	lsrs	r4, r2
   d80d6:	2300      	movs	r3, #0
   d80d8:	e9c5 4300 	strd	r4, r3, [r5]
   d80dc:	4631      	mov	r1, r6
   d80de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d80e2:	b902      	cbnz	r2, d80e6 <__udivmoddi4+0xaa>
   d80e4:	deff      	udf	#255	; 0xff
   d80e6:	fab2 f282 	clz	r2, r2
   d80ea:	2a00      	cmp	r2, #0
   d80ec:	d150      	bne.n	d8190 <__udivmoddi4+0x154>
   d80ee:	1bcb      	subs	r3, r1, r7
   d80f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d80f4:	fa1f f887 	uxth.w	r8, r7
   d80f8:	2601      	movs	r6, #1
   d80fa:	fbb3 fcfe 	udiv	ip, r3, lr
   d80fe:	0c21      	lsrs	r1, r4, #16
   d8100:	fb0e 331c 	mls	r3, lr, ip, r3
   d8104:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8108:	fb08 f30c 	mul.w	r3, r8, ip
   d810c:	428b      	cmp	r3, r1
   d810e:	d907      	bls.n	d8120 <__udivmoddi4+0xe4>
   d8110:	1879      	adds	r1, r7, r1
   d8112:	f10c 30ff 	add.w	r0, ip, #4294967295
   d8116:	d202      	bcs.n	d811e <__udivmoddi4+0xe2>
   d8118:	428b      	cmp	r3, r1
   d811a:	f200 80e9 	bhi.w	d82f0 <__udivmoddi4+0x2b4>
   d811e:	4684      	mov	ip, r0
   d8120:	1ac9      	subs	r1, r1, r3
   d8122:	b2a3      	uxth	r3, r4
   d8124:	fbb1 f0fe 	udiv	r0, r1, lr
   d8128:	fb0e 1110 	mls	r1, lr, r0, r1
   d812c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d8130:	fb08 f800 	mul.w	r8, r8, r0
   d8134:	45a0      	cmp	r8, r4
   d8136:	d907      	bls.n	d8148 <__udivmoddi4+0x10c>
   d8138:	193c      	adds	r4, r7, r4
   d813a:	f100 33ff 	add.w	r3, r0, #4294967295
   d813e:	d202      	bcs.n	d8146 <__udivmoddi4+0x10a>
   d8140:	45a0      	cmp	r8, r4
   d8142:	f200 80d9 	bhi.w	d82f8 <__udivmoddi4+0x2bc>
   d8146:	4618      	mov	r0, r3
   d8148:	eba4 0408 	sub.w	r4, r4, r8
   d814c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d8150:	e7bf      	b.n	d80d2 <__udivmoddi4+0x96>
   d8152:	428b      	cmp	r3, r1
   d8154:	d909      	bls.n	d816a <__udivmoddi4+0x12e>
   d8156:	2d00      	cmp	r5, #0
   d8158:	f000 80b1 	beq.w	d82be <__udivmoddi4+0x282>
   d815c:	2600      	movs	r6, #0
   d815e:	e9c5 0100 	strd	r0, r1, [r5]
   d8162:	4630      	mov	r0, r6
   d8164:	4631      	mov	r1, r6
   d8166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d816a:	fab3 f683 	clz	r6, r3
   d816e:	2e00      	cmp	r6, #0
   d8170:	d14a      	bne.n	d8208 <__udivmoddi4+0x1cc>
   d8172:	428b      	cmp	r3, r1
   d8174:	d302      	bcc.n	d817c <__udivmoddi4+0x140>
   d8176:	4282      	cmp	r2, r0
   d8178:	f200 80b8 	bhi.w	d82ec <__udivmoddi4+0x2b0>
   d817c:	1a84      	subs	r4, r0, r2
   d817e:	eb61 0103 	sbc.w	r1, r1, r3
   d8182:	2001      	movs	r0, #1
   d8184:	468c      	mov	ip, r1
   d8186:	2d00      	cmp	r5, #0
   d8188:	d0a8      	beq.n	d80dc <__udivmoddi4+0xa0>
   d818a:	e9c5 4c00 	strd	r4, ip, [r5]
   d818e:	e7a5      	b.n	d80dc <__udivmoddi4+0xa0>
   d8190:	f1c2 0320 	rsb	r3, r2, #32
   d8194:	fa20 f603 	lsr.w	r6, r0, r3
   d8198:	4097      	lsls	r7, r2
   d819a:	fa01 f002 	lsl.w	r0, r1, r2
   d819e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d81a2:	40d9      	lsrs	r1, r3
   d81a4:	4330      	orrs	r0, r6
   d81a6:	0c03      	lsrs	r3, r0, #16
   d81a8:	fbb1 f6fe 	udiv	r6, r1, lr
   d81ac:	fa1f f887 	uxth.w	r8, r7
   d81b0:	fb0e 1116 	mls	r1, lr, r6, r1
   d81b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d81b8:	fb06 f108 	mul.w	r1, r6, r8
   d81bc:	4299      	cmp	r1, r3
   d81be:	fa04 f402 	lsl.w	r4, r4, r2
   d81c2:	d909      	bls.n	d81d8 <__udivmoddi4+0x19c>
   d81c4:	18fb      	adds	r3, r7, r3
   d81c6:	f106 3cff 	add.w	ip, r6, #4294967295
   d81ca:	f080 808d 	bcs.w	d82e8 <__udivmoddi4+0x2ac>
   d81ce:	4299      	cmp	r1, r3
   d81d0:	f240 808a 	bls.w	d82e8 <__udivmoddi4+0x2ac>
   d81d4:	3e02      	subs	r6, #2
   d81d6:	443b      	add	r3, r7
   d81d8:	1a5b      	subs	r3, r3, r1
   d81da:	b281      	uxth	r1, r0
   d81dc:	fbb3 f0fe 	udiv	r0, r3, lr
   d81e0:	fb0e 3310 	mls	r3, lr, r0, r3
   d81e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d81e8:	fb00 f308 	mul.w	r3, r0, r8
   d81ec:	428b      	cmp	r3, r1
   d81ee:	d907      	bls.n	d8200 <__udivmoddi4+0x1c4>
   d81f0:	1879      	adds	r1, r7, r1
   d81f2:	f100 3cff 	add.w	ip, r0, #4294967295
   d81f6:	d273      	bcs.n	d82e0 <__udivmoddi4+0x2a4>
   d81f8:	428b      	cmp	r3, r1
   d81fa:	d971      	bls.n	d82e0 <__udivmoddi4+0x2a4>
   d81fc:	3802      	subs	r0, #2
   d81fe:	4439      	add	r1, r7
   d8200:	1acb      	subs	r3, r1, r3
   d8202:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d8206:	e778      	b.n	d80fa <__udivmoddi4+0xbe>
   d8208:	f1c6 0c20 	rsb	ip, r6, #32
   d820c:	fa03 f406 	lsl.w	r4, r3, r6
   d8210:	fa22 f30c 	lsr.w	r3, r2, ip
   d8214:	431c      	orrs	r4, r3
   d8216:	fa20 f70c 	lsr.w	r7, r0, ip
   d821a:	fa01 f306 	lsl.w	r3, r1, r6
   d821e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d8222:	fa21 f10c 	lsr.w	r1, r1, ip
   d8226:	431f      	orrs	r7, r3
   d8228:	0c3b      	lsrs	r3, r7, #16
   d822a:	fbb1 f9fe 	udiv	r9, r1, lr
   d822e:	fa1f f884 	uxth.w	r8, r4
   d8232:	fb0e 1119 	mls	r1, lr, r9, r1
   d8236:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d823a:	fb09 fa08 	mul.w	sl, r9, r8
   d823e:	458a      	cmp	sl, r1
   d8240:	fa02 f206 	lsl.w	r2, r2, r6
   d8244:	fa00 f306 	lsl.w	r3, r0, r6
   d8248:	d908      	bls.n	d825c <__udivmoddi4+0x220>
   d824a:	1861      	adds	r1, r4, r1
   d824c:	f109 30ff 	add.w	r0, r9, #4294967295
   d8250:	d248      	bcs.n	d82e4 <__udivmoddi4+0x2a8>
   d8252:	458a      	cmp	sl, r1
   d8254:	d946      	bls.n	d82e4 <__udivmoddi4+0x2a8>
   d8256:	f1a9 0902 	sub.w	r9, r9, #2
   d825a:	4421      	add	r1, r4
   d825c:	eba1 010a 	sub.w	r1, r1, sl
   d8260:	b2bf      	uxth	r7, r7
   d8262:	fbb1 f0fe 	udiv	r0, r1, lr
   d8266:	fb0e 1110 	mls	r1, lr, r0, r1
   d826a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d826e:	fb00 f808 	mul.w	r8, r0, r8
   d8272:	45b8      	cmp	r8, r7
   d8274:	d907      	bls.n	d8286 <__udivmoddi4+0x24a>
   d8276:	19e7      	adds	r7, r4, r7
   d8278:	f100 31ff 	add.w	r1, r0, #4294967295
   d827c:	d22e      	bcs.n	d82dc <__udivmoddi4+0x2a0>
   d827e:	45b8      	cmp	r8, r7
   d8280:	d92c      	bls.n	d82dc <__udivmoddi4+0x2a0>
   d8282:	3802      	subs	r0, #2
   d8284:	4427      	add	r7, r4
   d8286:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d828a:	eba7 0708 	sub.w	r7, r7, r8
   d828e:	fba0 8902 	umull	r8, r9, r0, r2
   d8292:	454f      	cmp	r7, r9
   d8294:	46c6      	mov	lr, r8
   d8296:	4649      	mov	r1, r9
   d8298:	d31a      	bcc.n	d82d0 <__udivmoddi4+0x294>
   d829a:	d017      	beq.n	d82cc <__udivmoddi4+0x290>
   d829c:	b15d      	cbz	r5, d82b6 <__udivmoddi4+0x27a>
   d829e:	ebb3 020e 	subs.w	r2, r3, lr
   d82a2:	eb67 0701 	sbc.w	r7, r7, r1
   d82a6:	fa07 fc0c 	lsl.w	ip, r7, ip
   d82aa:	40f2      	lsrs	r2, r6
   d82ac:	ea4c 0202 	orr.w	r2, ip, r2
   d82b0:	40f7      	lsrs	r7, r6
   d82b2:	e9c5 2700 	strd	r2, r7, [r5]
   d82b6:	2600      	movs	r6, #0
   d82b8:	4631      	mov	r1, r6
   d82ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d82be:	462e      	mov	r6, r5
   d82c0:	4628      	mov	r0, r5
   d82c2:	e70b      	b.n	d80dc <__udivmoddi4+0xa0>
   d82c4:	4606      	mov	r6, r0
   d82c6:	e6e9      	b.n	d809c <__udivmoddi4+0x60>
   d82c8:	4618      	mov	r0, r3
   d82ca:	e6fd      	b.n	d80c8 <__udivmoddi4+0x8c>
   d82cc:	4543      	cmp	r3, r8
   d82ce:	d2e5      	bcs.n	d829c <__udivmoddi4+0x260>
   d82d0:	ebb8 0e02 	subs.w	lr, r8, r2
   d82d4:	eb69 0104 	sbc.w	r1, r9, r4
   d82d8:	3801      	subs	r0, #1
   d82da:	e7df      	b.n	d829c <__udivmoddi4+0x260>
   d82dc:	4608      	mov	r0, r1
   d82de:	e7d2      	b.n	d8286 <__udivmoddi4+0x24a>
   d82e0:	4660      	mov	r0, ip
   d82e2:	e78d      	b.n	d8200 <__udivmoddi4+0x1c4>
   d82e4:	4681      	mov	r9, r0
   d82e6:	e7b9      	b.n	d825c <__udivmoddi4+0x220>
   d82e8:	4666      	mov	r6, ip
   d82ea:	e775      	b.n	d81d8 <__udivmoddi4+0x19c>
   d82ec:	4630      	mov	r0, r6
   d82ee:	e74a      	b.n	d8186 <__udivmoddi4+0x14a>
   d82f0:	f1ac 0c02 	sub.w	ip, ip, #2
   d82f4:	4439      	add	r1, r7
   d82f6:	e713      	b.n	d8120 <__udivmoddi4+0xe4>
   d82f8:	3802      	subs	r0, #2
   d82fa:	443c      	add	r4, r7
   d82fc:	e724      	b.n	d8148 <__udivmoddi4+0x10c>
   d82fe:	bf00      	nop

000d8300 <__aeabi_idiv0>:
   d8300:	4770      	bx	lr
   d8302:	bf00      	nop

000d8304 <atoi>:
   d8304:	220a      	movs	r2, #10
   d8306:	2100      	movs	r1, #0
   d8308:	f000 b8ec 	b.w	d84e4 <strtol>

000d830c <atol>:
   d830c:	220a      	movs	r2, #10
   d830e:	2100      	movs	r1, #0
   d8310:	f000 b8e8 	b.w	d84e4 <strtol>

000d8314 <__cxa_atexit>:
   d8314:	b510      	push	{r4, lr}
   d8316:	4c05      	ldr	r4, [pc, #20]	; (d832c <__cxa_atexit+0x18>)
   d8318:	4613      	mov	r3, r2
   d831a:	b12c      	cbz	r4, d8328 <__cxa_atexit+0x14>
   d831c:	460a      	mov	r2, r1
   d831e:	4601      	mov	r1, r0
   d8320:	2002      	movs	r0, #2
   d8322:	f3af 8000 	nop.w
   d8326:	bd10      	pop	{r4, pc}
   d8328:	4620      	mov	r0, r4
   d832a:	e7fc      	b.n	d8326 <__cxa_atexit+0x12>
   d832c:	00000000 	.word	0x00000000

000d8330 <memcpy>:
   d8330:	440a      	add	r2, r1
   d8332:	4291      	cmp	r1, r2
   d8334:	f100 33ff 	add.w	r3, r0, #4294967295
   d8338:	d100      	bne.n	d833c <memcpy+0xc>
   d833a:	4770      	bx	lr
   d833c:	b510      	push	{r4, lr}
   d833e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8342:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8346:	4291      	cmp	r1, r2
   d8348:	d1f9      	bne.n	d833e <memcpy+0xe>
   d834a:	bd10      	pop	{r4, pc}

000d834c <memset>:
   d834c:	4402      	add	r2, r0
   d834e:	4603      	mov	r3, r0
   d8350:	4293      	cmp	r3, r2
   d8352:	d100      	bne.n	d8356 <memset+0xa>
   d8354:	4770      	bx	lr
   d8356:	f803 1b01 	strb.w	r1, [r3], #1
   d835a:	e7f9      	b.n	d8350 <memset+0x4>

000d835c <srand>:
   d835c:	b538      	push	{r3, r4, r5, lr}
   d835e:	4b0d      	ldr	r3, [pc, #52]	; (d8394 <srand+0x38>)
   d8360:	681d      	ldr	r5, [r3, #0]
   d8362:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8364:	4604      	mov	r4, r0
   d8366:	b97b      	cbnz	r3, d8388 <srand+0x2c>
   d8368:	2018      	movs	r0, #24
   d836a:	f7fd fdd9 	bl	d5f20 <malloc>
   d836e:	4a0a      	ldr	r2, [pc, #40]	; (d8398 <srand+0x3c>)
   d8370:	4b0a      	ldr	r3, [pc, #40]	; (d839c <srand+0x40>)
   d8372:	63a8      	str	r0, [r5, #56]	; 0x38
   d8374:	e9c0 2300 	strd	r2, r3, [r0]
   d8378:	4b09      	ldr	r3, [pc, #36]	; (d83a0 <srand+0x44>)
   d837a:	6083      	str	r3, [r0, #8]
   d837c:	230b      	movs	r3, #11
   d837e:	8183      	strh	r3, [r0, #12]
   d8380:	2201      	movs	r2, #1
   d8382:	2300      	movs	r3, #0
   d8384:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8388:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d838a:	2200      	movs	r2, #0
   d838c:	611c      	str	r4, [r3, #16]
   d838e:	615a      	str	r2, [r3, #20]
   d8390:	bd38      	pop	{r3, r4, r5, pc}
   d8392:	bf00      	nop
   d8394:	2003e4f4 	.word	0x2003e4f4
   d8398:	abcd330e 	.word	0xabcd330e
   d839c:	e66d1234 	.word	0xe66d1234
   d83a0:	0005deec 	.word	0x0005deec

000d83a4 <strcmp>:
   d83a4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d83a8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d83ac:	2a01      	cmp	r2, #1
   d83ae:	bf28      	it	cs
   d83b0:	429a      	cmpcs	r2, r3
   d83b2:	d0f7      	beq.n	d83a4 <strcmp>
   d83b4:	1ad0      	subs	r0, r2, r3
   d83b6:	4770      	bx	lr

000d83b8 <strlen>:
   d83b8:	4603      	mov	r3, r0
   d83ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d83be:	2a00      	cmp	r2, #0
   d83c0:	d1fb      	bne.n	d83ba <strlen+0x2>
   d83c2:	1a18      	subs	r0, r3, r0
   d83c4:	3801      	subs	r0, #1
   d83c6:	4770      	bx	lr

000d83c8 <strncpy>:
   d83c8:	b510      	push	{r4, lr}
   d83ca:	3901      	subs	r1, #1
   d83cc:	4603      	mov	r3, r0
   d83ce:	b132      	cbz	r2, d83de <strncpy+0x16>
   d83d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d83d4:	f803 4b01 	strb.w	r4, [r3], #1
   d83d8:	3a01      	subs	r2, #1
   d83da:	2c00      	cmp	r4, #0
   d83dc:	d1f7      	bne.n	d83ce <strncpy+0x6>
   d83de:	441a      	add	r2, r3
   d83e0:	2100      	movs	r1, #0
   d83e2:	4293      	cmp	r3, r2
   d83e4:	d100      	bne.n	d83e8 <strncpy+0x20>
   d83e6:	bd10      	pop	{r4, pc}
   d83e8:	f803 1b01 	strb.w	r1, [r3], #1
   d83ec:	e7f9      	b.n	d83e2 <strncpy+0x1a>
	...

000d83f0 <_strtol_l.isra.0>:
   d83f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d83f4:	4e3a      	ldr	r6, [pc, #232]	; (d84e0 <_strtol_l.isra.0+0xf0>)
   d83f6:	4686      	mov	lr, r0
   d83f8:	468c      	mov	ip, r1
   d83fa:	4660      	mov	r0, ip
   d83fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8400:	5da5      	ldrb	r5, [r4, r6]
   d8402:	f015 0508 	ands.w	r5, r5, #8
   d8406:	d1f8      	bne.n	d83fa <_strtol_l.isra.0+0xa>
   d8408:	2c2d      	cmp	r4, #45	; 0x2d
   d840a:	d133      	bne.n	d8474 <_strtol_l.isra.0+0x84>
   d840c:	f89c 4000 	ldrb.w	r4, [ip]
   d8410:	f04f 0801 	mov.w	r8, #1
   d8414:	f100 0c02 	add.w	ip, r0, #2
   d8418:	2b00      	cmp	r3, #0
   d841a:	d05c      	beq.n	d84d6 <_strtol_l.isra.0+0xe6>
   d841c:	2b10      	cmp	r3, #16
   d841e:	d10c      	bne.n	d843a <_strtol_l.isra.0+0x4a>
   d8420:	2c30      	cmp	r4, #48	; 0x30
   d8422:	d10a      	bne.n	d843a <_strtol_l.isra.0+0x4a>
   d8424:	f89c 0000 	ldrb.w	r0, [ip]
   d8428:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d842c:	2858      	cmp	r0, #88	; 0x58
   d842e:	d14d      	bne.n	d84cc <_strtol_l.isra.0+0xdc>
   d8430:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8434:	2310      	movs	r3, #16
   d8436:	f10c 0c02 	add.w	ip, ip, #2
   d843a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d843e:	3f01      	subs	r7, #1
   d8440:	2600      	movs	r6, #0
   d8442:	fbb7 f9f3 	udiv	r9, r7, r3
   d8446:	4630      	mov	r0, r6
   d8448:	fb03 7a19 	mls	sl, r3, r9, r7
   d844c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8450:	2d09      	cmp	r5, #9
   d8452:	d818      	bhi.n	d8486 <_strtol_l.isra.0+0x96>
   d8454:	462c      	mov	r4, r5
   d8456:	42a3      	cmp	r3, r4
   d8458:	dd24      	ble.n	d84a4 <_strtol_l.isra.0+0xb4>
   d845a:	1c75      	adds	r5, r6, #1
   d845c:	d007      	beq.n	d846e <_strtol_l.isra.0+0x7e>
   d845e:	4581      	cmp	r9, r0
   d8460:	d31d      	bcc.n	d849e <_strtol_l.isra.0+0xae>
   d8462:	d101      	bne.n	d8468 <_strtol_l.isra.0+0x78>
   d8464:	45a2      	cmp	sl, r4
   d8466:	db1a      	blt.n	d849e <_strtol_l.isra.0+0xae>
   d8468:	fb00 4003 	mla	r0, r0, r3, r4
   d846c:	2601      	movs	r6, #1
   d846e:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8472:	e7eb      	b.n	d844c <_strtol_l.isra.0+0x5c>
   d8474:	2c2b      	cmp	r4, #43	; 0x2b
   d8476:	bf08      	it	eq
   d8478:	f89c 4000 	ldrbeq.w	r4, [ip]
   d847c:	46a8      	mov	r8, r5
   d847e:	bf08      	it	eq
   d8480:	f100 0c02 	addeq.w	ip, r0, #2
   d8484:	e7c8      	b.n	d8418 <_strtol_l.isra.0+0x28>
   d8486:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d848a:	2d19      	cmp	r5, #25
   d848c:	d801      	bhi.n	d8492 <_strtol_l.isra.0+0xa2>
   d848e:	3c37      	subs	r4, #55	; 0x37
   d8490:	e7e1      	b.n	d8456 <_strtol_l.isra.0+0x66>
   d8492:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8496:	2d19      	cmp	r5, #25
   d8498:	d804      	bhi.n	d84a4 <_strtol_l.isra.0+0xb4>
   d849a:	3c57      	subs	r4, #87	; 0x57
   d849c:	e7db      	b.n	d8456 <_strtol_l.isra.0+0x66>
   d849e:	f04f 36ff 	mov.w	r6, #4294967295
   d84a2:	e7e4      	b.n	d846e <_strtol_l.isra.0+0x7e>
   d84a4:	1c73      	adds	r3, r6, #1
   d84a6:	d106      	bne.n	d84b6 <_strtol_l.isra.0+0xc6>
   d84a8:	2322      	movs	r3, #34	; 0x22
   d84aa:	f8ce 3000 	str.w	r3, [lr]
   d84ae:	4638      	mov	r0, r7
   d84b0:	b942      	cbnz	r2, d84c4 <_strtol_l.isra.0+0xd4>
   d84b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84b6:	f1b8 0f00 	cmp.w	r8, #0
   d84ba:	d000      	beq.n	d84be <_strtol_l.isra.0+0xce>
   d84bc:	4240      	negs	r0, r0
   d84be:	2a00      	cmp	r2, #0
   d84c0:	d0f7      	beq.n	d84b2 <_strtol_l.isra.0+0xc2>
   d84c2:	b10e      	cbz	r6, d84c8 <_strtol_l.isra.0+0xd8>
   d84c4:	f10c 31ff 	add.w	r1, ip, #4294967295
   d84c8:	6011      	str	r1, [r2, #0]
   d84ca:	e7f2      	b.n	d84b2 <_strtol_l.isra.0+0xc2>
   d84cc:	2430      	movs	r4, #48	; 0x30
   d84ce:	2b00      	cmp	r3, #0
   d84d0:	d1b3      	bne.n	d843a <_strtol_l.isra.0+0x4a>
   d84d2:	2308      	movs	r3, #8
   d84d4:	e7b1      	b.n	d843a <_strtol_l.isra.0+0x4a>
   d84d6:	2c30      	cmp	r4, #48	; 0x30
   d84d8:	d0a4      	beq.n	d8424 <_strtol_l.isra.0+0x34>
   d84da:	230a      	movs	r3, #10
   d84dc:	e7ad      	b.n	d843a <_strtol_l.isra.0+0x4a>
   d84de:	bf00      	nop
   d84e0:	000d8d8e 	.word	0x000d8d8e

000d84e4 <strtol>:
   d84e4:	4613      	mov	r3, r2
   d84e6:	460a      	mov	r2, r1
   d84e8:	4601      	mov	r1, r0
   d84ea:	4802      	ldr	r0, [pc, #8]	; (d84f4 <strtol+0x10>)
   d84ec:	6800      	ldr	r0, [r0, #0]
   d84ee:	f7ff bf7f 	b.w	d83f0 <_strtol_l.isra.0>
   d84f2:	bf00      	nop
   d84f4:	2003e4f4 	.word	0x2003e4f4

000d84f8 <dynalib_user>:
   d84f8:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d8508:	00000000 61666564 20746c75 42534d00     ....default .MSB
   d8518:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   d8528:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   d8538:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   d8548:	45444f4d 003e7525 25007325 6c250069     MODE%u>.%s.%i.%l
   d8558:	6e690069 74756f00 6d777000 00776400     i.in.out.pwm.dw.
   d8568:	44007761 5f795349 73526139 796e4851     aw.DISy_9aRsQHny
   d8578:	746d3874 68585a76 54723930 7964742d     t8mtvZXh09rT-tdy
   d8588:	00523237 75746573 63755370 73736563     72R.setupSuccess
   d8598:	0064253d 6e007776 6173206f 656c706d     =%d.vw.no sample
   d85a8:	72617000 74007369 6d65546a 61726570     .paris.tjTempera
   d85b8:	65727574 62616c00 6568742e 2e6c6377     ture.lab.thewcl.
   d85c8:	006d6f63                                com.

000d85cc <_ZTVN8particle11SPISettingsE>:
	...
   d85d4:	000d415d 000d40cd 000d40cf              ]A...@...@..

000d85e0 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   d85e0:	6b6e6c62 00666e69 00726576 2e302e31     blnkinf.ver.1.0.
   d85f0:	2d680030 74616562 00353400 66667562     0.h-beat.45.buff
   d8600:	006e692d 34323031 76656400 72615000     -in.1024.dev.Par
   d8610:	6c636974 75620065 00646c69 206c754a     ticle.build.Jul 
   d8620:	32203531 20313230 343a3231 30323a39     15 2021 12:49:20
   d8630:	00000000 54514d04 06000454 7349514d     .....MQTT...MQIs
   d8640:	00037064                                dp..

000d8644 <_ZL22BlynkReadHandlerVector>:
   d8644:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8654:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8664:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8674:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8684:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8694:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d86a4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d86b4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d86c4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d86d4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d86e4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d86f4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8704:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8714:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8724:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8734:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8744:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8754:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8764:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8774:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8784:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8794:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d87a4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d87b4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d87c4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d87d4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d87e4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d87f4:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8804:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8814:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8824:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..
   d8834:	000d5779 000d5779 000d5779 000d5779     yW..yW..yW..yW..

000d8844 <_ZL23BlynkWriteHandlerVector>:
   d8844:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8854:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8864:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8874:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8884:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8894:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d88a4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d88b4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d88c4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d88d4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d88e4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d88f4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8904:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8914:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8924:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8934:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8944:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8954:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8964:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8974:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8984:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8994:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d89a4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d89b4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d89c4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d89d4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d89e4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d89f4:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8a04:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8a14:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8a24:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8a34:	000d577b 000d577b 000d577b 000d577b     {W..{W..{W..{W..
   d8a44:	69766564 6e206563 6620746f 646e756f     device not found
   d8a54:	00000000                                ....

000d8a58 <_ZTV6LIS3DH>:
	...
   d8a68:	000d58bd 000d40a9 000d40a9              .X...@...@..

000d8a74 <_ZTV9LIS3DHSPI>:
	...
   d8a7c:	000d57a9 000d57ab 000d58df 000d57e9     .W...W...X...W..
   d8a8c:	000d582b 000d57b9 000d57d3              +X...W...W..

000d8a98 <_ZTVN5spark13EthernetClassE>:
	...
   d8aa0:	000d5fef 000d5fe5 000d5fdb 000d5fd1     ._..._..._..._..
   d8ab0:	000d5fc5 000d5fb9 000d7191 000d7199     ._..._...q...q..
   d8ac0:	000d5fad 000d5fa5 000d5f9b 000d5f91     ._..._..._..._..
   d8ad0:	000d71c9                                .q..

000d8ad4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d8ad4:	18100800 38302820                       .... (08

000d8adc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d8ae4:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   d8af4:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000d8b04 <_ZTV9IPAddress>:
	...
   d8b0c:	000d6779 000d6769 000d676b              yg..ig..kg..

000d8b18 <_ZTV9USBSerial>:
	...
   d8b20:	000d689d 000d6905 000d68db 000d6471     .h...i...h..qd..
   d8b30:	000d68cd 000d689f 000d68af 000d68ff     .h...h...h...h..
   d8b40:	000d68bf 000d6899                       .h...h..

000d8b48 <_ZTV11USARTSerial>:
	...
   d8b50:	000d69a9 000d6a15 000d69ed 000d6471     .i...j...i..qd..
   d8b60:	000d69bd 000d69d9 000d69cb 000d69e7     .i...i...i...i..
   d8b70:	000d69ab 000d69af                       .i...i..

000d8b78 <_ZTV7TwoWire>:
	...
   d8b80:	000d6aa5 000d6aef 000d6ac7 000d6aa7     .j...j...j...j..
   d8b90:	000d6acf 000d6ad7 000d6adf 000d6ae7     .j...j...j...j..
   d8ba0:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   d8bb0:	203d2072 00006425                       r = %d..

000d8bb8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d8bc0:	000d6ba3 000d6bc5 000d6fdf 000d6bd3     .k...k...o...k..
   d8bd0:	000d6ba5                                .k..

000d8bd4 <_ZTV9TCPClient>:
	...
   d8bdc:	000d6c51 000d6c85 000d6b21 000d6b3b     Ql...l..!k..;k..
   d8bec:	000d6e75 000d6ce7 000d6cb9 000d6b65     un...l...l..ek..
   d8bfc:	000d6d7f 000d6fe5 000d6d1b 000d6f29     .m...o...m..)o..
   d8c0c:	000d6b67 000d6b99 000d6b4d 000d6bd7     gk...k..Mk...k..
   d8c1c:	000d6c99                                .l..

000d8c20 <_ZTVN5spark9WiFiClassE>:
	...
   d8c28:	000d7133 000d7129 000d711f 000d70e1     3q..)q...q...p..
   d8c38:	000d65e5 000d7113 000d7191 000d7199     .e...q...q...q..
   d8c48:	000d7107 000d70ff 000d70f5 000d70eb     .q...p...p...p..
   d8c58:	000d71c9                                .q..

000d8c5c <_ZTVN5spark12NetworkClassE>:
	...
   d8c64:	000d7151 000d715b 000d7165 000d716f     Qq..[q..eq..oq..
   d8c74:	000d7179 000d7185 000d7191 000d7199     yq...q...q...q..
   d8c84:	000d71a1 000d71ad 000d71b5 000d71bf     .q...q...q...q..
   d8c94:	000d71c9                                .q..

000d8c98 <_ZSt7nothrow>:
	...

000d8c99 <_ZTSSt19_Sp_make_shared_tag>:
   d8c99:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d8ca9:	5f646572 00676174                        red_tag....

000d8cb4 <_ZTISt19_Sp_make_shared_tag>:
   d8cb4:	000d8cf4 000d8c99                       ........

000d8cbc <_ZTIN10__cxxabiv117__class_type_infoE>:
   d8cbc:	000d8d54 000d8cc8 000d8d78              T.......x...

000d8cc8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d8cc8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d8cd8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d8ce8:	00000045                                E...

000d8cec <_ZTVN10__cxxabiv117__class_type_infoE>:
   d8cec:	00000000 000d8cbc 000d750d 000d7521     .........u..!u..
   d8cfc:	000d76b5 000d76b5 000d758b 000d74cd     .v...v...u...t..
   d8d0c:	000d7573 000d7535 000d7501              su..5u...u..

000d8d18 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8d18:	000d8d54 000d8d24 000d8cbc              T...$.......

000d8d24 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8d24:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d8d34:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d8d44:	456f666e 00000000                       nfoE....

000d8d4c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8d4c:	00000000 000d8d18 000d75b5 000d75c9     .........u...u..
   d8d5c:	000d76b5 000d76b5 000d758b 000d74cd     .v...v...u...t..
   d8d6c:	000d7689 000d7615 000d75dd              .v...v...u..

000d8d78 <_ZTISt9type_info>:
   d8d78:	000d8cf4 000d8d80                       ........

000d8d80 <_ZTSSt9type_info>:
   d8d80:	74397453 5f657079 6f666e69               St9type_info.

000d8d8d <_ctype_>:
   d8d8d:	20202000 20202020 28282020 20282828     .         ((((( 
   d8d9d:	20202020 20202020 20202020 20202020                     
   d8dad:	10108820 10101010 10101010 10101010      ...............
   d8dbd:	04040410 04040404 10040404 10101010     ................
   d8dcd:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8ddd:	01010101 01010101 01010101 10101010     ................
   d8ded:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8dfd:	02020202 02020202 02020202 10101010     ................
   d8e0d:	00000020 00000000 00000000 00000000      ...............
	...

000d8e8e <link_const_variable_data_end>:
	...

000d8e90 <link_constructors_location>:
   d8e90:	000d4d4d 	.word	0x000d4d4d
   d8e94:	000d5ff9 	.word	0x000d5ff9
   d8e98:	000d618d 	.word	0x000d618d
   d8e9c:	000d6449 	.word	0x000d6449
   d8ea0:	000d65f1 	.word	0x000d65f1
   d8ea4:	000d6601 	.word	0x000d6601
   d8ea8:	000d6629 	.word	0x000d6629
   d8eac:	000d713d 	.word	0x000d713d
   d8eb0:	000d72a9 	.word	0x000d72a9

000d8eb4 <link_constructors_end>:
	...
